<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://hmf.github.io/tech4rd</link>
    <atom:link href="https://hmf.github.io/tech4rd/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 11 Oct 2022 18:07:05 +0100</pubDate>
    <lastBuildDate>Tue, 11 Oct 2022 18:07:05 +0100</lastBuildDate>

    <item>
      <title>Tutorial: Publishing your own Github blog (Part 3)</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_3.html</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/mill/jbake/mill_mdoc_part_3.html</guid>
      	<description>
	&lt;!-- cSpell:ignore javac, Haoyi, Roeser, Coursier, scalac, lihaoyi, Laika, Pamflet, Nanoc, CNAME, Gruber, millw, Thymeleaf, tototec, tobiasroeser ---&gt; &lt;!-- cSpell:ignore Freemarker, Plotly, Tabler, Commonmark, glyphicons, rwxrwxr, jbake, masterindex, hljs ---&gt; &lt;!-- cSpell:ignore adoc, shiv, ivys, halflings, asciidoctor, classpath, scaladoc, mkdir, Fontawesome, stackoverflow ---&gt; &lt;!--  cSpell:ignore stumbleupon, darkmode, rootpath, monospaced, disqus, Monokai, lioshi, googlecode, Flexmark ---&gt; &lt;!--  cSpell:ignore println, rgba ---&gt; &lt;!-- https://www.deadlinkchecker.com/website-dead-link-checker.asp --&gt; &lt;!-- https://support.codebasehq.com/articles/tips-tricks/syntax-highlighting-in-markdown --&gt; &lt;!-- https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown --&gt; &lt;!-- https://opensource.com/article/17/7/4-lightweight-image-viewers-linux-desktop --&gt; &lt;!-- https://github.com/streetsidesoftware/vscode-spell-checker/issues/117 --&gt; &lt;!-- https://gist.github.com/daramcq/3118367 --&gt; &lt;!-- https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/httpThreadLink/HttpClient.html --&gt; &lt;!-- Selenium + Java --&gt; &lt;!-- https://www.browserstack.com/guide/how-to-find-broken-links-in-selenium --&gt; &lt;!-- https://blog.knoldus.com/are-you-worried-about-the-broken-links-on-your-application/ --&gt; &lt;!-- JSoup --&gt; &lt;!-- https://medium.com/sahibinden-technology/how-to-check-broken-links-in-a-single-web-page-programmatically-c36561e3eb2f --&gt; 
&lt;style&gt;
r { color: Red }
o { color: Orange }
g { color: Green }
b { color: Blue }
&lt;/style&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;In the the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1&quot;&gt;first article of this series&lt;/a&gt; we looked at how to setup a &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; site using the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill&lt;/a&gt; build tool (&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill documentation&lt;/a&gt;) to develop and execute the required scripts to generate and publish the website&apos;s content. In the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;second article of this series&lt;/a&gt;, I showed you how to download, configure and brand the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;, which is a freely available template that is not part of the JBake default templates. In this third instalment the goal is to show you how to publish content. So lets get to it.&lt;/p&gt; 
&lt;h1&gt;The Baking Process&lt;/h1&gt; 
&lt;p&gt;The &lt;a href=&quot;https://jbake.org/docs/2.6.7/#process&quot;&gt;baking process&lt;/a&gt; refers to the process of parsing the content, collecting data, storing this data and then using this data to generate the content. There are three sources of data:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Default values defined by JBake (for example the JBake version);&lt;/li&gt; 
 &lt;li&gt;Values defined in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/jbake.properties&quot;&gt;jbake.properties&lt;/a&gt; (for example the icon, titles and social media links);&lt;/li&gt; 
 &lt;li&gt;The content &lt;a href=&quot;https://jbake.org/docs/2.6.7/#metadata_header&quot;&gt;metadata&lt;/a&gt; that is provided as a header in each content file;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The baking process consists of three main steps. During the first step the configuration file and content headers are parsed, the data is stored in a database. During this phase, the content files are also parsed and &lt;a href=&quot;https://jbake.org/docs/2.6.7/#content_body&quot;&gt;converted to HTML snippets if required&lt;/a&gt;. These HTML snippets are stored in the database with the corresponding metadata. Note that we are free to add our own &lt;a href=&quot;https://jbake.org/docs/2.6.7/#custom_metadata&quot;&gt;custom metadata&lt;/a&gt; to the headers. The HTML content and all of the metadata are recorded as named variables.&lt;/p&gt; 
&lt;p&gt;During a second phase, each HTML snippet and respective variable values are injected into the template engine. The template engine processes this data and generates the HTML files. The &lt;a href=&quot;https://jbake.org/docs/2.6.7/#type&quot;&gt;&lt;code&gt;type&lt;/code&gt; metadata&lt;/a&gt; variable determines which template is used by the template engine to generate the final output. JBake has &lt;a href=&quot;https://jbake.org/docs/2.6.7/#default_templates&quot;&gt;default templates&lt;/a&gt; for the &lt;code&gt;type&lt;/code&gt; marked as &lt;code&gt;page&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt;. However, you can also add your own &lt;a href=&quot;https://jbake.org/docs/2.6.7/#custom_templates&quot;&gt;custom templates&lt;/a&gt; for specific rendering.&lt;/p&gt; 
&lt;p&gt;In a final phase, JBake processes a set of &lt;a href=&quot;https://jbake.org/docs/2.6.7/#default_templates&quot;&gt;default templates&lt;/a&gt; that don&apos;t require any content (&lt;code&gt;index&lt;/code&gt;, &lt;code&gt;archive&lt;/code&gt;, &lt;code&gt;feed&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt;sitemap&lt;/code&gt;) and the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/index.ftl&quot;&gt;&lt;code&gt;index.ftl&lt;/code&gt;&lt;/a&gt; template that processes the site&apos;s content. JBake expects the content to be placed in a well defined path. It uses this information to generate the index, archive, tag and sitemap links. More concretely we must place the content in the &lt;code&gt;site/src/content&lt;/code&gt; directory. We will now explore how to add and publish content.&lt;/p&gt; 
&lt;h1&gt;Adding your articles&lt;/h1&gt; 
&lt;p&gt;To add a blog post we must add its sources to the &lt;a href=&quot;https://jbake.org/docs/2.6.7/#content_directory&quot;&gt;content directory&lt;/a&gt;. You can use any folder structure you want to store your content files. JBake examples use a &lt;code&gt;blog&lt;/code&gt; root and then have a single folder for each year. Depending on the number of articles you publish, you can use alternate structures as per your requirements. For example, you can create folders using month, trimester or even topic names. I am currently using a year and then topic sub-structure.&lt;/p&gt; 
&lt;p&gt;Your content may include text made available via raw HTML, Markdown or AsciiDoc files. You may also include any other files required to generate your HTML content. These may include images, cascading stylesheets (CSS), fonts and even JavaScript libraries and functions. Technically you can place these files anywhere within the website&apos;s sources. In this tutorial&apos;s running example, that would be the project&apos;s root folder &lt;code&gt;site/src&lt;/code&gt; (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1&quot;&gt;part 1&lt;/a&gt; for more details on this). However, JBake has the dedicated &lt;code&gt;assets&lt;/code&gt; directory that contains the following folders for sharing specific kinds of content:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;css&lt;/code&gt;: cascade style sheets used for configuring the look and feel of the website (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; for details on how they were used);&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fonts&lt;/code&gt;: fonts used by JavaScript libraries and CSS files;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;img&lt;/code&gt;: image files (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; for details on how they were used);&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;js&lt;/code&gt;: JavaScript (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; for details on how they were used).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I only use the above folders if an asset is used by at least 2 content files. In all other cases, I collocate the assets with the content file were it is used.&lt;/p&gt; 
&lt;h2&gt;Metadata header&lt;/h2&gt; 
&lt;p&gt;All content files, including those that use raw HTML, must have a metadata header (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; for more details). Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-.properties&quot;&gt;title=Tutorial: Publishing your own Github blog 
date=2022-06-24
last_updated=2022-06-25
type=post
tags=Mill, JBake
categories=Scala, Mill, BJake
status=published
author=Hugo Ferreira
description=Part 1: how to easily to set up and manage your own blog
---------
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In regards to content presentations and indexing the following are important:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;date&lt;/code&gt;: this is the date that JBake uses to order the indexed articles (main page), the archive and the site&apos;s map. If you don&apos;t provide this date, &lt;a href=&quot;https://jbake.org/docs/2.6.7/#metadata_header&quot;&gt;the file&apos;s last OS modified timestamp will be used&lt;/a&gt;. The &lt;code&gt;last_updated&lt;/code&gt; field does not seem to be used for indexing and ordering;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: this must be set to &lt;code&gt;post&lt;/code&gt; to be indexed and served. Another possible value is &lt;code&gt;page&lt;/code&gt; but it should not be used (explained below);&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;status&lt;/code&gt;: this must be set to &lt;code&gt;published&lt;/code&gt;. If not it will not be indexed and served;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tags&lt;/code&gt;: must be provided if you have the tagging activated. This will allow a user to select and list all the articles tagged with a given term. The field &lt;code&gt;categories&lt;/code&gt; does not seem to be used. Currently I set tags and categories to be the same, but may change this in the future to implement a more general index (for example: software, hardware, math, machine learning, etc.);&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Content type &lt;code&gt;page&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Besides the &lt;code&gt;post&lt;/code&gt; &lt;a href=&quot;https://jbake.org/docs/2.6.7/#type&quot;&gt;type&lt;/a&gt; we also have the &lt;code&gt;page&lt;/code&gt; type. These types indicate which &lt;a href=&quot;https://jbake.org/docs/2.6.7/#default_templates&quot;&gt;templates&lt;/a&gt; are used to render the content. The &lt;code&gt;page&lt;/code&gt; template of the current site generates the same content, but the header does not include the small icon, author name and estimated reading time of the article. In addition to this, even though these articles&apos; tags are listed and the links to them are generated in the website&apos;s site map, no other links are created. A quick search shows that the &lt;a href=&quot;https://jbake.org/docs/2.6.7/#global&quot;&gt;&lt;code&gt;published_pages&lt;/code&gt; global data variable&lt;/a&gt; is not used in the FreeMark templates. The &lt;code&gt;published_content&lt;/code&gt; global data variable is only used for listing the tags that generate the indexing of the site map.&lt;/p&gt; 
&lt;p&gt;This document type is usually reserved for permanent content such as the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_content/404.html&quot;&gt;&lt;code&gt;404.html&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_content/about.html&quot;&gt;&lt;code&gt;about.html&lt;/code&gt;&lt;/a&gt;. Use this content type for content with permanent links that are accessible from the site&apos;s menu.&lt;/p&gt; 
&lt;h2&gt;Add and post your content&lt;/h2&gt; 
&lt;p&gt;You can now add your blog posts and use the Mill commands described in &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1&quot;&gt;parts 1&lt;/a&gt; and &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;2&lt;/a&gt; to serve your content locally or on your project&apos;s github pages. If you don&apos;t see the expected changes, refresh the page. If that does not work, try to clean the browser&apos;s cache. You are also free to change any of the other assets of your website. Below I describe what changes I did to these assets in order to tweak my site to my liking.&lt;/p&gt; 
&lt;h1&gt;Formatting and processing issues&lt;/h1&gt; 
&lt;p&gt;When testing the rendered content I found the following issues that required additional changes to the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt; (see &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; for more details):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Github style footnotes did not work;&lt;/li&gt; 
 &lt;li&gt;Scala syntax highlighting in the code fence did not work (but other languages did);&lt;/li&gt; 
 &lt;li&gt;The code fence syntax highlighting for light and dark mode was missing;&lt;/li&gt; 
 &lt;li&gt;Relative links of images in the generated index HTML content were broken (missing images);&lt;/li&gt; 
 &lt;li&gt;Images were not centred but were left aligned;&lt;/li&gt; 
 &lt;li&gt;Text is not justified but left aligned;&lt;/li&gt; 
 &lt;li&gt;The inline &lt;code&gt;code&lt;/code&gt; block appears with the same opaque background colour as the code fences thereby hiding linking cues;&lt;/li&gt; 
 &lt;li&gt;Use of the standard metadata header separator made Markdown syntax highlighting in the IDE editor fail;&lt;/li&gt; 
 &lt;li&gt;Light and dark mode does not work on Google Chrome.&lt;/li&gt; 
 &lt;li&gt;Header&apos;s &lt;code&gt;description&lt;/code&gt; is not rendered as HTML (only simple text);&lt;/li&gt; 
 &lt;li&gt;Light and dark mode exhibits the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;Flash of unstyled content&lt;/a&gt; problem;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The following sections describe what changes were required to solve all the problems described above, except for the last two issues.&lt;/p&gt; 
&lt;h2&gt;Footnotes&lt;/h2&gt; 
&lt;p&gt;In many of the documents I write, I use &lt;a href=&quot;https://www.markdownguide.org/extended-syntax/#footnotes&quot;&gt;footnotes&lt;/a&gt;. They are handy to add links and references or simply provide a warning to the reader without a need to change or add another sentence. I observed that these footnotes did not work out of the box in JBake. In order to have footnotes work, one needs to configure JBake by adding a &lt;a href=&quot;https://jbake.org/docs/2.6.7/#markdown_extensions&quot;&gt;Markdown extension&lt;/a&gt;. JBake uses Flexmark as its Markdown processor, so you need to use &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions&quot;&gt;Flexmark extensions&apos;&lt;/a&gt; and add the relevant &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions#footnotes&quot;&gt;Flexmark footnote extensions&lt;/a&gt; by adding the following line to the JBake &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/jbake.properties&quot;&gt;configuration file&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-.properties&quot;&gt;markdown.extensions=FOOTNOTES
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Later we will see that their are some issues with the configuration of the Flexmark extensions, but footnotes work as advertised.&lt;/p&gt; 
&lt;h2&gt;Code fence syntax highlighting&lt;/h2&gt; 
&lt;p&gt;One issue that I found, was that the code fences were not working as expected. In particular the Scala code did not have any of the expected syntax colouring. The code simply appeared as a text box using a monospaced typeface font. Here is a snippet of the HTML code generated by the &lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt; parser:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;language-scala&quot;&amp;gt;// MyScript.sc
// print banner
println(&amp;amp;quot;Hello World!!&amp;amp;quot;)

// common imports
import sys.process._
import collection.mutable

// common initialization code
val x = 123
println(&amp;amp;quot;x is &amp;amp;quot; + 123)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the &lt;code&gt;class=&quot;language-scala&quot;&lt;/code&gt; that was used. To render the code snippet correctly we &lt;a href=&quot;https://github.com/vsch/flexmark-java/issues/183&quot;&gt;can use&lt;/a&gt; the &lt;a href=&quot;https://prismjs.com/&quot;&gt;PrismJS&lt;/a&gt; or &lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt; JavaScript libraries by adding appropriate script links to the HTML files. So what library was the original template using? If we look at the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/footer.ftl&quot;&gt;&lt;code&gt;footer.ftl&lt;/code&gt;&lt;/a&gt; file we will see the following code snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/highlight.pack.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/readingTime.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

		&amp;lt;#if (config.site_disqus_shortname?has_content)&amp;gt;
			&amp;lt;script id=&quot;dsq-count-scr&quot; src=&quot;//${config.site_disqus_shortname}.disqus.com/count.js&quot; async&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;/#if&amp;gt;
		&amp;lt;#if (config.site_google_trackingid?has_content)&amp;gt;
			&amp;lt;#include &quot;commons/google-analytics.ftl&quot; /&amp;gt;
		&amp;lt;/#if&amp;gt;
		&amp;lt;!-- This is called by default since this theme uses highlight.js --&amp;gt;
		&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
		&amp;lt;!--[if lte IE 8]&amp;gt;&amp;lt;script src=&quot;/js/ie/respond.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It seems like &lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt; is being used. Looking at the &lt;a href=&quot;https://highlightjs.org/download/&quot;&gt;HighLightJS download&lt;/a&gt; page I can confirm that the default version of the library does not support Scala out of the box. This means that even if we download the latest stable version via an external source (such as the CDNJS server using the following HTML snippet), we still wont&apos; have support for Scala:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot;
      href=&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/default.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://highlightjs.readthedocs.io/en/latest/&quot;&gt;HighLightJS documentation&lt;/a&gt; explains how one can &lt;a href=&quot;https://highlightjs.readthedocs.io/en/latest/building-testing.html&quot;&gt;compile your own version&lt;/a&gt; of the library, but it is easiest to use the &lt;a href=&quot;https://highlightjs.org/download/&quot;&gt;HighLightJS download&lt;/a&gt; page to configure what language support you want and to download a new version compiled on demand. While I was at it, I added the support for the following languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;.properties&lt;/li&gt; 
 &lt;li&gt;ARM Assembly&lt;/li&gt; 
 &lt;li&gt;AVR Assembly&lt;/li&gt; 
 &lt;li&gt;Arduino&lt;/li&gt; 
 &lt;li&gt;Batch file (DOS)&lt;/li&gt; 
 &lt;li&gt;HTTP&lt;/li&gt; 
 &lt;li&gt;Intel x86 Assembly&lt;/li&gt; 
 &lt;li&gt;LaTeX&lt;/li&gt; 
 &lt;li&gt;Matlab&lt;/li&gt; 
 &lt;li&gt;Maxima&lt;/li&gt; 
 &lt;li&gt;MIPS Assembly&lt;/li&gt; 
 &lt;li&gt;OCaml&lt;/li&gt; 
 &lt;li&gt;PostgreSQL and PL/pgSQL&lt;/li&gt; 
 &lt;li&gt;PowerShell&lt;/li&gt; 
 &lt;li&gt;Processing&lt;/li&gt; 
 &lt;li&gt;Prolog&lt;/li&gt; 
 &lt;li&gt;Scala&lt;/li&gt; 
 &lt;li&gt;VHDL&lt;/li&gt; 
 &lt;li&gt;Verilog&lt;/li&gt; 
 &lt;li&gt;Wolfram Language&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The download will result in an archive named &lt;code&gt;highlight.zip&lt;/code&gt; that contains the normal and minified version of the library (name &lt;code&gt;highlight.min.js&lt;/code&gt;), a &lt;code&gt;language&lt;/code&gt; folder with scripts for each supported language and a &lt;code&gt;styles&lt;/code&gt; folder that has all of the available stylesheets with the different colour schemes for syntax highlighting. Note that in the section above, I added to the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/jbake.properties&quot;&gt;JBake configuration file (&lt;code&gt;jbake.properties&lt;/code&gt;)&lt;/a&gt; the &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions&quot;&gt;Flexmark extensions variable&lt;/a&gt; to use the &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Footnotes-Extension&quot;&gt;footnote extension&lt;/a&gt;. To find out what other options are available, look at the &lt;a href=&quot;https://github.com/vsch/flexmark-java/blob/c0313d67e0146292a10d04eb8944faff991579e9/flexmark/src/main/java/com/vladsch/flexmark/parser/PegdownExtensions.java&quot;&gt;Flexmark source code&lt;/a&gt;. Here I also added the fenced code plugin as is shown next:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;markdown.extensions=FOOTNOTES,FENCED_CODE_BLOCKS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This plugin is usually on by default if you don&apos;t change this setting explicitly as done above.&lt;/p&gt; 
&lt;p&gt;After unpacking the downloaded archive, the following was done:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The downloaded &lt;code&gt;highlight.min.js&lt;/code&gt; file was copied to the site&apos;s &lt;code&gt;/assets/js/&lt;/code&gt; folder;&lt;/li&gt; 
 &lt;li&gt;Several pre-selected stylesheets were copied to the site&apos;s &lt;code&gt;/assets/cds&lt;/code&gt; folder. Examples included &lt;code&gt;lioshi.min.css&lt;/code&gt;, &lt;code&gt;googlecode.min.css&lt;/code&gt;, &lt;code&gt;default-dark.min.css&lt;/code&gt;, &lt;code&gt;tomorrow-night-blue.min.css&lt;/code&gt;, &lt;code&gt;magula.min.css&lt;/code&gt; and &lt;code&gt;docco.min.css&lt;/code&gt;. The prefix &lt;code&gt;hljs_&lt;/code&gt; was added to the filenames. I will explain how we use these CSS files later;&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/footer.ftl&quot;&gt;&lt;code&gt;footer.ftl&lt;/code&gt;&lt;/a&gt; template was changed to use the &lt;code&gt;highlight.min.js&lt;/code&gt; script (replaced &lt;code&gt;highlight.pack.js&lt;/code&gt; with &lt;code&gt;highlight.min.js&lt;/code&gt;);&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/footer.ftl&quot;&gt;&lt;code&gt;footer.ftl&lt;/code&gt;&lt;/a&gt; template was changed to call the &lt;code&gt;highlightAll()&lt;/code&gt; script (replaced &lt;code&gt;initHighlightingOnLoad()&lt;/code&gt; with &lt;code&gt;highlightAll()&lt;/code&gt;)&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Here is a snippet containing the changes that were made to the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/footer.ftl&quot;&gt;&lt;code&gt;footer.ftl&lt;/code&gt;&lt;/a&gt; template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/readingTime.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/darkmode.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

		&amp;lt;#if (config.site_disqus_shortname?has_content)&amp;gt;
			&amp;lt;script id=&quot;dsq-count-scr&quot; src=&quot;//${config.site_disqus_shortname}.disqus.com/count.js&quot; async&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;/#if&amp;gt;
		&amp;lt;#if (config.site_google_trackingid?has_content)&amp;gt;
			&amp;lt;#include &quot;commons/google-analytics.ftl&quot; /&amp;gt;
		&amp;lt;/#if&amp;gt;
		&amp;lt;!-- This is called by default since this theme uses highlight.js --&amp;gt;
		&amp;lt;script&amp;gt;hljs.highlightAll();&amp;lt;/script&amp;gt;
		&amp;lt;!--[if lte IE 8]&amp;gt;&amp;lt;script src=&quot;/js/ie/respond.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We have effectively &lt;a href=&quot;https://github.com/highlightjs/highlight.js/blob/main/VERSION_11_UPGRADE.md&quot;&gt;upgraded&lt;/a&gt; the highlighting library &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/js/highlight.min.js&quot;&gt;highlight.min.js&lt;/a&gt; from the original v9.2.0 version to the current v11.5.1 (git: b8f233c8e2) version. Hopefully it will be just as easy to update or change the highlighting library to a different version when you read this.&lt;/p&gt; 
&lt;p&gt;And here is a snippet of the HTML code above after the &lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt; script has parsed the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; block:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;code class=&quot;language-scala hljs&quot;&amp;gt;&amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// MyScript.sc&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// print banner&amp;lt;/span&amp;gt;
println(&amp;lt;span class=&quot;hljs-string&quot;&amp;gt;&quot;Hello World!!&quot;&amp;lt;/span&amp;gt;)

&amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// common imports&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;import&amp;lt;/span&amp;gt; sys.process._
&amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;import&amp;lt;/span&amp;gt; collection.mutable

&amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// common initialization code&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;val&amp;lt;/span&amp;gt; x = &amp;lt;span class=&quot;hljs-number&quot;&amp;gt;123&amp;lt;/span&amp;gt;
println(&amp;lt;span class=&quot;hljs-string&quot;&amp;gt;&quot;x is &quot;&amp;lt;/span&amp;gt; + &amp;lt;span class=&quot;hljs-number&quot;&amp;gt;123&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Code fence highlight styles&lt;/h2&gt; 
&lt;p&gt;The website I set up allows for the use of light and dark mode visualization. So the first question is how to change the colour scheme used by the highlighting library. One of the available &lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt; &lt;a href=&quot;https://github.com/highlightjs/highlight.js/tree/main/src/styles&quot;&gt;styles&lt;/a&gt; is called &lt;a href=&quot;https://github.com/highlightjs/highlight.js/blob/main/src/styles/monokai-sublime.css&quot;&gt;Monokai Sublime&lt;/a&gt;. The use of this template is set in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/header.ftl&quot;&gt;header.ftl&lt;/a&gt;. Here is a snippet of the relevant code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;/&amp;gt;
    &amp;lt;title&amp;gt;${config.site_title}&amp;lt;#if (content.title)??&amp;gt; - &amp;lt;#escape x as x?xml&amp;gt;${content.title}&amp;lt;/#escape&amp;gt;&amp;lt;/#if&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
    &amp;lt;meta name=&quot;description&quot; content=&quot;&quot;&amp;gt;
    &amp;lt;meta name=&quot;author&quot; content=&quot;${content.author!config.site_author}&quot;&amp;gt;
    &amp;lt;meta name=&quot;keywords&quot; content=&quot;&quot;&amp;gt;
    &amp;lt;meta name=&quot;generator&quot; content=&quot;JBake&quot;&amp;gt;

    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/google-font.css&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/font-awesome.min.css&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/theme.css&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/main.css&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/add-on.css&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;css/monokai-sublime.css&quot;&amp;gt;

    &amp;lt;!-- Fav and touch icons --&amp;gt;
    &amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;img/favicon/favicon.png&quot;&amp;gt;
  &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;em&gt;Monokai Sublime&lt;/em&gt; template is a dark mode stylesheet that does not fit well with the blue light mode pallet that I selected. So I used &lt;a href=&quot;https://highlightjs.org/static/demo/&quot;&gt;HighlightJS&apos;s demonstrator page&lt;/a&gt; to visualize what the different styles looked like and make a triage of those that I found more appealing&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. I then replaced the Monokai Sublime template file with each of these new templates and refreshed the website to see what they looked like. I finally selected the &lt;em&gt;Lioshi&lt;/em&gt; (&lt;code&gt;hljs_lioshi.min.css&lt;/code&gt;) and &lt;em&gt;Googlecode&lt;/em&gt; (&lt;code&gt;hljs_googlecode.min.css&lt;/code&gt;) templates for the dark and light modes respectively. For aesthetic reasons I also tweaked these templates by changing the background to conform to the website&apos;s &lt;em&gt;&quot;active&quot;&lt;/em&gt; colour pallet. So for the Lioshi template I changed &lt;code&gt;background: #303030&lt;/code&gt; to &lt;code&gt;background: #242526&lt;/code&gt; and for the Googlecode template I changed &lt;code&gt;background: #fff&lt;/code&gt; to &lt;code&gt;background: #8fb9d7&lt;/code&gt; in the &lt;code&gt;themes.css&lt;/code&gt;. In the CSS code I actually used the &lt;code&gt;var(--background_body)&lt;/code&gt; CSS value that is either set to &lt;code&gt;--facebook_card&lt;/code&gt; for the dark mode or &lt;code&gt;--blue_card&lt;/code&gt; for the light mode. If you haven&apos;t read the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;second article of this series&lt;/a&gt;, do so to understand how to set these variables. You will also need this to understand the next section.&lt;/p&gt; 
&lt;h2&gt;Toggling the code fence highlight&lt;/h2&gt; 
&lt;p&gt;In the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;previous article of this series&lt;/a&gt; I allowed the user to select the light or dark mode via the browser, operating system and website. I used the CSS media feature &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt; to detect if a user has by default selected the dark mode or used the website&apos;s checkbox to toggle the mode explicitly. The CSS media feature &lt;code&gt;prefers-color-scheme&lt;/code&gt; can also be used to &lt;a href=&quot;https://blog.jim-nielsen.com/2019/conditional-syntax-highlighting-in-dark-mode-with-css-imports/&quot;&gt;conditionally load the highlighting style&lt;/a&gt; using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&quot;&gt;`@import&lt;/a&gt;, so it stands to reason that I need only add these lines to the start of the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;theme.css&lt;/a&gt; stylesheet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Assume light mode by default */
@import &quot;hljs_googlecode.min.css&quot; screen;
/* Supersede dark mode when applicable */  
@import &quot;hljs_lioshi.min.css&quot; screen and (prefers-color-scheme: dark);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It does indeed work. In fact we can also do this at the HTML level &lt;a href=&quot;https://blog.jim-nielsen.com/2019/conditional-syntax-highlighting-in-dark-mode-with-css-imports/&quot;&gt;by using the media attribute of the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element&lt;/a&gt;. However this will not allow us to dynamically set the preferred colour scheme via the web application checkbox. To solve this, I changed the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/js/darkmode.js&quot;&gt;&lt;code&gt;darkmode.js&lt;/code&gt;&lt;/a&gt; script to &lt;a href=&quot;https://stackoverflow.com/questions/16057084/selecting-different-stylesheet-depending-on-the-button-pressed&quot;&gt;to dynamically add or remove the stylesheet link&lt;/a&gt; from the header. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;external resource link&lt;/a&gt; containing a URL to the HighlightJS style sheet is not required any more and can be removed from the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/header.ftl&quot;&gt;header.ftl&lt;/a&gt; template.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/js/darkmode.js&quot;&gt;&lt;code&gt;darkmode.js&lt;/code&gt;&lt;/a&gt; script now looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
$(function(){
	// Stylesheets used by highlight.js
	const hljs_dark = &apos;\n&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/hljs_lioshi.min.css&quot;&amp;gt;&apos;;
	const hljs_light = &apos;\n&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/hljs_googlecode.min.css&quot;&amp;gt;&apos;;

	function updateHLjsStyle(theme, deleteLast = true) { 
		var head = document.getElementsByTagName(&apos;head&apos;)[0].innerHTML;
		var withThis = &quot;&quot;
		if (deleteLast) {
			// Delete last stylesheet
			if (theme == &quot;dark&quot;) {
				withThis += hljs_light
			}
			else {
				withThis += hljs_dark
			}
			head = head.replace(withThis, &apos;&apos;) 
		}
		// Add new stylesheet
		if (theme == &quot;dark&quot;) {
			head += hljs_dark
		}
		else {
			head += hljs_light
		}
		document.getElementsByTagName(&apos;head&apos;)[0].innerHTML = head;		  
	}

	// Get initial stylesheet
	//const btn = document.querySelector(&quot;checkbox&quot;);
	const btn = document.getElementById(&quot;mode_checkbox&quot;);
	const prefersDarkScheme = window.matchMedia(&quot;(prefers-color-scheme: dark)&quot;);
	
	const currentTheme = localStorage.getItem(&quot;theme&quot;);
	if (currentTheme == &quot;dark&quot;) {
		document.documentElement.className = &quot;dark-theme&quot;;
	} else if (currentTheme == &quot;light&quot;) {
		document.documentElement.className = &quot;light-theme&quot;;
	}
	else {
		// default
		if (prefersDarkScheme.matches)
			document.documentElement.className = &quot;dark-theme&quot;;  
		else
		  document.documentElement.className = &quot;light-theme&quot;;  
	}
	//console.log(&quot;Initial class:&quot; + document.documentElement.className)
	var theme = (document.documentElement.className == &quot;light-theme&quot;) ? &quot;light&quot; : &quot;dark&quot;;
	updateHLjsStyle(theme, false)
	
	// Toggle stylesheet
	btn.addEventListener(&quot;click&quot;, function () {
		//console.log(&quot;Current class: &quot; + document.documentElement.className)
		// Toggle
		var theme = (document.documentElement.className == &quot;light-theme&quot;)
				? &quot;dark&quot;
				: &quot;light&quot;;
		// Set new class
		if (theme == &quot;light&quot;)
			document.documentElement.className = &quot;light-theme&quot;;
		else
			document.documentElement.className = &quot;dark-theme&quot;;

		updateHLjsStyle(theme)

	  // Store mode
		//console.log(&quot;Save new mode:&quot; + theme)
		localStorage.setItem(&quot;theme&quot;, theme);
	});
		
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At the start of the function I created two constants (&lt;code&gt;hljs_dark&lt;/code&gt;and &lt;code&gt;hljs_light&lt;/code&gt;) that hold the URLs to the HighlightJS stylesheets. The function &lt;code&gt;updateHLjsStyle(theme, deleteLast)&lt;/code&gt; is then defined. It uses the parameter &lt;code&gt;theme&lt;/code&gt; to identify which stylesheet link to remove from the HTML document&apos;s header, if it exists. The &lt;code&gt;deleteLast&lt;/code&gt; parameter is simply used to avoid attempting to remove the link when the HTML page is first loaded and has no existing stylesheet link. When the page is loaded, the correct stylesheet link is added using the &lt;code&gt;updateHLjsStyle()&lt;/code&gt; function depending on the user&apos;s choice, including his last choice set via the checkbox. Finally, whenever the checkbox is toggled, the previous stylesheet is removed, and the new one is inserted via the &lt;code&gt;updateHLjsStyle()&lt;/code&gt; function. With this setup both the website&apos;s colour scheme and the highlightJS stylesheet match.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: that the JavaScript variables &lt;code&gt;hljs_dark&lt;/code&gt; and &lt;code&gt;hljs_light&lt;/code&gt; must use absolute paths in order to find the assets in the &lt;code&gt;css&lt;/code&gt; folder. If a path, such as &lt;code&gt;/&lt;/code&gt;, is used will result in an error loading the cascading style sheets. The result is that no syntax highlighting will be performed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Solving issues with Relative local links&lt;/h2&gt; 
&lt;p&gt;When editing content in Markdown I use an IDE to visualize the output. I also place all of the content in the same folder. Any links I use are relative links to the folder or to folders in the same section (for example posts or pages). When testing the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;, I noticed that the links to the images were broken. More concretely, all links in the posts worked correctly, such as in the following link:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820//tech4rd/blog/2020/mill/javafx/javafx.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However when accessing the home link such as this one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;the links were broken. All content accessed via the home page and the next and previous buttons did not work. So what is causing the problem? Let&apos;s start by analysing what JBake does when using this template. JBake seems to:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create the HTML content as per the structure of the pages and blogs;&lt;/li&gt; 
 &lt;li&gt;For each folder we find the HTML files with the original names and any other assets we placed there;&lt;/li&gt; 
 &lt;li&gt;This is placed under the &quot;content&quot; and &quot;pages&quot; folders as per the configuration;&lt;/li&gt; 
 &lt;li&gt;It then goes through these files and creates an index file. The index generates one directory (numbered from 2 to n) for each page and post and uses the &lt;code&gt;index.ftl&lt;/code&gt; to generate a corresponding &lt;code&gt;index.html&lt;/code&gt; file. Only the latest post or page (whose index is 1) is not placed in its own directory. This &lt;code&gt;index.html&lt;/code&gt;file is placed in the site&apos;s root;&lt;/li&gt; 
 &lt;li&gt;Each &lt;code&gt;index.html&lt;/code&gt; file has the previous and next buttons that access the corresponding indexed &lt;code&gt;index.html&lt;/code&gt; files of the other pages;&lt;/li&gt; 
 &lt;li&gt;No additional content is copied to the indexing folders. The index files contain the exact same content as the original sources.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This is the source code snippet of the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/index.ftl&quot;&gt;&lt;code&gt;index.flt&lt;/code&gt;&lt;/a&gt; showing how the content is used without any changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;#include &quot;header.ftl&quot;&amp;gt;
	
	&amp;lt;#include &quot;menu.ftl&quot;&amp;gt;
	
	&amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;lt;#list published_posts as post&amp;gt;
			&amp;lt;#if (post??) &amp;gt;
				&amp;lt;#include &quot;post/content-single.ftl&quot;&amp;gt;
			&amp;lt;/#if&amp;gt;
		&amp;lt;/#list&amp;gt;
		
		&amp;lt;#include &quot;post/prev-next.ftl&quot;&amp;gt;
	 &amp;lt;/div&amp;gt;
	
	&amp;lt;#include &quot;commons/sidebar.ftl&quot;&amp;gt;
&amp;lt;#include &quot;footer.ftl&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because the links are relative, those links remain valid. The relative link to:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./managed_run_screenshot.png#center
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;when accessed from:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820//tech4rd/blog/2020/mill/javafx/javafx.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is interpreted by the web server as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820//tech4rd/blog/2020/mill/javafx/managed_run_screenshot.png#center
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, when accessed from an index file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820/index.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;the same image link is interpreted by the web server as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8820/managed_run_screenshot.png#center
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which fails because it does not exist. Suffice to say, copying HTML source without processing links and/or copying all of the other files is not a good policy. One way to solve this is, to let JBake make all the links absolute. This is possible for the &lt;a href=&quot;https://jbake.org/docs/2.6.7/#images_path&quot;&gt;image paths&lt;/a&gt;. We need only &lt;a href=&quot;https://jbake.org/docs/2.6.7/#overriding_site_host&quot;&gt;configure the host name&lt;/a&gt; and the option to generate the absolute path by adding the host name as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-.properties&quot;&gt;site.host=https://hmf.github.io/tech4rd/
img.path.update=true
img.path.prepend.host=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One big disadvantage with this solution, is that setting the host name, means we cannot easily cross-post the content to other hosts. We have to bake each site again using a different host name. Also note that care must be taken when accessing an image in the global &lt;code&gt;img&lt;/code&gt; asset.&lt;/p&gt; 
&lt;p&gt;Using a &lt;strong&gt;relative path&lt;/strong&gt; such as this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![Preview in Dark Mode](./screenshot_jbake_example_site.png)
&lt;/code&gt;&lt;/pre&gt; &lt;!--![Preview in Dark Mode](./screenshot_jbake_example_site.png)--&gt; 
&lt;p&gt;or this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&quot;./../../img/blog/sample-image.jpg&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;!--&lt;img src=&quot;./../../img/blog/sample-image.jpg&quot;/&gt;--&gt; 
&lt;p&gt;will work. Using an &lt;strong&gt;&lt;em&gt;&quot;explicit&quot;&lt;/em&gt; absolute path&lt;/strong&gt; shown below will also work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![Test absolute /B](/img/main/avatar.png)
&lt;/code&gt;&lt;/pre&gt; &lt;!-- [Test absolute /B](/img/main/avatar.png) --&gt; 
&lt;p&gt;Using an &lt;strong&gt;&lt;em&gt;&quot;implicit&quot;&lt;/em&gt; absolute path&lt;/strong&gt; will &lt;strong&gt;not&lt;/strong&gt; work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![Test absolute A](img/blog/sample-image.jpg)
&lt;/code&gt;&lt;/pre&gt; &lt;!--![Test absolute A](img/blog/sample-image.jpg)--&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: while working on this problem I learned that if you duplicate entries in the JBake configuration file, they will be concatenated and result in a sequence. When used as a string in a FreeMark template, it will result in an exception. FreeMarker will complain that it cannot convert the element into a string. You can use &lt;code&gt;?join&lt;/code&gt; to bypass this issue, but get incorrect results. Make sure you don&apos;t duplicate configuration file entries.&lt;/p&gt; 
 &lt;p&gt;Note: The instructions above are valid for the Github and many other servers. When testing with JBakes localhost server, relative paths work correctly. If one uses an absolute path such as &lt;code&gt;![site/src/assets/img/main/favicon.png](/img/favicon/favicon.png)&lt;/code&gt;, JBake will generate the following URL - &lt;code&gt;http://localhost:8820//img/favicon/favicon.png&lt;/code&gt;. Note that repeated forward slashes. This is an invalid URL. Most HTTP web servers are configured to collapse duplicate forward slashes to a single one, and the links works. However, JBake&apos;s localhost web server does not, and the links will not work. Use an alternate HTTP server that deals with this issue or configure the remote host server appropriately and test the links.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Center Image&lt;/h2&gt; 
&lt;p&gt;To be able to centre the images you can use &lt;a href=&quot;https://stackoverflow.com/questions/12090472/how-do-i-center-an-image-in-the-readme-md-file-on-github&quot;&gt;standard HTML for this&lt;/a&gt;. However, with a little CSS trickery you can also centre the images. One can use &lt;a href=&quot;https://stackoverflow.com/a/38427440/2051561&quot;&gt;URL &lt;code&gt;style&lt;/code&gt; parameters&lt;/a&gt; or the &lt;a href=&quot;https://stackoverflow.com/questions/255170/markdown-and-image-alignment/43691462#43691462&quot;&gt;ALT tags&lt;/a&gt; and a corresponding CSS selector on those parameters or tags. In the first case (URL &lt;code&gt;style&lt;/code&gt; parameter), the Markdown link would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![A cute kitten](http://placekitten.com/200/300?style=centerme)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and the CSS selector would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;	img[src$=&quot;centerme&quot;] {
		display:block;
		margin: 0 auto;
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second option would use the following Markdown link:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![A cute kitten](http://placekitten.com/200/300#center)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and the CSS selector would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;img[src*=&apos;#left&apos;] {
    float: left;
}
img[src*=&apos;#right&apos;] {
    float: right;
}
img[src*=&apos;#center&apos;] {
    display: block;
    margin: auto;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can try these in one of the online JavaScript editors. Here is the &lt;a href=&quot;https://jsfiddle.net/oknbt8r1/&quot;&gt;original example&lt;/a&gt;. The solutions above are good because the template already has several CSS styles for the images and we don&apos;t want to mess around with those. In particular the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file has a &lt;em&gt;&quot;section&quot;&lt;/em&gt; for images that starts with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Image */

	.image {
		border: 0;
		display: inline-block;
		position: relative;
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to this, the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;&lt;code&gt;add-on.css&lt;/code&gt;&lt;/a&gt; has the following selector that is activated by the images within the posts and pages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    #content img {
      max-width: 100%;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To centre all the images we could simply change it to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    #content img {
      max-width: 100%;
			display:block;
			margin: 0 auto;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I opted for the second CSS solution I linked to above. This way, I can explicitly mark and format the images how I see fit without inadvertently messing with the rest of the template. To do this in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;&lt;code&gt;add-on.css&lt;/code&gt;&lt;/a&gt; stylesheet I added the &lt;code&gt;#content img&lt;/code&gt; selectors as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.post {
    margin: 0 0 2em 0;
}

    #content img[src*=&apos;#left&apos;] {
        float: left;
    }
    #content img[src*=&apos;#right&apos;] {
        float: right;
    }
    #content img[src*=&apos;#center&apos;] {
        display: block;
        margin: auto;
    }

    #content img {
        max-width: 100%;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The links I then changed from:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![GUI from managed.run](./managed_run_screenshot.png)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![GUI from managed.run](./managed_run_screenshot.png#center)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Justify content text&lt;/h2&gt; 
&lt;p&gt;I prefer seeing my content with its text justified. The default template setting has the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/text-align&quot;&gt;text aligned to the left&lt;/a&gt;. The HTML output is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p style=&quot;text-align=left&quot;&amp;gt;Content text.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Choosing a random sample of the content text and using the browser&apos;s &lt;code&gt;inspect (Q)&lt;/code&gt; context-sensitive menu option, we can see (via the developer tools) that the initial text alignment setting are selected via the following CSS snippet found in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;&lt;code&gt;add-on.css&lt;/code&gt;&lt;/a&gt; stylesheet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;    #content p a, #content ul li a {
        border-bottom: dotted 2px var(--content_border);
    }

        #content p a:hover {
            border-bottom-color: transparent;
        }

    #content blockquote, #content p, #content ul{
        margin: 0 0 1em;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to this, the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; CSS file also has the following relevant set of selectors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    article.post p,
    article.post h2,
    article.post h3,
    article.post h4 {
        color: var(--foreground);
        /* Theoretically for IE 8 &amp;amp; 9 (more valid) */
        /* ...but not required as filter works too */
        /* should come BEFORE filter */
        -ms-filter:&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=87)&quot;;

        /* This works in IE 8 &amp;amp; 9 too */
        /* ... but also 5, 6, 7 */
        filter: alpha(opacity=87);

        /* Modern Browsers */
        opacity: 0.87;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The snippets above shows that we can use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started&quot;&gt;combination of element, class and ID selectors&lt;/a&gt; to assign an alternate text alignment style solely to the article&apos;s content. From the snippet above we can see that one can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Select an element with a class for the post&apos;s content : &lt;code&gt;article.post&lt;/code&gt;;&lt;/li&gt; 
 &lt;li&gt;Select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element nested inside an &lt;code&gt;article&lt;/code&gt; element with the class &lt;code&gt;post&lt;/code&gt;: &lt;code&gt;article.post p&lt;/code&gt; (Note that the &lt;code&gt;article.post&lt;/code&gt; is an ancestor and not specifically the direct parent &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;);&lt;/li&gt; 
 &lt;li&gt;We can also select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element that is a direct descendant of &lt;code&gt;article.post&lt;/code&gt;: &lt;code&gt;article.post &amp;gt; p&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A look at the templates output shows the following general structure for the content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;article class=&quot;post&quot;&amp;gt;
   &amp;lt;header&amp;gt;
    &amp;lt;div class=&quot;title&quot;&amp;gt;
        &amp;lt;h1&amp;gt;About&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
	&amp;lt;/header&amp;gt;
         
    &amp;lt;div id=&quot;content&quot;&amp;gt;
      &amp;lt;div class=&quot;paragraph&quot;&amp;gt; 
				&amp;lt;p&amp;gt;About content.....&amp;lt;/p&amp;gt; 
			&amp;lt;/div&amp;gt; 
    &amp;lt;/div&amp;gt;

    &amp;lt;footer&amp;gt;
	    No footer
    &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above structure is true for both the &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; type content. According to this structure I think the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors&quot;&gt;an ID selector&lt;/a&gt; is warranted because it will avoid unintentionally changing other elements of the template. Just to be on the safe side, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Type_Class_and_ID_Selectors&quot;&gt;combining the type class and ID selectors&lt;/a&gt; will even be better. Here is an example of this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;        div#content p  {
            border-bottom-color: transparent;
        }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To reinforce this even further, I see that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element is always a direct descendant of the &lt;code&gt;content&lt;/code&gt; ID or of the class &lt;code&gt;&quot;paragraph&quot;&lt;/code&gt;, which in turn is a direct parent of the &lt;code&gt;article&lt;/code&gt; class. So we can also use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors#combinators&quot;&gt;combinator&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    article.post &amp;gt; div#content &amp;gt; p {
      text-align: justify;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I did not find any use of the &lt;code&gt;paragraph&lt;/code&gt; class, except in the case of the latest JBake example &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/testsite/src/assets/css/asciidoctor.css&quot;&gt;asciidoctor.css&lt;/a&gt; cascading style sheet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;p.lead, .paragraph.lead &amp;gt; p, #preamble &amp;gt; .sectionbody &amp;gt; .paragraph:first-of-type p { font-size: 1.21875em; line-height: 1.6; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Even so, I opted to add it. So the final solution is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    article &amp;gt; div#content &amp;gt; p,
    article &amp;gt; div#content .paragraph &amp;gt; p {
        text-align: justify;
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that I am not using the classes &lt;code&gt;post&lt;/code&gt; or &lt;code&gt;page&lt;/code&gt;, which allows us to format both posts and pages without messing up the rest of the website&apos;s formatting.&lt;/p&gt; 
&lt;h2&gt;Single code line&lt;/h2&gt; 
&lt;p&gt;In many cases I need to show code snippets to the reader. I can show code &lt;a href=&quot;https://www.markdownguide.org/basic-syntax/#code&quot;&gt;inline&lt;/a&gt; or as a separate element that occupies its own section of the rendered text. We can format these code sections using either &lt;a href=&quot;https://www.markdownguide.org/basic-syntax/#code-blocks-1&quot;&gt;&lt;em&gt;&quot;standard&quot;&lt;/em&gt; code blocks&lt;/a&gt; or &lt;a href=&quot;https://www.markdownguide.org/extended-syntax/#fenced-code-blocks&quot;&gt;fenced code blocks&lt;/a&gt;. The fenced code block has the advantage of allowing one to use &lt;a href=&quot;https://www.markdownguide.org/extended-syntax/#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;. If you render the HTML with JBake, you will observe that in both cases a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element is used to &lt;em&gt;&quot;hold&quot;&lt;/em&gt; the code snippet within. The difference however, is that the fenced code blocks are placed with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre&quot;&gt;preformatted text element (&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;)&lt;/a&gt;, which does not format the text flow (all line breaks and text positions are maintained). It is a text section in and of itself, much like a paragraph.&lt;/p&gt; 
&lt;p&gt;The standard code block text, on the other hand, is formatted just as any other text in the paragraph. Here is an example: &lt;em&gt;This sentence holds an inline &lt;code&gt;code block of text&lt;/code&gt;&lt;/em&gt;. The following is the HTML generated by the &lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt; Markdown processor.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;i&amp;gt;This sentence holds an inline &amp;lt;code&amp;gt;code block of text&amp;lt;/code&amp;gt;&amp;lt;/i&amp;gt;.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The HTML source above is not changed and is rendered using the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;main.css&lt;/a&gt; stylesheet based on the &lt;code&gt;code&lt;/code&gt; element selector shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;code {
  background: var(--dark_gray_alpha_2);
  border: solid 1px var(--dark_gray_alpha);
  font-family: &quot;Courier New&quot;, monospace;
  font-size: 0.9em;
  margin: 0 0.25em;
  padding: 0.25em 0.65em;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following fenced code block:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&apos;&apos;&apos;scala
// MyScript.sc
// print banner
println(&quot;Hello World!!&quot;)

// common imports
import sys.process._
import collection.mutable

// common initialization code
val x = 123
println(&quot;x is &quot; + 123)
&apos;&apos;&apos;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is converted by the &lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt; Markdown processor into the following HTML code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;language-scala&quot;&amp;gt;// MyScript.sc
// print banner
println(&quot;Hello World!!&quot;)

// common imports
import sys.process._
import collection.mutable

// common initialization code
val x = 123
println(&quot;x is &quot; + 123)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt; script then takes the HTML code above and changes it, on the fly, to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;
&amp;lt;code class=&quot;language-scala hljs&quot;&amp;gt;
  &amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// MyScript.sc&amp;lt;/span&amp;gt;
  &amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// print banner&amp;lt;/span&amp;gt;
  println(&amp;lt;span class=&quot;hljs-string&quot;&amp;gt;&quot;Hello World!!&quot;&amp;lt;/span&amp;gt;)

  &amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// common imports&amp;lt;/span&amp;gt;
  &amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;import&amp;lt;/span&amp;gt; sys.process._
  &amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;import&amp;lt;/span&amp;gt; collection.mutable

  &amp;lt;span class=&quot;hljs-comment&quot;&amp;gt;// common initialization code&amp;lt;/span&amp;gt;
  &amp;lt;span class=&quot;hljs-keyword&quot;&amp;gt;val&amp;lt;/span&amp;gt; x = &amp;lt;span class=&quot;hljs-number&quot;&amp;gt;123&amp;lt;/span&amp;gt;
  println(&amp;lt;span class=&quot;hljs-string&quot;&amp;gt;&quot;x is &quot;&amp;lt;/span&amp;gt; + &amp;lt;span class=&quot;hljs-number&quot;&amp;gt;123&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the resulting HTML has the same &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element placed within the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element. The altered HTML is rendered using the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;main.css&lt;/a&gt; stylesheet based on the combined &lt;code&gt;pre code&lt;/code&gt; element selector shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;		pre code {
			display: block;
			line-height: 1.75em;
			padding: 1em 1.5em;
			overflow-x: auto;
		}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This allows us to effectively render the code blocks and fenced code blocks differently. I used this to remove the border from the standard code blocks and add this back to fenced code blocks only. In addition to this, several standard code blocks are used as hyperlinks (shown as the anchor &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&apos;s text). The original colour &lt;code&gt;--dark_gray_alpha_2&lt;/code&gt;, set in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;themes.css&lt;/code&gt;&lt;/a&gt;, was opaque. This covered the links&apos; underline and hid the visual cue that users need. In this case I added a 50% alpha channel to the colour and used that as the line code&apos;s background colour. Here is the final version of the selectors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;	code {
	  background: var(--dark_gray_alpha_2);
      font-family: &quot;Courier New&quot;, monospace;
      font-size: 0.9em;
      margin: 0 0.25em;
      padding: 0.25em 0.65em;
      border-radius: 15px;
	}

	pre {
		-webkit-overflow-scrolling: touch;
		font-family: &quot;Courier New&quot;, monospace;
		font-size: 0.9em;
		margin: 0 0 2em 0;
	}

		pre code {
		  display: block;
          background: var(--dark_gray_alpha);
		  border: solid 1px var(--dark_gray_alpha);
		  line-height: 1.75em;
		  padding: 1em 1.5em;
		  overflow-x: auto;
		}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Originally I wanted to change the &lt;code&gt;--dark_gray_alpha_2&lt;/code&gt; background colour&apos;s opacity to 50% via CSS. For standard CSS, apparently this is &lt;a href=&quot;https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable&quot;&gt;only possible with the &lt;code&gt;rgba()&lt;/code&gt; function&lt;/a&gt;. The suggested solution was to use the following combination:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    --dark_gray_alpha_2: 240, 240, 240;
...
	background: rgba(var(--dark_gray_alpha_2), 0.5);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That means the colour definition would have to be a triplet of values and not a single colour code as currently used in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;theme.css&lt;/code&gt;&lt;/a&gt; stylesheet. Recall that in &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;part 2&lt;/a&gt; of this series we set up colour pallets for light and dark modes. So the base colour is not a single &lt;code&gt;--dark_gray_alpha_2&lt;/code&gt; value but can be either a &lt;code&gt;--blue_hover&lt;/code&gt; or &lt;code&gt;--facebook_hover&lt;/code&gt; colour. And many other colours set in the template use these &lt;em&gt;hover&lt;/em&gt; pallet colours. Specifically here is a list of those colours that are affected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    /* light mode */
    --dark_gray            : var(--blue_hover);
    --dark_gray_alpha      : var(--blue_hover);
    --dark_gray_alpha_2    : var(--blue_hover);    
    --active_button        : var(--blue_hover);
    --share_btn            : var(--blue_hover);
    --hover_alpha          : var(--blue_hover);

    /* dark mode */
    --dark_gray            : var(--facebook_hover);
    --dark_gray_alpha      : var(--facebook_hover);
    --dark_gray_alpha_2    : var(--facebook_hover);
    --active_button        : var(--facebook_hover);
    --share_btn            : var(--facebook_hover);
    --hover_alpha          : var(--facebook_hover);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Were I to use this technique to add the alpha channel, I would have to a) define the &lt;code&gt;hover&lt;/code&gt; colours in RGB and b) replace all of the above variable assignments with a call to either &lt;code&gt;rgb(var(--variable))&lt;/code&gt; or &lt;code&gt;rgba(var(--variable), opacity)&lt;/code&gt;. Because the &lt;code&gt;--dark_gray_alpha_2&lt;/code&gt; is only used once in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt;, I simply created 2 new variables (&lt;code&gt;--blue_hover_light&lt;/code&gt; and &lt;code&gt;--facebook_hover_light&lt;/code&gt;) and assigned those in only two places as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;    --dark_gray_alpha_2    : var(--blue_hover_light);
    --dark_gray_alpha_2    : var(--facebook_hover_light);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This solved the issues I identified, but while researching for a solution I chanced upon an alternate strategy that did not work due to &lt;em&gt;&quot;bugs&quot;&lt;/em&gt; in &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; and &lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt;. Because of this I cannot claim that it will work, however I think this technique may be useful in other situations that require the use of custom attributes. Flexmark has an &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions#attributes&quot;&gt;Attributes extension&lt;/a&gt; that allows one to add attributes to an HTML element. One can &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Attributes-Extension&quot;&gt;annotate the Markdown document&lt;/a&gt; to add an HTML ID, class or attribute value. It even allows one to &lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Attributes-Extension#syntax&quot;&gt;add multiple attributes&lt;/a&gt; to the same HTML element. The &lt;a href=&quot;https://github.com/vsch/flexmark-java/blob/master/flexmark-ext-attributes/src/test/resources/ext_attributes_ast_spec.md&quot;&gt;full specification&lt;/a&gt; has the following example:&lt;/p&gt; 
&lt;p&gt;This markdown source snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Cond 1.1 text node{.red}
Cond 1.1 text node {.red}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is converted to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p class=&quot;red&quot;&amp;gt;Cond 1.1 text node&amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;red&quot;&amp;gt;Cond 1.1 text node&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which now allows the site designer to add a CSS selector for the class &quot;red&quot;. The specification includes details on the rules used to assign the attributes to specific elements in the Markdown source. For the case of the &quot;inline code&quot; described above, one could try to use, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;*This sentence holds an inline `code block of text`{inline=&quot;true&quot;}*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which would hopefully produce:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;i&amp;gt;This sentence holds an inline &amp;lt;code inline=&quot;true&quot;&amp;gt;code block of text&amp;lt;/code&amp;gt;&amp;lt;/i&amp;gt;.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and could then be formatted using this selector:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;	code[inline=&quot;true&quot;] {
	  background: var(--dark_gray_alpha_2);
      font-family: &quot;Courier New&quot;, monospace;
      font-size: 0.9em;
      margin: 0 0.25em;
      padding: 0.25em 0.65em;
      border-radius: 15px;
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I am unsure if the use of attributes with no values are supported by this extension, but &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS selectors&lt;/a&gt; for such attributes are also possible. Unfortunately, I was unable to test this solution because I could not get &lt;a href=&quot;https://github.com/jbake-org/jbake/issues/759&quot;&gt;JBake to activate the attribute extension&lt;/a&gt;. The problem stems from the fact that a &lt;a href=&quot;https://github.com/vsch/flexmark-java/issues/509&quot;&gt;com.vladsch.flexmark.parser.PegdownExtensions&lt;/a&gt; object is used by the &lt;a href=&quot;https://github.com/jbake-org/jbake/blob/8b08d4b2e80ee78b52943a84defd30a1448e6d6d/jbake-core/src/main/java/org/jbake/parser/MarkdownEngine.java#L55&quot;&gt;JBake configuration code&lt;/a&gt; to activate the extension. However, not all the currently available extensions are listed in this object, so JBake cannot use these extensions. This nonetheless does not preclude someone from using Flexmark directly on Markdown sources.&lt;/p&gt; 
&lt;h2&gt;Change Metadata header separator&lt;/h2&gt; 
&lt;p&gt;One annoying issue is that the &lt;a href=&quot;https://jbake.org/docs/2.6.7/#metadata_header&quot;&gt;metadata header&lt;/a&gt; makes editing &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; and &lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc site&lt;/a&gt; sources using IDEs difficult. Because the &lt;a href=&quot;https://github.com/jbake-org/jbake/issues/231&quot;&gt;metadata header&apos; separator is not recognized&lt;/a&gt;, the editors fail to parse and therefore correctly render the content. The solution is to configure JBake to use an &lt;a href=&quot;https://github.com/jbake-org/jbake/issues/475#issuecomment-406869915&quot;&gt;alternate separator&lt;/a&gt; that is recognized by various editors. To do this, add the following section to your &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/jbake.properties&quot;&gt;&lt;code&gt;jbake.properties&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-.properties&quot;&gt;# Facilitates editing in VSCode and other IDEs
# Must be used in all headers now
header.separator=---------
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is important to note that &lt;strong&gt;all Markdown headers&lt;/strong&gt; must use this separator.&lt;/p&gt; 
&lt;h2&gt;Google Chrome fails to toggle light/dark mode&lt;/h2&gt; 
&lt;p&gt;While testing the latest changes to the website&apos;s scripts in Google Chrome, I realized that the button to toggle between dark and light mode did not seem to work. Using the browser&apos;s developer tools shows that the toggle button does indeed work and the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element&apos;s class was being changed to the &lt;code&gt;&quot;dark-theme&quot;&lt;/code&gt; and &lt;code&gt;&quot;light-theme&quot;&lt;/code&gt; classes correctly. However the inherited &lt;code&gt;html&lt;/code&gt; selector did not change between &lt;code&gt;html.dark-theme&lt;/code&gt; and &lt;code&gt;html.light-theme&lt;/code&gt;. This pointed to a potential problem in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;theme.css&lt;/a&gt; stylesheet. In addition to this, even though the OS is configured for dark mode, the browser does not seem to detect this setting via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;&lt;code&gt;@media (prefers-color-scheme: dark)&lt;/code&gt;&lt;/a&gt; CSS selector. It may have to do with the &lt;a href=&quot;https://stackoverflow.com/questions/65966664/media-prefers-color-scheme-light-not-working-in-chrome&quot;&gt;&apos;Auto Dark Mode for Web Contents&apos; flag&lt;/a&gt; used in the browser because the Google landing page was shown in dark automatically. I also noticed that the the DarkReader plugin does not work in &lt;code&gt;auto&lt;/code&gt; mode but does so if set to &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To solve this problem the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;theme.css&lt;/a&gt; stylesheet was changed to define both light and dark mode colour schemes. Only then is the &lt;code&gt;@media&lt;/code&gt; selector used to reassign the dark mode as a fallback. I suspect this was working for the Firefox browser because I have only tested it with the OS set to dark mode.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root,
:root.light-theme {

    --red         : #ff0000;
    --persian-red : #d1342fff;
    --green       : #00ff00;
    --greenyellow : #ADFF2F;

    --foreground           : var(--blue_primary_text); 
    --mid_ground           : var(--blue_secondary_text); 
    --background           : var(--blue_background);
    --background_body      : var(--blue_card);
    --dark_gray            : var(--blue_hover);
    --dark_gray_2          : var(--blue_secondary_text);
    --dark_gray_alpha      : var(--blue_hover);
    --dark_gray_alpha_2    : var(--blue_hover_light);
    --active_button        : var(--blue_hover);
    --share_btn            : var(--blue_hover);
    --content_border       : var(--mask_red_3);
    --hover_alpha          : var(--blue_hover);
    --hover                : var(--mask_red_3);
...
}

:root.dark-theme {

  --foreground           : var(--facebook_primary_text);   
  --mid_ground           : var(--facebook_secondary_text); 
  --background           : var(--facebook_background);     
  --background_body      : var(--facebook_card);           
  --dark_gray            : var(--facebook_hover);          
  --dark_gray_2          : var(--facebook_secondary_text); 
  --dark_gray_alpha      : var(--facebook_hover);          
  --dark_gray_alpha_2    : var(--facebook_hover_light);    
  --active_button        : var(--facebook_hover);
  --share_btn            : var(--facebook_hover);
  --content_border       : var(--mask_red_1);    
  --hover_alpha          : var(--facebook_hover);
  --hover                : var(--mask_red_0);    
}

/* Dark mode */
@media (prefers-color-scheme: dark) {
  :root, :root.dark-theme {

    --foreground           : var(--facebook_primary_text);
    --mid_ground           : var(--facebook_secondary_text);
    --background           : var(--facebook_background);     
    --background_body      : var(--facebook_card);           
    --dark_gray            : var(--facebook_hover);          
    --dark_gray_2          : var(--facebook_secondary_text); 
    --dark_gray_alpha      : var(--facebook_hover);          
    --dark_gray_alpha_2    : var(--facebook_hover_light);    
    --active_button        : var(--facebook_hover);
    --share_btn            : var(--facebook_hover);
    --content_border       : var(--mask_red_1);    
    --hover_alpha          : var(--facebook_hover);
    --hover                : var(--mask_red_0);    
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a detailed explanation on how this toggling works with CSS please refer to section &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2#dark-mode&quot;&gt;&apos;Dark Mode&apos;&lt;/a&gt;. I suspect that this setup may be further optimized. If you have any thoughts on this, please provide feedback.&lt;/p&gt; 
&lt;h2&gt;Flash of unstyled content problem&lt;/h2&gt; 
&lt;p&gt;I tried to solve the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;flash of unstyled content&lt;/a&gt; by placing the darkmode JavaScript in several places of the HTML &lt;a href=&quot;https://blog.maximeheckel.com/posts/switching-off-the-lights-part-2-fixing-dark-mode-flashing-on-servered-rendered-website/&quot;&gt;header&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/71799083/white-flash-on-dark-mode-on-refreshing-page&quot;&gt;body&lt;/a&gt;. However, this did not work. If you know how to solve this, please provide feedback.&lt;/p&gt; 
&lt;h1&gt;Conclusion&lt;/h1&gt; 
&lt;p&gt;This concludes the third instalment of this series. With this information you should have a working understanding of how JBake generates the site&apos;s static content and can now add content to your website. The content can be provided as raw HTML or as Markdown and AsciiDoc sources that are then converted to HTML. I have also provided you with some useful information on tweaking of the existing &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt; templates and cascading style sheets to format the final HTML output. Finally, I also described how to activate some &lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt; extensions that may be required by you. The example I provided was for the footnotes extension&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. In the next article we will delve into some details regarding documenting software code.&lt;/p&gt; 
&lt;p&gt;You can also find the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1&quot;&gt;first&lt;/a&gt; and &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2&quot;&gt;second&lt;/a&gt; parts of this series in this website.&lt;/p&gt; 
&lt;h1&gt;References&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AsciiDoc&quot;&gt;AsciiDoc Wikipedia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;ReStructuredText&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.thymeleaf.org/&quot;&gt;ThymeLeaf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mathjs.org/&quot;&gt;MathJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://katex.org/&quot;&gt;KaTex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;Mermaid-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flowchart.js.org/&quot;&gt;Flowchart.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/&quot;&gt;ChartJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://plotly.com/javascript/&quot;&gt;Plotly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gionkunz.github.io/chartist-js/&quot;&gt;Chartist-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgraphs.io/&quot;&gt;RawGraphs.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://d3js.org/&quot;&gt;d3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://c3js.org/&quot;&gt;c3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nvd3.org/&quot;&gt;nvd3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;Mill Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/feathericons/feather&quot;&gt;FeatherIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ionicons.com/&quot;&gt;IonIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fontawesome.com/&quot;&gt;FontAwesome&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tabler/tabler-icons&quot;&gt;Tabler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://css.gg/&quot;&gt;css.gg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docusaurus.io/&quot;&gt;Docusaurus.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/docusaurus&quot;&gt;Docusaurus Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake&quot;&gt;JBake github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://planet42.github.io/Laika/&quot;&gt;Laika&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/planet42/Laika&quot;&gt;Laika Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/&quot;&gt;Scala-lang docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/scaladoc.html&quot;&gt;Scala3 ScalaDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/scaladoc/&quot;&gt;Scala3 ScalaDoc Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dotty.epfl.ch/3.0.0/docs/usage/scaladoc/index.html&quot;&gt;Scala3 ScalaDoc Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lampepfl/dotty&quot;&gt;Scala3/Dotty - ScalaDocs github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt-site&quot;&gt;Sbt-site Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.scala-sbt.org/sbt-site/&quot;&gt;Sbt-site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;sphinx-doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.foundweekends.org/pamflet/&quot;&gt;Pamflet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/foundweekends/pamflet&quot;&gt;Pamflet Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nanoc.ws/&quot;&gt;Nanoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/&quot;&gt;GitBook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.lightbend.com/docs/paradox/current/&quot;&gt;Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/paradox&quot;&gt;Github Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;GoHugo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Build tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_docusaurus_2&quot;&gt;Mill Docusaurus plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;Mill JBake plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;Mill MDoc plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalameta.org/mdoc/&quot;&gt;MDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/mdoc&quot;&gt;MDoc in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill JBake plugin in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;Gitlab pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;Github Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/markdown.html&quot;&gt;Gitlab Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;John Gruber’s canonical description of Markdown’s syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://commonmark.org/&quot;&gt;Commonmark variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/extended-syntax/&quot;&gt;Markdown guide extended-syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rmarkdown.rstudio.com/&quot;&gt;R Markdown variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmarwell/jbake-blog-template-author&quot;&gt;JBake Author template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vsch/flexmark-java&quot;&gt;Flexmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://prismjs.com/&quot;&gt;PrismJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://highlightjs.org/&quot;&gt;HighLightJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://highlightjs.org/download/&quot;&gt;HighLightJS download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://highlightjs.readthedocs.io/en/latest/&quot;&gt;HighLightJS documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions&quot;&gt;Flexmark extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vsch/flexmark-java/wiki/Extensions#footnotes&quot;&gt;Flexmark footnote extensions&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;https://typista.org/&lt;/p&gt; 
&lt;hr&gt; 
&lt;details close&gt; &lt;summary&gt;Want to ruin the surprise?&lt;/summary&gt; 
 &lt;br&gt; Well, you asked for it! 
&lt;/details&gt; 
&lt;details open&gt; &lt;summary&gt;Want to ruin the surprise?&lt;/summary&gt; 
 &lt;br&gt; Well, you asked for it! 
&lt;/details&gt; &lt;!-- https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown --&gt; 
&lt;style&gt;
r { color: Red }
o { color: Orange }
g { color: Green }
&lt;/style&gt; 
&lt;h1&gt;TODOs:&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;
  &lt;r&gt;
   TODO:
  &lt;/r&gt; Important thing to do&lt;/li&gt; 
 &lt;li&gt;
  &lt;o&gt;
   TODO:
  &lt;/o&gt; Less important thing to do&lt;/li&gt; 
 &lt;li&gt;
  &lt;g&gt;
   DONE:
  &lt;/g&gt; Breath deeply and improve karma&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class=&quot;footnotes&quot;&gt; 
 &lt;hr&gt; 
 &lt;ol&gt; 
  &lt;li id=&quot;fn-1&quot;&gt; &lt;p&gt;Compilation error: &quot;Deprecated as of 10.6.0. initHighlightingOnLoad() deprecated. Use highlightAll() now.&quot;&lt;/p&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
  &lt;li id=&quot;fn-2&quot;&gt; &lt;p&gt;Make sure you choose the *&quot;language Category&quot; that shows the language you want. For example Scala is in the &quot;functional&quot; category. Easiest may be selecting &lt;em&gt;&quot;all&quot;&lt;/em&gt; and using the browser&apos;s text search option.&lt;/p&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
  &lt;li id=&quot;fn-3&quot;&gt; &lt;p&gt;As I have pointed out, due to some existing issues (circa 2022), it was not possible to activate all of the existing Flexmark extensions in JBake.&lt;/p&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Tutorial: Publishing your own Github blog (Part 2)</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_2.html</link>
      <pubDate>Sun, 9 Oct 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/mill/jbake/mill_mdoc_part_2.html</guid>
      	<description>
	&lt;!-- cSpell:ignore javac, Haoyi, Roeser, Coursier, scalac, lihaoyi, Laika, Pamflet, Nanoc, CNAME, Gruber, millw, Thymeleaf, tototec, tobiasroeser ---&gt; &lt;!-- cSpell:ignore Freemarker, Plotly, Tabler, Commonmark, glyphicons, rwxrwxr, jbake, masterindex ---&gt; &lt;!-- cSpell:ignore adoc, shiv, ivys, halflings, asciidoctor, classpath, scaladoc, mkdir, Fontawesome, stackoverflow ---&gt; &lt;!--  cSpell:ignore stumbleupon, darkmode, rootpath ---&gt; &lt;!-- https://support.codebasehq.com/articles/tips-tricks/syntax-highlighting-in-markdown --&gt; &lt;!-- https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown --&gt; &lt;!-- https://opensource.com/article/17/7/4-lightweight-image-viewers-linux-desktop --&gt; &lt;!-- https://github.com/streetsidesoftware/vscode-spell-checker/issues/117 --&gt; &lt;!-- https://www.deadlinkchecker.com/website-dead-link-checker.asp --&gt; 
&lt;style&gt;
r { color: Red }
o { color: Orange }
g { color: Green }
b { color: Blue }
&lt;/style&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;In the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1&quot;&gt;first part of this series&lt;/a&gt; of articles we looked at how to setup a &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; site using the &lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;Mill&lt;/a&gt; build tool (&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill documentation&lt;/a&gt;) to develop and execute the required scripts to generate and publish the content. The goal now is to prepare the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt; that is not one of the default templates of JBake. After reading this article, you will able to use other templates that are freely available in the Internet. In this article, I assume you have read and worked through the previous post. In particular, you have a &lt;a href=&quot;https://github.com/hmf/hashnode-pubs&quot;&gt;private Github repository&lt;/a&gt; that holds your website&apos;s sources, a &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;public Github repository&lt;/a&gt; configured with its own &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;Github pages URL&lt;/a&gt; and a Mill &lt;code&gt;build.sc&lt;/code&gt; script with the &lt;code&gt;site&lt;/code&gt; module and respective Mill targets to copy, &lt;em&gt;&quot;bake&quot;&lt;/em&gt; and deploy your website&apos;s sources.&lt;/p&gt; 
&lt;h1&gt;Getting started&lt;/h1&gt; 
&lt;p&gt;We will first initialize our source repository to hold a copy of the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt; executing the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeGitTemplate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[3/3] site.jbakeGitTemplate 
jbakeGitTemplate: Git source at &quot;https://github.com/manikmagar/jbake-future-imperfect-template.git&quot;
jbakeGitTemplate: check if Git repo at /home/user/VSCodeProjects/blog
Git command at &quot;/home/user/VSCodeProjects/blog/site&quot; remove &quot;/home/user/VSCodeProjects/blog/site/src&quot;
Git clone command at &quot;/home/user/VSCodeProjects/blog/site&quot; with relative destination to &quot;src&quot;
Cloning into &apos;src&apos;...
remote: Enumerating objects: 775, done.
remote: Total 775 (delta 0), reused 0 (delta 0), pack-reused 775
Receiving objects: 100% (775/775), 2.19 MiB | 2.06 MiB/s, done.
Resolving deltas: 100% (470/470), done.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can then serve the website&apos;s pages locally and see the site&apos;s content with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeServe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next we &lt;em&gt;bake&lt;/em&gt; and publish the content to the &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;public Github repository&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeDeploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[9/10] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/home/user/VSCodeProjects/tech4rd/docs&apos;
[10/10] site.jbakeDeploy 
Git command at /home/user/VSCodeProjects/tech4rd
pushSite: commit message = &apos;2022-05-21T14:37:16.591502@/home/user/VSCodeProjects/blog/site/build.sc/pushSite}: &apos;
pushSite: add
pushSite: commit
pushSite: push
Enumerating objects: 47, done.
Counting objects: 100% (47/47), done.
Delta compression using up to 12 threads
Compressing objects: 100% (20/20), done.
Writing objects: 100% (24/24), 3.19 KiB | 1.06 MiB/s, done.
Total 24 (delta 16), reused 0 (delta 0)
remote: Resolving deltas: 100% (16/16), completed with 15 local objects.
To https://github.com/hmf/tech4rd.git
   c4254b3..10424e6  main -&amp;gt; main
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;and view them in the remote &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;Github pages&lt;/a&gt;. It is best to modify and check your website&apos;s content locally. Only when all is correct, do we publish to the remote public site. I will use the following workflow:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Execute the &lt;code&gt;./mill -i site.jbakeServe&lt;/code&gt;;&lt;/li&gt; 
 &lt;li&gt;Open your browser at the &lt;a href=&quot;http://localhost:8820/&quot;&gt;local URL&lt;/a&gt;:&lt;/li&gt; 
 &lt;li&gt;Make sure to clear the browser&apos;s cache to see the latest changes;&lt;/li&gt; 
 &lt;li&gt;Check that the website content is correct;&lt;/li&gt; 
 &lt;li&gt;If the content is not correct, change the site&apos;s sources. These will be automatically compiled and copied to the local HTTP browser&apos;s folder. The web server will detect the changes and serve the new content;&lt;/li&gt; 
 &lt;li&gt;Repeat the above process until you have what you want. At this point you can execute the &lt;code&gt;./mill -i site.jbakeDeploy&lt;/code&gt; command;&lt;/li&gt; 
 &lt;li&gt;You can now confirm that the content has been correctly published in the remote public website.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Just a note on cleaning the cache. I use the &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/browsers/&quot;&gt;Firefox browser&lt;/a&gt;. To &lt;a href=&quot;https://support.mozilla.org/en-US/kb/clear-cookies-and-site-data-firefox&quot;&gt;clear the cache&lt;/a&gt;, I select the striped menu icon on the top right corner of the window. I then select &lt;code&gt;history&lt;/code&gt;, followed by &lt;code&gt;clear recent history&lt;/code&gt;. A dialogue box will open. Select the option &lt;code&gt;time range to clear&lt;/code&gt; to &lt;code&gt;last hour&lt;/code&gt; and click &lt;code&gt;Ok&lt;/code&gt;. You will have to repeat this process every time you make changes to the website&apos;s content.&lt;/p&gt; 
&lt;p&gt;We are now ready to configure and contribute content to the site.&lt;/p&gt; 
&lt;h1&gt;Initial housekeeping&lt;/h1&gt; 
&lt;p&gt;The template comes with a number of assets such as icons, images, cascading style sheets (CSS) and FreeMarker templates that gives the site its look and feel. It also provides a set of menu options and default entries, including social media links and an &lt;em&gt;&quot;about&quot;&lt;/em&gt; page that need to be changed, so that, it contains the information relevant to the website&apos;s content. We must first change these in order to &quot;brand&quot; our site with a specific look and feel.&lt;/p&gt; 
&lt;h2&gt;Icons and avatars&lt;/h2&gt; 
&lt;p&gt;The first step in branding your site is to change the icons. For my public site, I searched for an icon of my liking in several free online resources. I found the &lt;a href=&quot;https://icons8.com/icon/4MRMs77EDvrv/iron-man&quot;&gt;Iron Man&lt;/a&gt; icon by &lt;a href=&quot;https://icons8.com&quot;&gt;Icons8&lt;/a&gt; to be a good choice. You should select or design you own icons with a size of at least 128 x 128 pixels. There are 3 icons one should change. The first is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Favicon&quot;&gt;favicon&lt;/a&gt; that is located in the &lt;code&gt;site/src/assets/img/favicon/favicon.png&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;Originally is was a 75 x 75 PNG image. I downloaded the icon, scaled it from 512 x 512 pixels down to a 75 x 75 pixel image and replaced the original file indicated above. If you refresh your browser, you should see the new icon, shown below, in your browser&apos;s tab:&lt;/p&gt; &lt;!-- Use a copy of the assets in case we change the site. Retains validity of article --&gt; &lt;!-- Following link ok for local and remote host servers                              --&gt; &lt;!-- ![site/src/assets/img/main/favicon.png](./../../../../img/favicon/favicon.png)   --&gt; &lt;!-- Net URL fails in JBake&apos;s served localhost because the double slash is not handled 
     by JBake&apos;s HTTP server. Some servers are configured to collapse duplicate forward 
     slashes to a single one. So this is not an issue                                 --&gt; &lt;!-- ![site/src/assets/img/main/favicon.png](./assets/img/favicon/favicon.png)        --&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/tech4rd/blog/2020/mill/jbake/copy_assets/img/favicon/favicon.png&quot; alt=&quot;site/src/assets/img/main/favicon.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The next icon is used for the the small image located on the top right of each post. The source image is found in the &lt;code&gt;site/src/assets/img/main/icon.png&lt;/code&gt; file. This is also a 75 x 75 PNG image, so I simply removed the original, copied my favicon to the folder and renamed it to &lt;code&gt;avatar.png&lt;/code&gt;. You should now see the icon below appear on each post (remember to clear the cache first):&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/tech4rd/blog/2020/mill/jbake/copy_assets/img/main/avatar.png&quot; alt=&quot;site/src/assets/img/main/avatar.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The final image is the larger avatar found in the left sidebar just above the blog&apos;s title. This was originally a 128 x 128 PNG image. I took the same icon, scaled it from 512 x 512 pixels down to a 128 x 128 pixel image and replaced the original file named &lt;code&gt;icon.png&lt;/code&gt;. If you refresh your browser, you should see the new icon, shown below, in your browser&apos;s tab (remember to clear the cache first):&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/tech4rd/blog/2020/mill/jbake/copy_assets/img/main/icon.png&quot; alt=&quot;site/src/assets/img/main/icon.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Our next stop is the JBake configuration file:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/jbake.properties&quot;&gt;site/src/jbake.properties&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The template uses many of the Jbake default properties found in this file. This configuration file also includes many other properties used by the FreeMarker templates. Changes to the Jbake configuration (properties) file are not detected by the JBake serve command. Whenever you make changes to this file you have to restart the &lt;code&gt;jbakeServe&lt;/code&gt; command. Use the &lt;code&gt;Ctrl-C&lt;/code&gt; key combination to stop the HTTP server and repeat the JBake serve command.&lt;/p&gt; 
&lt;p&gt;We will start off by changing the sites URL, title, author name and avatar icon as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;site.host=https://hmf.github.io/tech4rd/
site.title=Tech 4 R&amp;amp;D

site.author=Hugo Ferreira
site.author.avatar=img/main/avatar.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;site.host&lt;/code&gt; is automatically replaced when local serving is used with the &lt;code&gt;http://localhost:8820/&lt;/code&gt; URL.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;site.title&lt;/code&gt; is the title that appears on the top left corner (left of the menu option).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We don&apos;t change any of the menu&apos;s or their respective &lt;a href=&quot;https://fontawesome.com/&quot;&gt;Fontawesome icons&lt;/a&gt;. For example, the &lt;a href=&quot;https://fontawesome.com/v4/icon/user&quot;&gt;user icon&lt;/a&gt; is used in the &quot;about&quot; menu option.&lt;/p&gt; 
&lt;p&gt;The side bar icon (&lt;code&gt;icon.png&lt;/code&gt;) referred to above, can be placed either in a circle or a hexagonal shape. One can set the JBake properties to use one of these shapes or none, by changing several variables. These variables, shown in the section below, are used in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/commons/sidebar.ftl&quot;&gt;sidebar.ftl&lt;/a&gt; template. Here are the values I set:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sidebar.intro.pic.src = img/main/icon.png
# modify your picture in the shape of a circle or
# future imperfect&apos;s hexagonal shape
sidebar.intro.pic.circle    = false
sidebar.intro.pic.imperfect = false
sidebar.intro.pic.width     = 75px
sidebar.intro.pic.alt       = Tech 4 R&amp;amp;D
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we opt to use either one of these shapes, then the icon is set as a link to the site&apos;s root. If not, then only the image is used. The &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/commons/sidebar.ftl&quot;&gt;&lt;code&gt;sidebar.ftl&lt;/code&gt;&lt;/a&gt; uses, for example, the &lt;code&gt;intro-circle&lt;/code&gt; property that is defined in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;&lt;code&gt;add-on.css&lt;/code&gt;&lt;/a&gt; CSS file. This property sets the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius&quot;&gt;border-radius&lt;/a&gt;. Note that besides the circle&apos;s background colour, an SVG image of a hexagon (future imperfect&apos;s hexagonal shape) is also set behind the icon. When setting the colours we can also set both these background colours. Below, I provide additional information on this. However, for a simple dark mode colour scheme, I have opted to use no background shapes.&lt;/p&gt; 
&lt;p&gt;I did notice the following though:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The picture width has no effect if either or both &lt;code&gt;pic.circle&lt;/code&gt; and &lt;code&gt;pic.imperfect&lt;/code&gt; are set to true (see &lt;code&gt;#intro .logo img&lt;/code&gt; in &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;If you set &lt;code&gt;pic.circle&lt;/code&gt; to true then &lt;code&gt;pic.imperfect&lt;/code&gt; will automatically be activated, even if you set it to false;&lt;/li&gt; 
 &lt;li&gt;Because you cannot change the icon size, if the image covers most of the square, then the background can make the image less aesthetically pleasing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The icon&apos;s size is set in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file via the following CSS snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;		#intro .logo img {
			display: block;
			margin-left: -0.25em;
			width: 4.5em;
		}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One could of course tweak the size by using a variable for &lt;code&gt;width&lt;/code&gt;, but at this point I left it as it was.&lt;/p&gt; 
&lt;p&gt;Below the icon we have a title, subtitle and &lt;em&gt;&quot;about&quot;&lt;/em&gt; blurb that can also be set in the configuration file. Here are the values I have set:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;sidebar.intro.header =Tech 4 R&amp;amp;D
sidebar.intro.summary =A technical blog on all things software and hardware.
sidebar.intro.about =A blog with technical articles on programming\\, software engineering\\, artificial intelligence and electronics.
sidebar.intro.about.learnMore=about.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we need to &lt;a href=&quot;https://stackoverflow.com/questions/67482008/jbake-freemarker-errror-this-has-evaluated-to-a-sequence-wrapper-f-t-simplese&quot;&gt;escape the commas&lt;/a&gt; with the double backslash (&lt;code&gt;\\,&lt;/code&gt;), otherwise the parsing fails.&lt;/p&gt; 
&lt;p&gt;The next step is to fill in your &lt;a href=&quot;/tech4rd/about.html&quot;&gt;&lt;em&gt;&quot;about&quot;&lt;/em&gt; page&lt;/a&gt;, which is a raw HTML file. As per the JBake documentation, all raw HTML or Markdown files must have a &lt;a href=&quot;https://jbake.org/docs/2.6.7/#metadata_header&quot;&gt;metadata header&lt;/a&gt; that looks something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;title=Weekly Links #2
date=2013-02-01
type=post
tags=weekly links, java
status=published
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we must have at least the &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; fields in the header. If you have defined a default &lt;code&gt;status&lt;/code&gt; value in your configuration file, then you need not add it to the header. Here is an example of the header I used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;title=About
date=2022-05-25
type=page
status=published
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A small note on the content of the &lt;em&gt;&quot;about&quot;&lt;/em&gt; file. Because it is raw HTML (we could have used another format such as Markdown or AsciiDoc by simply changing the &lt;code&gt;sidebar.intro.about.learnMore&lt;/code&gt; configuration value), the contents may be any HTML snippet you want. The original was just text. I opted to write several paragraphs and so used the following HTML snippet to correctly justify the paragraphs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p style=&quot;text-align: justify;&quot;&amp;gt;
  Example text in a formatted paragraph.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Social media&lt;/h2&gt; 
&lt;p&gt;The port of the &lt;em&gt;Future Imperfect&apos;s&lt;/em&gt; &lt;a href=&quot;http://html5up.net/&quot;&gt;HTML5 UP&lt;/a&gt; template also provides links with icons to several well-known social media outlets that can be set via the configuration file. Here are the values I used in my case:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;sidebar.social.github          = hmf
sidebar.social.medium          = hugo6ferreira
sidebar.social.linkedin        = hugo-ferreira-289a4251
sidebar.social.stackoverflow   = 2051561
sidebar.social.reddit          =
sidebar.social.twitter         = 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we should only provide the user&apos;s identifier. The correct URL will be used by the template.&lt;/p&gt; 
&lt;h1&gt;Color scheme&lt;/h1&gt; 
&lt;p&gt;Setting up your colour scheme or pallet for your site is important for branding. It sets the look and feel of the website. If you look through the CSS files in the assets folder, you will see many colours defined by value. This makes adapting the current template difficult and time consuming. So the first step was to define a set of colours in a separate CSS file named &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;theme.css&lt;/code&gt;&lt;/a&gt; with all the existing colours found in the other CSS files. These were defined using CSS variables. I then replaced each and every colour in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;main.css&lt;/a&gt; and &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;add-on.css&lt;/a&gt; files, with the corresponding variables of the &lt;code&gt;theme.css&lt;/code&gt; file. Here is an example of the variables that I used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
    --red         : #ff0000;
    --persian-red : #d1342fff;
    --green       : #00ff00;
    --greenyellow : #ADFF2F;


    /* text in posts, about, arquive list                */
    --foreground           : var(--blue_primary_text);
    /* back to top button on left bottom (#back-to-top), side bar footer (#footer .copyright), next and previous buttons */
    --mid_ground           : var(--blue_secondary_text);
    /* Top menu + content area - facebook background     */
    --background           : var(--blue_background);    
    /* Side bar with icon, title, social media links, recent posts, tags, about */
    --background_body      : var(--blue_card);          
    /* ?                                                 */
    --dark_gray            : var(--blue_hover);         
    /* bold, strong for titles and subtitles in side bar */
    --dark_gray_2          : var(--blue_secondary_text);
    /* borders and separators                            */
    --dark_gray_alpha      : var(--blue_hover);          
    /* background of search boxes                        */
    --dark_gray_alpha_2    : var(--blue_hover);          
    /* share icon buttons - .share-btn:active            */
    --active_button        : var(--blue_hover);          
    /* border below share buttons - box-shadow           */
    --share_btn            : var(--blue_hover);          
    /* links and author name                             */
    --content_border       : var(--mask_b_red_1);        
    /* selection background of button pressed            */
    --hover_alpha          : var(--blue_hover);          
    /* button and link hover, text area borders          */
    --hover                : var(--mask_b_red_2);        

    /* share links */
    --btn_twitter          : #55acee;
    --btn_google-plus      : #dd4b39;
    --btn_facebook         : #3B5998;
    --btn_linkedin         : #4875B4;
    --btn_stumbleupon      : #EB4823;
    --btn_reddit           : #ff5700;
    --btn_email            : #444444;
    --btn_twitter_hover    : #4c9ad6; 
    --btn_google-plus_hover: #c64333;
    --btn_facebook_hover   : #2f4779;
    --btn_linkedin_hover   : #4069a2;
    --btn_stumbleupon_hover: #d3401f;
    --btn_reddit_hover     : #e54e00;
    --btn_email_hover      : #363636;
    
    /* Icon mask + Dark reader colours */
    --mask_red_0           : #e494fc;
    --mask_red_1           : #cf3eff;
    --mask_red_2           : #9e41ef;
    --mask_red_3           : #7d4dfb;
    --mask_red_4           : #525afb;
    --mask_red_5           : #2e72ff;
    --mask_red_6           : #3262f6;
    --mask_red_7           : #23438f;
    --light_background     : #1e2122;
    --dark_background_0    : #181a1b;
    --dark_background_1    : #191b1c;
    --light_foreground_0   : #e8e6e3;
    --light_foreground_1   : #cdcbc9;
    --dark_foreground      : #979796;

    /* Blue pallet */
    /* 5 */
    --blue_background         : #bfd9ec; 
    --blue_card               : #8fb9d7; 
    --blue_hover              : #a3bacb; 
    --blue_primary_text       : #153f6f; 
    --blue_secondary_text     : #0c4480; 
    /* +2 */
    --mask_b_red_0           : #c3848f;
    --mask_b_red_1           : #b46572;
    --mask_b_red_2           : #a84858;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that some of the variables are defined indirectly via another set of variables. More concretely one can observe, for example, that the &lt;code&gt;--foreground&lt;/code&gt; variable that is used in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file, is set to the value of the variable &lt;code&gt;--blue_primary_text&lt;/code&gt;. This has allowed me use simple colour schemes of 5 + 2 colours defined in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;theme.css&lt;/a&gt; and map only those to a larger set of colours that were used in the original template. To set up your own pallet, just define and map those variables to the colour combination of your choice. Note that the &lt;em&gt;&quot;+2&quot;&lt;/em&gt; colours set the borders that signal selected components via clicks (&lt;code&gt;--content_border&lt;/code&gt;) or hovering (&lt;code&gt;--hover&lt;/code&gt;). I kept the original colours of the &quot;share link&quot; icons.&lt;/p&gt; 
&lt;p&gt;One functionality I added to the template, was the automated selection of a &lt;em&gt;&quot;dark mode&quot;&lt;/em&gt; colour scheme based on the user&apos;s preference. A problem with this, is that the colours visibility and user&apos;s perception of these colours will change based on the contrast provided by the selected colour schemes. Even though it is advisable to change several other properties to solve possible issues with the &lt;em&gt;&quot;dark mode&quot;&lt;/em&gt; colour pallets, I only encountered problems with the underlining of the links and author name. To make these more visible I simply increase the line&apos;s thickness from &lt;code&gt;1px&lt;/code&gt; to &lt;code&gt;2px&lt;/code&gt; in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file. Here are the changes I made:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;		.author .name {
			-moz-transition: border-bottom-color 0.2s ease;
			-webkit-transition: border-bottom-color 0.2s ease;
			-ms-transition: border-bottom-color 0.2s ease;
			transition: border-bottom-color 0.2s ease;
			border-bottom: dotted 2px var(--content_border);
			display: block;
			margin: 0 1.5em 0 0;
		}


	a {
		-moz-transition: color 0.2s ease, border-bottom-color 0.2s ease;
		-webkit-transition: color 0.2s ease, border-bottom-color 0.2s ease;
		-ms-transition: color 0.2s ease, border-bottom-color 0.2s ease;
		transition: color 0.2s ease, border-bottom-color 0.2s ease;
		border-bottom: dotted 2px var(--content_border);
		color: inherit;
		text-decoration: none;
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recall that we can set the side bar icon (&lt;code&gt;icon.png&lt;/code&gt;) via the Jbake properties file. This allows us to place either a circle or a hexagonal shape under the icon. The colours of the shape are defined in two places. The first is set by the &lt;code&gt;.intro-circle&lt;/code&gt; class that is configured in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/add-on.css&quot;&gt;&lt;code&gt;add-on.css&lt;/code&gt;&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;#intro .intro-circle {
    border-radius: 50%;
}

#intro .intro-circle {
    border-radius: 50%;
    background-color: var(--intro_logo_color);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case I created and used the &lt;code&gt;--intro_logo_color&lt;/code&gt; variable. The second is set by the &lt;code&gt;.logo:before&lt;/code&gt; class defined in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;		#intro .logo:before {
			background-image: url(&quot;data:image/svg+xml;charset=utf8,%3Csvg xmlns=&apos;http://www.w3.org/2000/svg&apos; width=&apos;100px&apos; height=&apos;100px&apos; viewBox=&apos;0 0 100 100&apos; preserveAspectRatio=&apos;none&apos; zoomAndPan=&apos;disable&apos;%3E%3Cpolygon points=&apos;0,0 100,0 100,25 50,0 0,25&apos; style=&apos;fill:%23f4f4f4&apos; /%3E%3Cpolygon points=&apos;0,100 100,100 100,75 50,100 0,75&apos; style=&apos;fill:%23f4f4f4&apos; /%3E%3C/svg%3E&quot;);
			background-position: top left;
			background-repeat: no-repeat;
			background-size: 100% 100%;
			content: &apos;&apos;;
			display: block;
			height: 100%;
			left: 0;
			position: absolute;
			top: 0;
			width: 100%;
		}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the hexagon&apos;s &lt;code&gt;background-image&lt;/code&gt; colour is hardcoded to &lt;code&gt;#f4f4f4&lt;/code&gt;. To be able to change the colour dynamically, I defined the &lt;code&gt;--intro_logo_shape&lt;/code&gt; variable in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;theme.css&lt;/code&gt;&lt;/a&gt; file as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;  :root{

      --intro_logo_shape: url(&quot;data:image/svg+xml;charset=utf8,%3Csvg xmlns=&apos;http://www.w3.org/2000/svg&apos; width=&apos;100px&apos; height=&apos;100px&apos; viewBox=&apos;0 0 100 100&apos; preserveAspectRatio=&apos;none&apos; zoomAndPan=&apos;disable&apos;%3E%3Cpolygon points=&apos;0,0 100,0 100,25 50,0 0,25&apos; style=&apos;fill:%230000ff&apos; /%3E%3Cpolygon points=&apos;0,100 100,100 100,75 50,100 0,75&apos; style=&apos;fill:%230000ff&apos; /%3E%3C/svg%3E&quot;);

  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then used that variable in the in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;		#intro .logo:before {
			background-image: var(--intro_logo_shape);
			background-position: top left;
			background-repeat: no-repeat;
			background-size: 100% 100%;
			content: &apos;&apos;;
			display: block;
			height: 100%;
			left: 0;
			position: absolute;
			top: 0;
			width: 100%;
		}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So now, by setting the appropriate colours in the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;theme.css&lt;/code&gt;&lt;/a&gt; file, we can have the desired background behind the logo. I finally decided &lt;strong&gt;not&lt;/strong&gt; to do it because: a) I could not find a good combination of colours for the pallets I selected and b) the hexagon shape is too &quot;tight&quot; and the result is less aesthetically appealing (maybe I could increase the &lt;code&gt;background-size&lt;/code&gt; to solve this). However, you are free to change the template as you wish.&lt;/p&gt; 
&lt;h2&gt;Dark Mode&lt;/h2&gt; 
&lt;p&gt;Dark mode allows one to select a colour pallet that uses a dark background and light foreground. A user may opt for the dark mode in the following 3 ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Select the dark mode in operating system;&lt;/li&gt; 
 &lt;li&gt;Select the dark mode in the web browser;&lt;/li&gt; 
 &lt;li&gt;Select the dark mode in the web application;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The web browser (also referred to as an agent) can detect whether the dark mode has been selected in the operating system or in the web browser. This option can be detected via the CSS media feature &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt;. With this feature we can automatically activate the dark mode according to the user&apos;s choice. So how does this work? This solution is based on some other examples I came across in the Internet (&lt;a href=&quot;https://codepen.io/adhuham/pen/BaNroxd&quot;&gt;example1&lt;/a&gt;, &lt;a href=&quot;https://codepen.io/tutsplus/pen/MWpwZZZ&quot;&gt;example2&lt;/a&gt;. See &lt;a href=&quot;https://tutsplus.com/authors/jemima-abu&quot;&gt;Jemima Abu&apos;s&lt;/a&gt; good &lt;a href=&quot;https://webdesign.tutsplus.com/tutorials/color-schemes-with-css-variables-and-javascript--cms-36989&quot;&gt;article&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Let&apos;s work work through a simple example. Assume we have the following HTML snippet that we want to show via light mode or dark mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button class=&quot;btn-toggle&quot;&amp;gt;Toggle Dark-Mode&amp;lt;/button&amp;gt;
&amp;lt;h1&amp;gt;Hey there! This is just a title&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;I am just a boring text, existing here solely for the purpose of this demo&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And I am just another one like the one above me, because two is better than having only one&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To be able to select the dark mode we need only use the following CSS file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --text-color: #222;
  --bkg-color: #fff;
}


@media (prefers-color-scheme: dark) {
  :root {
    --text-color: #eee;
    --bkg-color: #121212;
  }
}

* {
  font-family: Arial, Helvetica, sans-serif;
}

body {
  background: var(--bkg-color);
}

h1,
p {
  color: var(--text-color);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:root&quot;&gt;&lt;code&gt;:root&lt;/code&gt;&lt;/a&gt; is a pseudo-class that matches the root element of the document. This means that &lt;code&gt;:root&lt;/code&gt; represents the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; elements with a &lt;code&gt;html&lt;/code&gt; selector. Because it has the highest specificity, all elements within the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element will be selected unless overridden by a more specific selector. This selector is also visible to all other selectors in the CSS files. So in the case above, the variables &lt;code&gt;--text-color&lt;/code&gt; and &lt;code&gt;--bkg-color&lt;/code&gt; will be assigned to the &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; selectors. As a result, all of the matched elements in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element and its descendants, will be selected, and hence the colours defined by these variables will be used by default.&lt;/p&gt; 
&lt;p&gt;If a user selects the dark mode, we need only redefine the &lt;code&gt;:root&lt;/code&gt; pseudo-class with new content. The &lt;code&gt;@media (prefers-color-scheme: dark)&lt;/code&gt; simply checks if the dark mode has been selected and redefines the colour variables. The selectors thereafter will automatically use the new dark mode colour scheme. So the HTML file is always rendered with the &lt;code&gt;:root&lt;/code&gt; variables, but the values of those variables will changed according to the user&apos;s preference in the operating system or web browser.&lt;/p&gt; 
&lt;p&gt;In the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/theme.css&quot;&gt;&lt;code&gt;theme.css&lt;/code&gt;&lt;/a&gt; file I initially used this strategy. However, I later added the possibility for the user to interactively set this option in the web application - the static website. This required some minor changes and is explained in the next section. Here is an example of overriding the colour scheme to use dark mode when selected by the OS or web browser:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Dark mode */
@media (prefers-color-scheme: dark) {
  :root {

    /* text in posts, about, arquive list                */
    --foreground           : var(--facebook_primary_text);   
    /* back to top button on left bottom (#back-to-top), side bar footer (#footer .copyright), next and previous buttons */
    --mid_ground           : var(--facebook_secondary_text); 
    /* Top menu + content area - facebook background     */
    --background           : var(--facebook_background);    
     /* Side bar with icon, title, social media links, recent posts, tags, about */ 
    --background_body      : var(--facebook_card);          
    /* ?                                                 */
    --dark_gray            : var(--facebook_hover);          
    /* bold, strong for titles and subtitles in side bar */
    --dark_gray_2          : var(--facebook_secondary_text); 
    /* borders and separators                            */
    --dark_gray_alpha      : var(--facebook_hover);          
    /* background of search boxes                        */
    --dark_gray_alpha_2    : var(--facebook_hover);          
    /* share icon buttons - .share-btn:active            */
    --active_button        : var(--facebook_hover);          
    /* border below share buttons - box-shadow           */
    --share_btn            : var(--facebook_hover);          
    /* links and author name                             */
    --content_border       : var(--mask_red_1);              
    /* selection background of button pressed            */
    --hover_alpha          : var(--facebook_hover);          
    /* button and link hover                             */
    --hover                : var(--mask_red_0);              
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adding a Dark Mode application selector&lt;/h2&gt; 
&lt;p&gt;Some users are not aware of the dark mode option, don&apos;t want to have the trouble to change it, or simply want to use the dark mode at the application level. To change this at the application level, I added a checkbox on the top menu and a script, which checks for events on this checkbox and changes the colour pallet accordingly. All of the JS scripts used by the website are added by the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/footer.ftl&quot;&gt;&lt;code&gt;footer.ftl&lt;/code&gt;&lt;/a&gt; template file. The idea is to load the script when the rest of the page content has loaded. The user will have the perception that the page has finished loading, when indeed it is still loading the scripts. Here is the line I added:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;		&amp;lt;script src=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;js/darkmode.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then I added the following code to the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/js/darkmode.js&quot;&gt;&lt;code&gt;darkmode.js&lt;/code&gt;&lt;/a&gt; script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(function(){
	const btn = document.getElementById(&quot;mode_checkbox&quot;);
	const btn = document.getElementById(&quot;mode_checkbox&quot;);
	const prefersDarkScheme = window.matchMedia(&quot;(prefers-color-scheme: dark)&quot;);
	
	const currentTheme = localStorage.getItem(&quot;theme&quot;);
	if (currentTheme == &quot;dark&quot;) {
		document.documentElement.className = &quot;dark-theme&quot;;
	} else if (currentTheme == &quot;light&quot;) {
		document.documentElement.className = &quot;light-theme&quot;;
	}
	else {
		// default
		if (prefersDarkScheme.matches)
			document.documentElement.className = &quot;dark-theme&quot;;  
		else
		  document.documentElement.className = &quot;light-theme&quot;;  
	}
	
	btn.addEventListener(&quot;click&quot;, function () {
		// Toggle
		var theme = (document.documentElement.className == &quot;light-theme&quot;)
				? &quot;dark&quot;
				: &quot;light&quot;;
		// Set new class
		if (theme == &quot;light&quot;)
			document.documentElement.className = &quot;light-theme&quot;;
		else
			document.documentElement.className = &quot;dark-theme&quot;;

	  // Store mode
		localStorage.setItem(&quot;theme&quot;, theme);
	});
		
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The next step was to add the checkbox to the static website. The &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_templates/menu.ftl&quot;&gt;&lt;code&gt;menu.ftl&lt;/code&gt;&lt;/a&gt; template sets up the top menu bar of the website. I changed one of the &lt;code&gt;nav&lt;/code&gt; elements to include this checkbox. Here is a snippet of the code I changed (&lt;code&gt;id==&quot;mode_checkbox&quot;&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;nav class=&quot;main&quot;&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;input type=&quot;checkbox&quot; class=&quot;checkbox&quot; id=&quot;mode_checkbox&quot;&amp;gt;
                    &amp;lt;label for=&quot;mode_checkbox&quot; class=&quot;label&quot;&amp;gt;
                        &amp;lt;div class=&apos;ball&apos;&amp;gt;
                    &amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;#if content.shareNav??&amp;gt;
            &amp;lt;li id=&quot;share-nav&quot; class=&quot;share-menu&quot; style=&quot;display:none;&quot;&amp;gt;
                &amp;lt;a class=&quot;fa-share-alt&quot; href=&quot;#share-menu&quot;&amp;gt;Share&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;/#if&amp;gt;
            &amp;lt;li class=&quot;search&quot;&amp;gt;
                &amp;lt;a class=&quot;fa-search&quot; href=&quot;#search&quot;&amp;gt;Search&amp;lt;/a&amp;gt;
                &amp;lt;form id=&quot;search&quot; method=&quot;get&quot; action=&quot;//google.com/search&quot;&amp;gt;
                    &amp;lt;input type=&quot;text&quot; name=&quot;q&quot; placeholder=&quot;Search&quot; /&amp;gt;
                    &amp;lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:${config.site_host}&quot;&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;menu&quot;&amp;gt;
                &amp;lt;a class=&quot;fa-bars&quot; href=&quot;#menu&quot;&amp;gt;Menu&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a side note, I was unable to use the checkbox with the light/dark icons due to spacing and formatting issues. For the same reasons I was also unable to add a label. In addition to this, the checkbox was not centred correctly. I ended up leaving the default tick icon and changed the &lt;a href=&quot;/tech4rd/blog/2020/mill/jbake/copy_assets/css/main.css&quot;&gt;&lt;code&gt;main.css&lt;/code&gt;&lt;/a&gt; file slightly by removing the &lt;code&gt;margin-right&lt;/code&gt; property of the &lt;code&gt;input[type=&quot;checkbox&quot;]&lt;/code&gt; selector. Here is a snippet with the changes made:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;	input[type=&quot;checkbox&quot;],
	input[type=&quot;radio&quot;] {
		-moz-appearance: none;
		-webkit-appearance: none;
		-ms-appearance: none;
		appearance: none;
		display: block;
		float: left;
		/*margin-right: -2em;*/
		opacity: 0;
		width: 1em;
		z-index: -1;
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a result here is a preliminary version of the website with the original example content and the light color scheme that I selected. Note how the checkbox on the menu&apos;s right is selected:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/screenshot_jbake_light_mode.png&quot; alt=&quot;light mode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;This is the same website using the alternate dark mode colour pallet I selected. Note how the checkbox on the menu&apos;s right is not selected:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/screenshot_jbake_dark_mode.png&quot; alt=&quot;dark mode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;We will look at the details of how the script works by extending the simple example we used above. To recap, we want to change the colour scheme of the following HTML document:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button class=&quot;btn-toggle&quot;&amp;gt;Toggle Dark-Mode&amp;lt;/button&amp;gt;
&amp;lt;h1&amp;gt;Hey there! This is just a title&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;I am just a boring text, existing here solely for the purpose of this demo&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And I am just another one like the one above me, because two is better than having only one&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We now change the previous CSS file by adding the following two new &lt;code&gt;:root&lt;/code&gt; pseudo-classes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:root.light-theme&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:root.dark-theme&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;and have:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root,
:root.light-theme {
  --text-color: #222;
  --bkg-color: #fff;
}


@media (prefers-color-scheme: dark) {
  :root.dark-theme {
    --text-color: #eee;
    --bkg-color: #121212;
  }
}

* {
  font-family: Arial, Helvetica, sans-serif;
}

body {
  background: var(--bkg-color);
}

h1,
p {
  color: var(--text-color);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that we still keep the default &lt;code&gt;:root&lt;/code&gt; so that even with no root class name, we still have a colour scheme.&lt;/p&gt; 
&lt;p&gt;Essentially, I have added a &quot;selector&quot; to the pseudo-class. Note that the &lt;code&gt;:root&lt;/code&gt; selects the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; root and all its descendants. The &lt;code&gt;:root.filter&lt;/code&gt; simply adds &lt;code&gt;filter&lt;/code&gt; as the class of the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element. The code below allows the user to toggle between light and dark mode. Lets look at how it works.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const btn = document.querySelector(&quot;.btn-toggle&quot;);
	const btn = document.getElementById(&quot;mode_checkbox&quot;);
	const prefersDarkScheme = window.matchMedia(&quot;(prefers-color-scheme: dark)&quot;);
	
	const currentTheme = localStorage.getItem(&quot;theme&quot;);
	if (currentTheme == &quot;dark&quot;) {
		document.documentElement.className = &quot;dark-theme&quot;;
	} else if (currentTheme == &quot;light&quot;) {
		document.documentElement.className = &quot;light-theme&quot;;
	}
	else {
		// default
		if (prefersDarkScheme.matches)
			document.documentElement.className = &quot;dark-theme&quot;;  
		else
		  document.documentElement.className = &quot;light-theme&quot;;  
	}

btn.addEventListener(&quot;click&quot;, function () {
  // Toggle
  var theme = (document.documentElement.className == &quot;light-theme&quot;)
      ? &quot;dark&quot;
      : &quot;light&quot;;
  // Set new class
  if (theme == &quot;light&quot;)
    document.documentElement.className = &quot;light-theme&quot;;
  else
    document.documentElement.className = &quot;dark-theme&quot;;

  // Store mode
  localStorage.setItem(&quot;theme&quot;, theme);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I have assigned a higher priority to the user&apos;s colour mode selection for the web application than that of the OS and browser options. The script first obtains the preferred colour scheme from the OS or browser. It then checks if the user had previously set a colour scheme option using the checkbox. If this was so, the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; class name is either set to &lt;code&gt;&quot;dark-theme&quot;&lt;/code&gt; or &lt;code&gt;&quot;light-theme&quot;&lt;/code&gt; depending on the saved option. If no option was saved, it either sets the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; class name to &lt;code&gt;&quot;dark-theme&quot;&lt;/code&gt; (if this was set at the OS or browser level) or &lt;code&gt;&quot;light-theme&quot;&lt;/code&gt; (if otherwise).&lt;/p&gt; 
&lt;p&gt;The second part of the code sets up an event listener for the checkbox. It simply toggles the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; class name to the opposite colour scheme and saves the new option. If you run the example above and toggle back and forth, you will see how the document root&apos;s class name changed. Here is an example of the light mode selected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html class=&quot;dark-theme&quot; lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;

  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;CodePen Demo&amp;lt;/title&amp;gt;

  &amp;lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;&amp;gt;
  
  &amp;lt;body&amp;gt;
    &amp;lt;button class=&quot;btn-toggle&quot;&amp;gt;Toggle Dark-Mode&amp;lt;/button&amp;gt;
  &amp;lt;h1&amp;gt;Hey there! This is just a title&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;I am just a boring text, existing here solely for the purpose of this demo&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And I am just another one like the one above me, because two is better than having only one&amp;lt;/p&amp;gt;

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here is an example of the dark mode selected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html class=&quot;light-theme&quot; lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;

  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;CodePen Demo&amp;lt;/title&amp;gt;

  &amp;lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;button class=&quot;btn-toggle&quot;&amp;gt;Toggle Dark-Mode&amp;lt;/button&amp;gt;
  &amp;lt;h1&amp;gt;Hey there! This is just a title&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;I am just a boring text, existing here solely for the purpose of this demo&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And I am just another one like the one above me, because two is better than having only one&amp;lt;/p&amp;gt;


  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Conclusion&lt;/h1&gt; 
&lt;p&gt;This concludes our second part of the series. With this information you can quickly brand the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt; to suite your needs. This includes setting up social medial links, logo and colour scheme. Of course, you are free to change the templates further for more customization. In the next part of this series, we will look at how to create and publish posts and pages using the &lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;, the &lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill JBake plugin in Github&lt;/a&gt; and additional Mill targets I have prepared.&lt;/p&gt; 
&lt;h1&gt;References&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AsciiDoc&quot;&gt;AsciiDoc Wikipedia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;ReStructuredText&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.thymeleaf.org/&quot;&gt;ThymeLeaf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mathjs.org/&quot;&gt;MathJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://katex.org/&quot;&gt;KaTex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;Mermaid-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flowchart.js.org/&quot;&gt;Flowchart.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/&quot;&gt;ChartJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://plotly.com/javascript/&quot;&gt;Plotly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gionkunz.github.io/chartist-js/&quot;&gt;Chartist-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgraphs.io/&quot;&gt;RawGraphs.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://d3js.org/&quot;&gt;d3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://c3js.org/&quot;&gt;c3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nvd3.org/&quot;&gt;nvd3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;Mill Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/feathericons/feather&quot;&gt;FeatherIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ionicons.com/&quot;&gt;IonIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fontawesome.com/&quot;&gt;FontAwesome&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tabler/tabler-icons&quot;&gt;Tabler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://css.gg/&quot;&gt;css.gg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docusaurus.io/&quot;&gt;Docusaurus.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/docusaurus&quot;&gt;Docusaurus Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake&quot;&gt;JBake github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://planet42.github.io/Laika/&quot;&gt;Laika&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/planet42/Laika&quot;&gt;Laika Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/&quot;&gt;Scala-lang docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/scaladoc.html&quot;&gt;Scala3 ScalaDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/scaladoc/&quot;&gt;Scala3 ScalaDoc Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dotty.epfl.ch/3.0.0/docs/usage/scaladoc/index.html&quot;&gt;Scala3 ScalaDoc Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lampepfl/dotty&quot;&gt;Scala3/Dotty - ScalaDocs github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt-site&quot;&gt;Sbt-site Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.scala-sbt.org/sbt-site/&quot;&gt;Sbt-site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;sphinx-doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.foundweekends.org/pamflet/&quot;&gt;Pamflet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/foundweekends/pamflet&quot;&gt;Pamflet Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nanoc.ws/&quot;&gt;Nanoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/&quot;&gt;GitBook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.lightbend.com/docs/paradox/current/&quot;&gt;Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/paradox&quot;&gt;Github Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;GoHugo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Build tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_docusaurus_2&quot;&gt;Mill Docusaurus plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;Mill JBake plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;Mill MDoc plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalameta.org/mdoc/&quot;&gt;MDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/mdoc&quot;&gt;MDoc in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill JBake plugin in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;Gitlab pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;Github Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/markdown.html&quot;&gt;Gitlab Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;John Gruber’s canonical description of Markdown’s syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://commonmark.org/&quot;&gt;Commonmark variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/extended-syntax/&quot;&gt;Markdown guide extended-syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rmarkdown.rstudio.com/&quot;&gt;R Markdown variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmarwell/jbake-blog-template-author&quot;&gt;JBake Author template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;
	</description>
    </item>
    <item>
      <title>Tutorial: Publishing your own Github blog (Part 1)</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/jbake/mill_mdoc_part_1.html</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/mill/jbake/mill_mdoc_part_1.html</guid>
      	<description>
	&lt;!-- cSpell:ignore javac, Haoyi, Roeser, Coursier, scalac, lihaoyi, Laika, Pamflet, Nanoc, CNAME, Gruber, millw, Thymeleaf, tototec, tobiasroeser ---&gt; &lt;!-- cSpell:ignore Freemarker, Plotly, Tabler, Commonmark, glyphicons, rwxrwxr, jbake, masterindex ---&gt; &lt;!-- cSpell:ignore adoc, shiv, ivys, halflings, asciidoctor, classpath, scaladoc, mkdir ---&gt; &lt;!-- https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown --&gt; &lt;!-- https://opensource.com/article/17/7/4-lightweight-image-viewers-linux-desktop --&gt; &lt;!-- https://github.com/streetsidesoftware/vscode-spell-checker/issues/117 --&gt; &lt;!-- https://www.deadlinkchecker.com/website-dead-link-checker.asp --&gt; &lt;!-- ./mill ./mill resolve site._

[1/1] resolve 
site.gitTemplateURL
site.jbake
site.jbakeClasspath
site.jbakeCopy
site.jbakeDeploy
site.jbakeDistributionDir
site.jbakeDistributionZip
site.jbakeGitTemplate
site.jbakeInit
site.jbakeRun
site.jbakeServe
site.jbakeVersion
site.jbakeWorker
site.siteDestination
site.sources

 --&gt; 
&lt;style&gt;
r { color: Red }
o { color: Orange }
g { color: Green }
b { color: Blue }
&lt;/style&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;This is the first part in a series of articles about creating and publishing technical content on publicly available hosts. The goal is to set-up a source to write and publish a static website to various target hosts. I want to make this as easy and painless as possible, so I have opted to use Markdown to write the contents, use code editing tools and version control to manage the content and use a static site generator to be able to cross-publish the full site or single posts to various destinations (hosts). The aim is to keep these hosts synchronized and facilitate updating when required. I will have one repository for the site&apos;s sources that will be kept private. I assume that all content that is published is public. I will use Java as the base technology to develop, maintain and publish the sites. In particular the tools used were selected to facilitate the documentation of Java and Scala 3 projects, including library APIs. This includes the use of the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill&lt;/a&gt; build tool (&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill documentation&lt;/a&gt;) to develop and execute the required scripts to generate and publish the content.&lt;/p&gt; 
&lt;h1&gt;Getting started&lt;/h1&gt; 
&lt;p&gt;We start off by creating a Github repository with the sources for the websites. This is my private source where I keep my research and unfinished work. It also contains the final rendered pieces that can then me moved to the destination hosts.&lt;/p&gt; 
&lt;p&gt;Then we create the &lt;a href=&quot;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site&quot;&gt;Github repository where the website is published&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to your github account and &lt;a href=&quot;https://github.com/new&quot;&gt;press the &lt;code&gt;create a new repository&lt;/code&gt;&lt;/a&gt; option;&lt;/li&gt; 
 &lt;li&gt;Create the repository name (in my case &lt;code&gt;tech4rd&lt;/code&gt;) for your site using GitHub pages;&lt;/li&gt; 
 &lt;li&gt;Add a description (&lt;code&gt;Articles on software development, programming stuff, embedded systems, sensors and electronics.&lt;/code&gt;);&lt;/li&gt; 
 &lt;li&gt;Make sure the site is public (don&apos;t keep their anything private);&lt;/li&gt; 
 &lt;li&gt;Select the option to initialize the repository with a &lt;code&gt;README.md&lt;/code&gt; file;&lt;/li&gt; 
 &lt;li&gt;Select the option to add an initial &lt;code&gt;.gitignore&lt;/code&gt; file (use the Scala template);&lt;/li&gt; 
 &lt;li&gt;Click the &lt;code&gt;create a template&lt;/code&gt; button.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Github documentation states that: &quot;GitHub Pages sites are publicly available on the internet, even if the repository for the site is private.&quot; Because these sites are public, don&apos;t store any personal, private or sensitive data there.&lt;/p&gt; 
&lt;p&gt;Now we can create the website source repository.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;repository you created&lt;/a&gt; to keep the sources of the site;&lt;/li&gt; 
 &lt;li&gt;Create a &lt;code&gt;index.md&lt;/code&gt; or &lt;code&gt;index.html&lt;/code&gt; file as the site&apos;s initial content: 
  &lt;ol&gt; 
   &lt;li&gt;Don&apos;t place this file in the project&apos;s root of the source repository;&lt;/li&gt; 
   &lt;li&gt;Select &lt;code&gt;add&lt;/code&gt; -&amp;gt; &lt;code&gt;create a new file&lt;/code&gt;;&lt;/li&gt; 
   &lt;li&gt;Input both the path and the file: &lt;code&gt;docs/index.md&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Place some content in this page;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;We then configure the publishing source: 
  &lt;ol&gt; 
   &lt;li&gt;In the source site click on the &lt;code&gt;Settings&lt;/code&gt; tab;&lt;/li&gt; 
   &lt;li&gt;Go to the &lt;code&gt;Code and Automation&lt;/code&gt; section;&lt;/li&gt; 
   &lt;li&gt;Under this section click on &lt;code&gt;Pages&lt;/code&gt; to open the &lt;code&gt;Github pages&lt;/code&gt; configuration page:&lt;/li&gt; 
   &lt;li&gt;Select &lt;code&gt;Source&lt;/code&gt; for a specific branch or leave as &lt;code&gt;None&lt;/code&gt;. Select the &lt;code&gt;main&lt;/code&gt; branch and select &lt;code&gt;/docs&lt;/code&gt; as the site content folder.&lt;/li&gt; 
   &lt;li&gt;Don&apos;t forget to press the &lt;code&gt;save&lt;/code&gt; button. When you do this the &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;site&apos;s URL&lt;/a&gt; is provided for you;&lt;/li&gt; 
   &lt;li&gt;Note that the site will not be immediately available. It can take up to 10 minutes for each change to be reflected in the site;&lt;/li&gt; 
   &lt;li&gt;You can then choose a theme for the Jekyll static site generator if you use the &lt;code&gt;gh-pages&lt;/code&gt; branch. We are going to use another static site generator, so leave it as is;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;Add the website link to you Github repository page 
  &lt;ol&gt; 
   &lt;li&gt;Go to the project&apos;s Github repository site;&lt;/li&gt; 
   &lt;li&gt;Click on the configuration wheel of the &lt;code&gt;About&lt;/code&gt; field;&lt;/li&gt; 
   &lt;li&gt;Click on the &lt;code&gt;Website&lt;/code&gt; field and paste the &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;previously configured URL&lt;/a&gt; into it;&lt;/li&gt; 
   &lt;li&gt;Fill in the &lt;code&gt;Description&lt;/code&gt; and &lt;code&gt;Topics&lt;/code&gt; as desired. For example: 
    &lt;ol&gt; 
     &lt;li&gt;&lt;code&gt;Description&lt;/code&gt;: Articles on software development and embedded systems.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;Topics&lt;/code&gt;: java scala programming electronics embedded-systems software-development sensors.&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can now view the initial content of your site. From the sites repository, click on the URL you have just saved. You should be able to see your contents.&lt;/p&gt; 
&lt;h1&gt;Automatically generated sites&lt;/h1&gt; 
&lt;p&gt;In the example above, we provided a Markdown file and the content was automatically made available as HTML. Several companies provide hosting platforms that can automatically render Markdown files as HTML. The site&apos;s content can be, for example, standard text files that can be viewed with the web interface of a code repository. It can also contain HTML content for a project or personal website. Examples of this include &lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt; (used above) and &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;Gitlab pages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Generating a static website based only on Markdown, may not be enough for all but the simplest website. In these cases, one can use several Markdown files and use links among them. This allows one to set up simple static sites that include: manually generated static menus or indexes, use of links between content and adding any formatting that is supported by Markdown syntax. It is important to note that these hosts support the parsing of Markdown files that are not &lt;em&gt;&quot;standard&quot;&lt;/em&gt;. We have for example &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;Github&apos;s&lt;/a&gt; and &lt;a href=&quot;https://docs.gitlab.com/ee/user/markdown.html&quot;&gt;Gitlab&apos;s&lt;/a&gt; flavoured versions of Markdown. These versions of Markdown include for example encoding &quot;for mentions&quot;, &quot;emojis&quot; and &quot;issues&quot; that can be placed in the source. These features facilitate interaction with the code repository and are parsed using the host&apos;s default parsers. In &lt;a href=&quot;https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/about-writing-and-formatting-on-github&quot;&gt;some cases&lt;/a&gt;, the online Web interface also allows for additional configurations and facilitates the editing of the content.&lt;/p&gt; 
&lt;p&gt;There is no standard for Markdown. The closest we have to a standard is &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;John Gruber’s canonical description of Markdown’s syntax&lt;/a&gt;. A good source for a complete description of Markdown (including cheat sheets), is the &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;Markdown Guide&lt;/a&gt;. Here you can also find a list of &lt;a href=&quot;https://www.markdownguide.org/extended-syntax/&quot;&gt;extended-syntax&lt;/a&gt; versions of the Markdown language that includes for example the &lt;a href=&quot;https://commonmark.org/&quot;&gt;Commonmark&lt;/a&gt; and &lt;a href=&quot;https://rmarkdown.rstudio.com/&quot;&gt;R&lt;/a&gt; Markdown variants.&lt;/p&gt; 
&lt;p&gt;It is also possible to add themes, &lt;a href=&quot;https://docs.github.com/en/pages/getting-started-with-github-pages/adding-a-theme-to-your-github-pages-site-with-the-theme-chooser&quot;&gt;for example in GitHub pages&lt;/a&gt;, when using Markdown-only sites. Internally, Github pages uses Jekyll. In this case, the HTML files will automatically be created via this static site generator. No need to install or invoke the static site tools. However, to activate and use the theme, it is necessary for you to set up the YAML front matter that specifies the layout of each HTML output.&lt;/p&gt; 
&lt;p&gt;Alternatively, one can use a static site generator by incorporating it into the CI/CD workflow&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; or use it locally to manually create and publish the site&apos;s contents to the hosts&apos; website location. We will look at the details in the section on &lt;a href=&quot;#static_site_generation&quot;&gt;static site generation&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Static site generation&lt;/h1&gt; 
&lt;p&gt;Static site generators process a set of source files (written, for example, in &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;MarkDown&lt;/a&gt;, &lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc&lt;/a&gt; (see &lt;a href=&quot;https://en.wikipedia.org/wiki/AsciiDoc&quot;&gt;AsciiDoc in Wikipedia&lt;/a&gt;) and &lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;ReStructuredText&lt;/a&gt;) and generate the HTML content. Usually each source file is converted into a corresponding HTML file. Files in HTML can also be used as sources, but they are usually not processed by the static site generator. In addition to this, these tools also make use of templates (such as &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt; or &lt;a href=&quot;https://www.thymeleaf.org/&quot;&gt;ThymeLeaf&lt;/a&gt;) to define the layout and look of the website.&lt;/p&gt; 
&lt;p&gt;The templates let us configure the sites&apos; menus, add headers and footers to the HTML pages, provide social media links, social share menus and 404 error handling for several hosts. They also allow one to place JavaScript in the HTML pages so that additional functionality can be made available. Examples include adding &lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt; scripts, estimating read times for the posts, show maths expressions (&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;, &lt;a href=&quot;https://mathjs.org/&quot;&gt;MathJS&lt;/a&gt;, &lt;a href=&quot;https://katex.org/&quot;&gt;KaTex&lt;/a&gt;), draw flowcharts (&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;Mermaid-Js&lt;/a&gt;, &lt;a href=&quot;https://flowchart.js.org/&quot;&gt;Flowchart.js&lt;/a&gt;), render plots (&lt;a href=&quot;https://www.chartjs.org/&quot;&gt;ChartJS&lt;/a&gt;, &lt;a href=&quot;https://plotly.com/javascript/&quot;&gt;Plotly&lt;/a&gt;, &lt;a href=&quot;https://gionkunz.github.io/chartist-js/&quot;&gt;Chartist-Js&lt;/a&gt;, &lt;a href=&quot;https://rawgraphs.io/&quot;&gt;RawGraphs.io&lt;/a&gt;, &lt;a href=&quot;https://d3js.org/&quot;&gt;d3js&lt;/a&gt;, &lt;a href=&quot;https://c3js.org/&quot;&gt;c3js&lt;/a&gt;, &lt;a href=&quot;https://nvd3.org/&quot;&gt;nvd3&lt;/a&gt;) and use icons (&lt;a href=&quot;https://github.com/feathericons/feather&quot;&gt;FeatherIcons&lt;/a&gt;, &lt;a href=&quot;https://ionicons.com/&quot;&gt;IonIcons&lt;/a&gt;, &lt;a href=&quot;https://fontawesome.com/&quot;&gt;FontAwesome&lt;/a&gt;, &lt;a href=&quot;https://github.com/tabler/tabler-icons&quot;&gt;Tabler&lt;/a&gt;, &lt;a href=&quot;http://css.gg/&quot;&gt;css.gg&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;There are quite a few static site generators out there. These include for example: &lt;a href=&quot;https://docusaurus.io/&quot;&gt;Docusaurus.io&lt;/a&gt; (&lt;a href=&quot;https://github.com/facebook/docusaurus&quot;&gt;Docusaurus in Github&lt;/a&gt;), &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; (&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll in Github&lt;/a&gt;), &lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;sphinx-doc&lt;/a&gt;, &lt;a href=&quot;http://www.foundweekends.org/pamflet/&quot;&gt;Pamflet&lt;/a&gt; (&lt;a href=&quot;https://github.com/foundweekends/pamflet&quot;&gt;Pamflet in Github&lt;/a&gt;), &lt;a href=&quot;https://nanoc.ws/&quot;&gt;Nanoc&lt;/a&gt;, &lt;a href=&quot;https://www.gitbook.com/&quot;&gt;GitBook&lt;/a&gt;, &lt;a href=&quot;https://developer.lightbend.com/docs/paradox/current/&quot;&gt;Paradox&lt;/a&gt; (&lt;a href=&quot;https://github.com/lightbend/paradox&quot;&gt;Paradox in Github&lt;/a&gt;), &lt;a href=&quot;https://gohugo.io/&quot;&gt;GoHugo&lt;/a&gt; and &lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt;. Many of these tools are developed in Ruby, Go or Python. I have opted to use JVM based static site generators to make it easy to automate the process - I only depend on the JVM. Maven packages that can be installed via the Ivy package manager and &lt;a href=&quot;https://www.javaadvent.com/2021/12/generate-your-static-website-with-java-and-jbake.html&quot;&gt;Maven or Gradle plugins&lt;/a&gt; to run the necessary tools. No need to deal with operating system package installation once the Java system is installed. This also makes the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/CI/CD&quot;&gt;CI/CD&lt;/a&gt; workflows easier to update a Blog or launch a new software release.&lt;/p&gt; 
&lt;p&gt;Some of these static site generators include: &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/AsciiDoc&quot;&gt;JBake in github&lt;/a&gt;), &lt;a href=&quot;https://planet42.github.io/Laika/&quot;&gt;Laika&lt;/a&gt; (&lt;a href=&quot;https://github.com/planet42/Laika&quot;&gt;Laika Github&lt;/a&gt;), &lt;a href=&quot;http://www.foundweekends.org/pamflet/&quot;&gt;Pamflet&lt;/a&gt; and &lt;a href=&quot;https://developer.lightbend.com/docs/paradox/current/&quot;&gt;Paradox&lt;/a&gt;. Laika is a interesting case in that it is also capable of generating documents of other formats such as PDF. I also include in this category tools that can be used to generate Java or Scala API documentation. In the case of Java we have &lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt;. For &lt;a href=&quot;https://docs.scala-lang.org/&quot;&gt;Scala&lt;/a&gt; we will focus on &lt;a href=&quot;https://docs.scala-lang.org/scala3/scaladoc.html&quot;&gt;ScalaDoc specifically for Scala3&lt;/a&gt; (see the &lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/scaladoc/&quot;&gt;Scala3 ScalaDoc Guide&lt;/a&gt; and &lt;a href=&quot;https://dotty.epfl.ch/3.0.0/docs/usage/scaladoc/index.html&quot;&gt;Scala3 ScalaDoc Usage&lt;/a&gt; webpages). Note that ScalaDoc is part of the &lt;a href=&quot;https://github.com/lampepfl/dotty&quot;&gt;Scala3&lt;/a&gt; compiler, also known as Dotty. The Scala3 ScalaDoc tool is a static site generator in and of itself.&lt;/p&gt; 
&lt;p&gt;In addition to the HTML templates, the source files can also be preprocessed prior to conversion. In particular, I am interested in documenting software. The &lt;a href=&quot;https://scalameta.org/mdoc/&quot;&gt;MDoc&lt;/a&gt; (&lt;a href=&quot;https://github.com/scalameta/mdoc&quot;&gt;MDoc in Github&lt;/a&gt;) can be used to compile code snippets embedded in the Markdown sources. Depending on the static site generator we also have build tool plugins for the Scala ecosystem. For example, the &lt;a href=&quot;https://www.scala-sbt.org/sbt-site/&quot;&gt;Sbt-site&lt;/a&gt;(&lt;a href=&quot;https://github.com/sbt/sbt-site&quot;&gt;Sbt-site Github&lt;/a&gt;) plugin can use several generators to create a static website. The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill build tool&lt;/a&gt; includes plugins for &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_docusaurus_2&quot;&gt;Docusaurus&lt;/a&gt;, &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;JBake&lt;/a&gt; and &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;MDoc plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;I will first show you how to set-up and use a JBake static site. More concretely I will configure, populate and publish a blog. Later I will also describe how to use ScalaDoc and MDoc to document software and keep this documentation up to date with the software repository.&lt;/p&gt; 
&lt;h2&gt;Workflow&lt;/h2&gt; 
&lt;p&gt;Before getting into the nitty gritty, let&apos;s first take a look at what the workflow of publishing a site might look like. To generate a site we basically take a set of sources, for example Markdown files and drawings, and transform them into the website&apos;s artifacts. These artifacts are usually HTML files, but may include PDF files and images (for example in the PNG or SVG formats). Usually a single source file is transformed into a single HTML file, but in general this is not a strict requirement. A source file may go through several transformations before the final output is generated. For example a Markdown file may have its code fences compiled by the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;MDoc plugin&lt;/a&gt; resulting in a changed source. This file is then processed by &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;JBake&lt;/a&gt; using &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt; templates to produce the final HTML file.&lt;/p&gt; 
&lt;p&gt;The various transformations may be applied by several tools, each of which may need their own configuration. For example, we may want to generate HTML pages with a specific layout that may include pre-compiled content, specific menus, headers and footers. &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt; for example allows the use of templates and a domain specific language (DSL) that defines the look and feel of the final HTML page. In this case, the static site generator takes as input a Freemarker template and a Markdown source file to generate the final output. Sometimes the source file itself may include configurations used to tweak the output. For example, the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;MDoc plugin&lt;/a&gt; allows us to tag each code fence to define the type of output we want or, a Markdown file may have a header. It is important to point out that anyone is free to include manually edited HTML pages to the site&apos;s contents. In addition to this, Markdown for example, allows one to embed HTML snippets that will be kept unaltered.&lt;/p&gt; 
&lt;p&gt;Compiling a site means taking a set of sources that are located in a given path, transforming these and placing them in the site&apos;s final directory. Some files may not be processed at all. For example images may be copied, as is, to the site&apos;s destination folder. Generally the location of the source files within the source directory determines how and where the content is made available. For example, blogs may have a directory specifically set aside to contain posts indexed by the publishing date. Usually the transformed files are placed in a local private directory where they can be served and checked locally. Once the content has been checked (or not), it can be published to the final public serving host.&lt;/p&gt; 
&lt;p&gt;The compilation of the website is usually done by executing one or more commands of a static site generator tool at the command line. This tool must be configured prior to execution. Such configurations may include the path to the site&apos;s sources and transformation workflow to be used. Usually the sources need to be made available in a specified path and with a required directory structure. As I have pointed out, we may also need to configure the use of other tools and their respective configurations.&lt;/p&gt; 
&lt;p&gt;The site generator command is usually invoked at the root of the site&apos;s sources. However, it may advantageous to invoke the static site generator via a build tool such as &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill&lt;/a&gt;. It allows us to customize our workflow so that we can use several tools including specific preprocessing transformers for our website. We are free to implement our own transformations tasks and embed them into the workflow of our Mill scripts that do source compilation and unit testing. We can also use Mill with CI/CD pipelines to automatically publish new content. Another advantage of using a build tool like Mill is that we only provide a Mill command line script with our sources and a Mill build script. Mill will then download and install itself and any of the required dependencies (such as the JBake tools) before executing the build script. When using CI/CD, we don&apos;t have to worry about downloading and installing Mill or any additional tools. In the next section we will use a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;Mill JBake plugin&lt;/a&gt; to generate a static site.&lt;/p&gt; 
&lt;h1&gt;JBake&lt;/h1&gt; 
&lt;p&gt;So the first question is, why JBake? JBake is a mature Java tool that has good documentation and large user community. So it should provide most of us with what we need or want (analytics, icons, menus, etc.). In particular, JBake has been extensively used to document open software projects and implement blogs and personal sites. Having said this, it does not seem to be as popular as &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or &lt;a href=&quot;https://gohugo.io/&quot;&gt;GoHugo&lt;/a&gt; but, it is well supported and several templates are available. In particular it can use the Freemarker, &lt;a href=&quot;http://www.groovy-lang.org/&quot;&gt;Groovy Simple and Markup&lt;/a&gt;, Thymeleaf, &lt;a href=&quot;https://github.com/neuland/jade4j&quot;&gt;Jade&lt;/a&gt; and &lt;a href=&quot;https://pebbletemplates.io/&quot;&gt;Pebble&lt;/a&gt; template engines.&lt;/p&gt; 
&lt;p&gt;To set up a &lt;a href=&quot;https://jbake.org/docs/2.6.7/#quickstart_guide&quot;&gt;JBake static site&lt;/a&gt; consists of the following steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download and install the JBake tool;&lt;/li&gt; 
 &lt;li&gt;Create a directory for the website&apos;s source;&lt;/li&gt; 
 &lt;li&gt;Populate the directory with JBake&apos;s default configuration that uses Freemarker templates;&lt;/li&gt; 
 &lt;li&gt;Customize the templates if this is necessary;&lt;/li&gt; 
 &lt;li&gt;Add to or change content in the site&apos;s sources directory (assets, content, templates);&lt;/li&gt; 
 &lt;li&gt;Use JBake to generate the website&apos;s final output (HTML, XHTML);&lt;/li&gt; 
 &lt;li&gt;Preview the contents (includes a &lt;em&gt;&quot;watch&quot;&lt;/em&gt; mode to automatically preview and update the content);&lt;/li&gt; 
 &lt;li&gt;Publish the contents.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To update the website we need only add or change the website&apos;s content and repeat the steps that generate the final output and publish the contents. JBake is used via the command line to perform all theses actions. It is also possible to use command line parameters, change configuration files and set environment variables to configure JBake&apos;s output. For full details see &lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake&apos;s documentation&lt;/a&gt;. I strongly suggest you keep the site&apos;s sources under version control. Either place these sources in an existing repository that you want to document, or place this in a separate repository where you keep only the website&apos;s source code. In this example, we will work on a blog, so we use a separate repository that contains only the site&apos;s sources.&lt;/p&gt; 
&lt;h2&gt;Installing Mill&lt;/h2&gt; 
&lt;p&gt;In this article we will use &lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill&apos;s JBake plugin&lt;/a&gt;. This allows us to download and execute JBake without installing this tool in the host operating system. This is advantageous when using a CI/CD pipeline in a virtual machine. All the static website generation setup and configuration is done as documented in &lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake&apos;s site&lt;/a&gt;. The execution of JBake however, is done via a Mill build script and the corresponding Mill tasks encoded in that script. So let&apos;s start off by installing and writing up our Mill script:&lt;/p&gt; 
&lt;p&gt;First place yourself at the site&apos;s source repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd ~/VSCodeProjects/blog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, download the &lt;a href=&quot;https://github.com/com-lihaoyi/mill/releases&quot;&gt;latest release of Mill&lt;/a&gt;. Make sure you download the &lt;em&gt;&quot;starter&quot;&lt;/em&gt; script (not the assembly). It is named with the Mill version and is less the 2 KBytes large. Here is an example of downloading the script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ wget https://github.com/com-lihaoyi/mill/releases/download/0.10.4/0.10.4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next we rename the script to &lt;code&gt;mill&lt;/code&gt; and make sure the script has the permission to execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mv 0.10.4 mill
$ chmod +x ./mill
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For those of you in Windows, it may be advantageous for you to download and use &lt;a href=&quot;https://github.com/lefou/millw&quot;&gt;&lt;code&gt;millw&lt;/code&gt;&lt;/a&gt;. It is a drop-in replacement for &lt;code&gt;mill&lt;/code&gt; that has a &lt;code&gt;millw.bat&lt;/code&gt; version for windows. I also found in the past, that it was able to download and use snapshot versions of Mill, which the original script failed to do.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://raw.githubusercontent.com/lefou/millw/main/millw
wget https://raw.githubusercontent.com/lefou/millw/main/millw.bat
chmod +x ./millw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A this point you should have the scripts ready to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -l
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;total 376
-rwxrwxr-x 1 user user   1714 mai  6 11:24 mill
-rwxrwxr-x 1 user user 187411 mai  7 17:25 millw
-rw-rw-r-- 1 user user 167228 mai  7 17:26 millw.bat
-rw-rw-r-- 1 user user     45 abr  7 18:43 README.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In this article I am going to use a specific version of Mill. To ensure that you use the correct version, create the &lt;code&gt;.mill-version&lt;/code&gt; file and place the Mill version inside this file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch .mill-version
$ echo 0.10.4 &amp;gt;&amp;gt; .mill-version 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can now check the Mill version using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./mill -i --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Mill Build Tool version 0.10.4
Java version: 11.0.15, vendor: Private Build, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: en_US, platform encoding: UTF-8
OS name: &quot;Linux&quot;, version: 5.13.0-40-generic, arch: amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Note that when you run this command for the first time, the correct version of Mill will first be downloaded and then used. All subsequent calls to &lt;code&gt;mill&lt;/code&gt; or &lt;code&gt;millw&lt;/code&gt; will use the installed version. To see what version has already been downloaded, execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ls /home/use/.cache/mill/download/*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Set up the Mill JBake module&lt;/h2&gt; 
&lt;p&gt;Mill scripts provides a set of modules, which are Scala 2 objects, that have several methods (referred to as tasks or targets) that allows one to: compile mixed Java and Scala projects, execute the code&apos;s main methods, and run unit tests. These modules can be &quot;mixed&quot; into a single compilation unit when we need to combine several functionalities into a single module. Many useful modules are provided out-of-the-box, but it is not possible to foresee or provide all required modules. Mill therefore allows anyone to distribute their modules as &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html&quot;&gt;$3^{rd}$ party plugins&lt;/a&gt;. These plugins are provided as Maven artifacts that are downloaded via a &lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier backend&lt;/a&gt; using &lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&apos;s&lt;/a&gt; &lt;a href=&quot;https://ammonite.io/#MagicImports&quot;&gt;magic imports&lt;/a&gt;. &lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill-JBake&lt;/a&gt; is one such &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;plugin&lt;/a&gt; that can be automatically downloaded, installed and used via Mill.&lt;/p&gt; 
&lt;p&gt;We won&apos;t go into details here, but in the next steps I&apos;ll describe how to:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a Mill script file;&lt;/li&gt; 
 &lt;li&gt;Write-up a simple Mill module that uses Mill-JBake to give us access to the JBake tool;&lt;/li&gt; 
 &lt;li&gt;Configure the JBake version to use;&lt;/li&gt; 
 &lt;li&gt;Execute JBake to initialize the repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;First create the build script at the projects&apos; root. In our case it is the &lt;code&gt;blog&lt;/code&gt; code repository. Do as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd ~/VSCodeProjects/blog
$ touch build.sc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add the following code to the &lt;code&gt;build.sc&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;import mill._
import $ivy.`de.tototec::de.tobiasroeser.mill.jbake::0.3.0`
import de.tobiasroeser.mill.jbake._

object site extends JBakeModule {

  def jbakeVersion = &quot;2.6.7&quot;

  // Default in 0.3.0
  override def jbakeProcessMode: JBakeModule.ProcessMode = JBakeModule.SubProcess

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Let&apos;s take a look at what the code above does. The line shown below uses Ammonite&apos;s magic import to download and install the Mill-JBake plugin:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;import $ivy.`de.tototec::de.tobiasroeser.mill.jbake::0.3.0`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These lines import the Mill default modules and the Mill-JBake module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;import mill._
import de.tobiasroeser.mill.jbake._
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next we set the version of the JBake tool that will be downloaded and used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def jbakeVersion = &quot;2.6.7&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following line ensures that JBake is launched in a separate JVM. I have found that for later versions of JBake, using Mill&apos;s JVM to execute the commands, results in errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  // Default in 0.3.0
  override def jbakeProcessMode: JBakeModule.ProcessMode = JBakeModule.SubProcess
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The name of the module is set to &lt;code&gt;site&lt;/code&gt;. Mill&apos;s convention is that a project may have several modules. The source of each module is placed in a directory with the same name located at the project&apos;s root. The project&apos;s root is where the &lt;code&gt;build.sc&lt;/code&gt; file is found. So in our case we first create the module&apos;s source directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ mkdir site
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;site&lt;/code&gt; module extends &lt;a href=&quot;https://github.com/lefou/mill-jbake/blob/master/jbake/src/de/tobiasroeser/mill/jbake/JBakeModule.scala&quot;&gt;de.tobiasroeser.mill.jbake.JBakeModule.&lt;/a&gt; that provides us access to the JBake tool via several optional configuration values (such as &lt;code&gt;jbakeVersion&lt;/code&gt; shown above) and the JBake commands (such as initializing, compiling (&lt;em&gt;&quot;baking&quot;&lt;/em&gt;) and serving content). All the commands we execute for a module is prefixed with the module&apos;s name. So in this case, all commands will explicitly start with &lt;code&gt;site.&lt;/code&gt; To see what targets are available either of these commands can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog./millw -i resolve site._
~/VSCodeProjects/blog./mill -i resolve site._
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output (note that the first time you run this, the output will include a list of the downloaded Mill-JBake Jars):&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[1/1] resolve
site.jbake
site.jbakeClasspath
site.jbakeDistributionDir
site.jbakeDistributionZip
site.jbakeInit
site.jbakeRun
site.jbakeServe
site.jbakeVersion
site.jbakeWorker
site.sources
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;At this point we are ready to create the site&apos;s content. Let&apos;s start off by &lt;a href=&quot;https://jbake.org/docs/2.6.7/#create_a_project&quot;&gt;initializing the site&lt;/a&gt; with the default Freemarker template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./millw -i site.jbakeInit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Compiling /home/user/VSCodeProjects/blog/build.sc
[7/7] site.jbakeInit 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

Base folder structure successfully created.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command sets up an example site using the default FreeMarker template. It adds the required directories and example content. This includes assets such as images, icons, CSS formatting, JavaScript libraries, FreeMarker templates and some AsciiDoc content. We can now take a look at the site&apos;s source directory as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ tree site/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;site/
└── src
    ├── assets
    │&amp;nbsp;&amp;nbsp; ├── css
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── asciidoctor.css
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── base.css
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── bootstrap.min.css
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── prettify.css
    │&amp;nbsp;&amp;nbsp; ├── favicon.ico
    │&amp;nbsp;&amp;nbsp; ├── fonts
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── glyphicons-halflings-regular.eot
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── glyphicons-halflings-regular.svg
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── glyphicons-halflings-regular.ttf
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── glyphicons-halflings-regular.woff
    │&amp;nbsp;&amp;nbsp; ├── img
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── beach.jpg
    │&amp;nbsp;&amp;nbsp; └── js
    │&amp;nbsp;&amp;nbsp;     ├── bootstrap.min.js
    │&amp;nbsp;&amp;nbsp;     ├── html5shiv.min.js
    │&amp;nbsp;&amp;nbsp;     ├── jquery-1.11.1.min.js
    │&amp;nbsp;&amp;nbsp;     └── prettify.js
    ├── content
    │&amp;nbsp;&amp;nbsp; ├── about
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── jbake_logo.png
    │&amp;nbsp;&amp;nbsp; ├── about.html
    │&amp;nbsp;&amp;nbsp; └── blog
    │&amp;nbsp;&amp;nbsp;     └── 2013
    │&amp;nbsp;&amp;nbsp;         ├── fifth-post.adoc
    │&amp;nbsp;&amp;nbsp;         ├── first-post.html
    │&amp;nbsp;&amp;nbsp;         ├── fourth-post.adoc
    │&amp;nbsp;&amp;nbsp;         ├── second-post.md
    │&amp;nbsp;&amp;nbsp;         └── third-post.adoc
    ├── jbake.properties
    └── templates
        ├── archive.ftl
        ├── feed.ftl
        ├── footer.ftl
        ├── header.ftl
        ├── index.ftl
        ├── menu.ftl
        ├── page.ftl
        ├── post.ftl
        ├── sitemap.ftl
        └── tags.ftl

11 directories, 32 files
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are working in a Git repository, don&apos;t forget to add the &lt;code&gt;.gitignore&lt;/code&gt; file in the project&apos;s root with the following lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/.metals
/.vscode
/out
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The next step is to compile or &lt;em&gt;&quot;bake&quot;&lt;/em&gt; the site.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbake
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of compilation&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[7/7] site.jbake 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

10:16:50.269 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
10:16:50.507 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
10:16:50.548 INFO  c.o.common.jna.ONative - 33429823488 B/31881 MB/31 GB of physical memory were detected on machine
10:16:50.549 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
10:16:50.549 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
10:16:50.549 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
10:16:50.549 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
10:16:50.550 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
10:16:50.550 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
10:16:50.550 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429823488 B/31881 MB/31 GB
10:16:50.551 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
10:16:50.551 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
10:16:50.551 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
10:16:50.553 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
10:16:50.553 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
10:16:51.226 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
10:16:52.199 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
10:16:52.200 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
10:16:52.200 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
10:16:52.355 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
10:16:52.364 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
10:16:54.177 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
10:16:54.325 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fifth-post.adoc]...  : new 
10:16:54.329 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
10:16:54.392 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
10:16:54.496 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
10:16:54.525 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
10:16:54.525 INFO  org.jbake.app.Crawler - Content detected:
10:16:54.525 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
10:16:54.526 INFO  org.jbake.app.Crawler - Parsed 5 files of type: post
10:16:54.680 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
10:16:54.687 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
10:16:54.698 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fifth-post.html]... done!
10:16:54.701 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
10:16:54.704 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
10:16:54.706 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
10:16:54.709 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
10:16:54.733 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
10:16:54.740 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
10:16:54.751 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
10:16:54.756 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
10:16:54.756 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/base.css]... done!
10:16:54.756 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/bootstrap.min.css]... done!
10:16:54.757 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/prettify.css]... done!
10:16:54.757 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.ico]... done!
10:16:54.757 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.eot]... done!
10:16:54.758 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.svg]... done!
10:16:54.758 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.ttf]... done!
10:16:54.758 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.woff]... done!
10:16:54.758 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/beach.jpg]... done!
10:16:54.759 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/bootstrap.min.js]... done!
10:16:54.759 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/html5shiv.min.js]... done!
10:16:54.759 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/jquery-1.11.1.min.js]... done!
10:16:54.759 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/prettify.js]... done!
10:16:54.760 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/content/about/jbake_logo.png]... done!
10:16:54.760 INFO  org.jbake.app.Oven - Baking finished!
10:16:54.760 INFO  org.jbake.app.Oven - Baked 10 items in 4491ms
10:16:54.761 INFO  c.o.orient.core.db.OrientDBEmbedded - - shutdown storage: cache...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;p&gt;And then serve the site at a local address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeServe
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of serving a JBake site&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[8/8] site.jbakeServe 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

10:19:35.605 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
10:19:35.824 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
10:19:35.870 INFO  c.o.common.jna.ONative - 33429823488 B/31881 MB/31 GB of physical memory were detected on machine
10:19:35.870 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
10:19:35.870 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
10:19:35.870 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
10:19:35.871 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
10:19:35.871 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
10:19:35.871 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
10:19:35.871 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429823488 B/31881 MB/31 GB
10:19:35.872 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
10:19:35.872 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
10:19:35.872 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
10:19:35.874 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
10:19:35.874 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
10:19:36.562 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
10:19:37.468 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
10:19:37.470 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
10:19:37.470 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
10:19:37.635 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
10:19:37.644 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
10:19:39.505 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
10:19:39.645 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fifth-post.adoc]...  : new 
10:19:39.649 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
10:19:39.728 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
10:19:39.834 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
10:19:39.870 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
10:19:39.871 INFO  org.jbake.app.Crawler - Content detected:
10:19:39.871 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
10:19:39.871 INFO  org.jbake.app.Crawler - Parsed 5 files of type: post
10:19:39.973 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
10:19:39.978 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
10:19:39.990 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fifth-post.html]... done!
10:19:39.993 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
10:19:39.996 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
10:19:39.999 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
10:19:40.002 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
10:19:40.024 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
10:19:40.031 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
10:19:40.043 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
10:19:40.047 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
10:19:40.047 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/base.css]... done!
10:19:40.047 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/bootstrap.min.css]... done!
10:19:40.048 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/prettify.css]... done!
10:19:40.048 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.ico]... done!
10:19:40.048 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.eot]... done!
10:19:40.048 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.svg]... done!
10:19:40.049 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.ttf]... done!
10:19:40.049 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.woff]... done!
10:19:40.049 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/beach.jpg]... done!
10:19:40.050 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/bootstrap.min.js]... done!
10:19:40.050 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/html5shiv.min.js]... done!
10:19:40.050 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/jquery-1.11.1.min.js]... done!
10:19:40.050 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/prettify.js]... done!
10:19:40.051 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/content/about/jbake_logo.png]... done!
10:19:40.051 INFO  org.jbake.app.Oven - Baking finished!
10:19:40.051 INFO  org.jbake.app.Oven - Baked 10 items in 4446ms
10:19:40.052 INFO  c.o.orient.core.db.OrientDBEmbedded - - shutdown storage: cache...
10:19:40.091 INFO  org.jbake.launcher.BakeWatcher - Watching for (content, template, asset) changes in [/home/user/VSCodeProjects/blog/site/src]
10:19:40.141 INFO  org.jbake.launcher.JettyServer - Serving out contents of: [/home/user/VSCodeProjects/blog/out/site/jbake.dest] on http://localhost:8820/
10:19:40.141 INFO  org.jbake.launcher.JettyServer - (To stop server hit CTRL-C)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;p&gt;You can then preview it in your browser at &lt;a href=&quot;http://localhost:8820&quot;&gt;this URL&lt;/a&gt;. Here is an image of the initial example site (shown using &lt;a href=&quot;https://darkreader.org/&quot;&gt;Dark Reader&lt;/a&gt;):&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/screenshot_jbake_example_site.png&quot; alt=&quot;Preview in Dark Mode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Note that JBake will monitor changes in the site&apos;s source and automatically update the site&apos;s content. To stop the automatic update and serving of the website simple press the keys &lt;code&gt;Ctrl-C&lt;/code&gt;. The server will terminate as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;^C
18:50:11.633 WARN  c.o.orient.core.OSignalHandler - Received signal: SIGINT
18:50:11.635 INFO  c.o.orient.core.Orient - Orient Engine is shutting down...
18:50:11.749 INFO  c.o.orient.core.Orient - Clearing byte buffer pool
18:50:11.803 INFO  c.o.orient.core.Orient - OrientDB Engine shutdown complete
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because we generated a static site, it is also possible for us to simply point our browser to the &lt;code&gt;index.html&lt;/code&gt; file. From the output above we can see that the site&apos;s index file is located in the following directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/home/user/VSCodeProjects/blog/out/site/jbake.dest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we open the &lt;code&gt;index.html&lt;/code&gt; file, we will get a similar page as above. However, many of the assets will not appear correctly. For example, an image using an absolute link will not be rendered in the browser. This is because all links that absolute, will only resolve to the site&apos;s root, if served by an HTTP web server. So, for example, the images in the &lt;code&gt;img&lt;/code&gt; directory and cascading style sheets in the &lt;code&gt;css&lt;/code&gt; directory will not be found and used correctly, unless served by a web server. This is the reason why one should render the site using a web server.&lt;/p&gt; 
&lt;p&gt;You can now look a the the &lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake documentation&lt;/a&gt; do learn how to configure this tool. It is possible to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure the folders where the content, templates and assets are placed;&lt;/li&gt; 
 &lt;li&gt;Flag files and folders to be ignored by JBake;&lt;/li&gt; 
 &lt;li&gt;Define the default &lt;code&gt;status&lt;/code&gt; value used in the metadata headers (&lt;code&gt;draft&lt;/code&gt;, &lt;code&gt;published&lt;/code&gt;, &lt;code&gt;published-date&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Publishing&lt;/h1&gt; 
&lt;p&gt;If we use the default publishing source, as we did in the &lt;a href=&quot;#getting_started&quot;&gt;&lt;em&gt;getting started&lt;/em&gt; section&lt;/a&gt;, your content is automatically published. You can configure the sources of Github pages to be kept in a specific branch, and place the sources in that branch&apos;s root or &lt;code&gt;/doc&lt;/code&gt; folder. If you publish to the &lt;code&gt;/docs&lt;/code&gt; folder you can also specify the custom domain name of your site in the &lt;code&gt;/docs/CNAME&lt;/code&gt; file. Every time you merge changes to the source branch, Github publishes those pages.&lt;/p&gt; 
&lt;p&gt;I have opted to place the source in one repository, and publish the content in another repository. I do this so that I can keep my sources private, which include drafts and notes. We have followed the instructions used for &lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll&quot;&gt;setting up Github pages using Jekyll&lt;/a&gt;. At this point, we have already created our source repository, generated a static site and tested it locally using the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;Mill JBake plugin&lt;/a&gt;. We also have our public site &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;repository&lt;/a&gt; that will hold our static website that anyone can &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;access via Github pages&lt;/a&gt;. However, because we are using Github free, we cannot &lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll#creating-a-repository-for-your-site&quot;&gt;publish our content automatically&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;One way to do this is to simply:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create and clone your &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;public website repository&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;Configure your public website repository to contain a &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;Github pages URL&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;Create and clone your &lt;a href=&quot;https://github.com/hmf/hashnode-pubs&quot;&gt;private source repository&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;Use the Mill JBake plugin to develop and test the local copy of your static website in your private repository;&lt;/li&gt; 
 &lt;li&gt;When you are ready to publish: 
  &lt;ol&gt; 
   &lt;li&gt;Delete your &lt;a href=&quot;https://github.com/hmf/tech4rd/tree/main/docs&quot;&gt;public website repository&apos;s source folder&lt;/a&gt; from your local copy(such as &lt;code&gt;/home/user/VSCodeProjects/tech4rd/docs/&lt;/code&gt;);&lt;/li&gt; 
   &lt;li&gt;Copy the compiled static website from your copy of the private site (for example &lt;code&gt;/home/user/VSCodeProjects/blog/out/site/jbake.dest/&lt;/code&gt;) to your copy of the public site (for example &lt;code&gt;/home/user/VSCodeProjects/tech4rd/docs/&lt;/code&gt;);&lt;/li&gt; 
   &lt;li&gt;Push and commit the changes of your copy of the &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;public website repository&lt;/a&gt;;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;Github pages will detect the update and publish your site&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Lets take a look at the &lt;code&gt;build.sc&lt;/code&gt; Mill script code snippets defined in the &lt;code&gt;site&lt;/code&gt; object extends &lt;code&gt;JBakeModule&lt;/code&gt;. The set of methods, values and targets allow us to deploy the site as described above. The following line creates a path that point to the public website repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def siteDestination: T[os.Path] = T { os.Path(&quot;/home/user/VSCodeProjects/tech4rd&quot;) }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Mill script assumes that the &lt;code&gt;siteDestination&lt;/code&gt; path contains a valid git repository. This is the default path where the compiled website is copied to. The next code snipped shows the &lt;code&gt;jbakeCopy&lt;/code&gt; target that does the actual copying:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def jbakeCopy(args: String*) = T.command {
    val outPath = jbake().path
    val destination = if (args.size &amp;gt; 0) os.Path(args(0)) else siteDestination()
    val dest = destination / &quot;docs&quot;
    val exists = os.exists(dest) &amp;amp;&amp;amp; os.isDir(dest)
    if (exists) {
      os.remove.all(dest)
      T.ctx().log.info(s&quot;Copying site from &apos;$outPath&apos; to &apos;$dest&apos;&quot;)
      os.copy(outPath, dest)
      Some(destination)
    }
    else {
      T.ctx().log.info(s&quot;Warning: destination does not exist - $dest. Site not deployed.&quot;)
      None
    }
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The method above works as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;It uses the &lt;code&gt;jbake&lt;/code&gt; command to extract the destination folder where the compiled site exists. Note that if the website&apos;s sources have changed, &lt;code&gt;jbake&lt;/code&gt; will automatically compile these sources;&lt;/li&gt; 
 &lt;li&gt;It then gets the destination path where the website&apos;s content will be copied to. If no path is passed into this target as a command line argument, then the &lt;code&gt;siteDestination&lt;/code&gt; path will be used by default;&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jbakeCopy&lt;/code&gt; target assumes the destination directory has a &lt;code&gt;docs&lt;/code&gt; subfolder where the website&apos;s content must be copied to. This will allow us later to copy and publish additional elements, such as code examples or complete projects, that may be referred to in the website. If this subfolder does not exist, the process ends here;&lt;/li&gt; 
 &lt;li&gt;If the destination directory &lt;code&gt;docs&lt;/code&gt; subfolder exists, then its contents are first deleted, and the new website&apos;s compiled content is copied into it;&lt;/li&gt; 
 &lt;li&gt;The method then returns the destination path if a copy was performed (&lt;code&gt;Some(destination)&lt;/code&gt;) or &lt;code&gt;None&lt;/code&gt; to indicate the copy failed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Next we show how to execute this target on a new site. First place yourself at the &lt;a href=&quot;https://github.com/hmf/hashnode-pubs&quot;&gt;private source repository&apos;s&lt;/a&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd /home/user/VSCodeProjects/blog
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ pwd
/home/user/VSCodeProjects/blog
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Next we invoke the &lt;code&gt;jbakeCopy&lt;/code&gt; target as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeCopy
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of `jbakeCopy` when website is compiled...&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;Compiling /home/user/VSCodeProjects/blog/build.sc
[7/9] site.jbake 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

18:32:25.715 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
18:32:25.966 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
18:32:26.015 INFO  c.o.common.jna.ONative - 33429823488 B/31881 MB/31 GB of physical memory were detected on machine
18:32:26.016 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
18:32:26.016 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
18:32:26.016 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
18:32:26.017 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
18:32:26.017 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
18:32:26.017 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
18:32:26.017 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429823488 B/31881 MB/31 GB
18:32:26.018 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
18:32:26.018 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
18:32:26.018 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
18:32:26.020 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
18:32:26.020 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
18:32:26.714 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
18:32:27.614 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
18:32:27.615 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
18:32:27.615 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
18:32:27.883 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
18:32:27.891 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
18:32:29.672 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
18:32:29.811 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fifth-post.adoc]...  : new 
18:32:29.816 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
18:32:29.896 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
18:32:29.995 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
18:32:30.029 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
18:32:30.030 INFO  org.jbake.app.Crawler - Content detected:
18:32:30.030 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
18:32:30.030 INFO  org.jbake.app.Crawler - Parsed 5 files of type: post
18:32:30.126 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
18:32:30.132 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
18:32:30.143 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fifth-post.html]... done!
18:32:30.146 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
18:32:30.149 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
18:32:30.152 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
18:32:30.156 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
18:32:30.182 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
18:32:30.189 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
18:32:30.199 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
18:32:30.205 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
18:32:30.206 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/base.css]... done!
18:32:30.206 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/bootstrap.min.css]... done!
18:32:30.206 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/prettify.css]... done!
18:32:30.207 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.ico]... done!
18:32:30.207 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.eot]... done!
18:32:30.208 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.svg]... done!
18:32:30.208 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.ttf]... done!
18:32:30.208 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.woff]... done!
18:32:30.209 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/beach.jpg]... done!
18:32:30.209 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/bootstrap.min.js]... done!
18:32:30.209 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/html5shiv.min.js]... done!
18:32:30.209 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/jquery-1.11.1.min.js]... done!
18:32:30.210 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/prettify.js]... done!
18:32:30.210 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/content/about/jbake_logo.png]... done!
18:32:30.210 INFO  org.jbake.app.Oven - Baking finished!
18:32:30.210 INFO  org.jbake.app.Oven - Baked 10 items in 4496ms
[9/9] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/home/user/VSCodeProjects/tech4rd/docs&apos;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt;
&lt;/details&gt;  
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;We can also invoke the &lt;code&gt;jbakeCopy&lt;/code&gt; target passing it the &lt;code&gt;/tmp&lt;/code&gt; destination path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeCopy /tmp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[9/9] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/tmp/docs&apos;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To be able to deploy a site in &lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt;, we need only commit and push the new content to the &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;remote public website repository&lt;/a&gt;. The code snippet below shows the &lt;code&gt;jbakeDeploy&lt;/code&gt; target that does this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def jbakeDeploy( args: String* ): Command[Unit] = T.command {

    val wasCopied = jbakeCopy(args:_*)() 

    if (wasCopied.isDefined){
      // Check if we are in a git repo
      val destination = wasCopied.get 
      val repo = destination / &quot;.git&quot;
      val exists = os.exists(repo) &amp;amp;&amp;amp; os.isDir(repo)

      T.ctx().log.info(s&quot;pushSite: check if Git repo&quot;)
      val isGitRepoCommand = List(&quot;git&quot;, &quot;rev-parse&quot;, &quot;--is-inside-work-tree&quot;)
      val isGitRepoRes = os.proc(isGitRepoCommand)
                           .call(
                                 cwd = destination, 
                                 mergeErrIntoOut = true
                               )
 
      // Is it a repo?
      val out = isGitRepoRes.out.string.trim
      val isRepo = out == &quot;true&quot;

      if (exists &amp;amp;&amp;amp; isRepo){
        T.ctx().log.info(s&quot;Git command at ${destination}&quot;)
        val addCommand = List(&quot;git&quot;, &quot;add&quot;, &quot;.&quot;)

        val message = if (args.length &amp;gt;=2) args(1) else &quot;&quot;
        val commitMessage = s&quot;${LocalDateTime.now()}@$millSourcePath/build.sc/pushSite}: ${message}&quot;
        T.ctx().log.info(s&quot;pushSite: commit message = &apos;$commitMessage&apos;&quot;)
        val commitCommand = List(&quot;git&quot;, &quot;commit&quot;, &quot;-a&quot;, &quot;-m&quot;, commitMessage)
        val pushCommand = List(&quot;git&quot;, &quot;push&quot;)

        T.ctx().log.info(s&quot;pushSite: add&quot;)
        val add = os.proc(addCommand)
                    .call( cwd = destination )

        T.ctx().log.info(s&quot;pushSite: commit&quot;)
        val commit = os.proc(commitCommand)
                       .call( cwd = destination )

        T.ctx().log.info(s&quot;pushSite: push&quot;)
        val push = os.proc(pushCommand)
                    .call( cwd = destination )
      } 
      else {
        T.ctx().log.info(s&quot;Git not found at ${destination}. No git commands executed.&quot;)
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the code snippet above, the &lt;code&gt;jbakeCopy&lt;/code&gt; target is first invoked to ensure that the website&apos;s source is compiled and then copied to the &lt;a href=&quot;https://github.com/hmf/tech4rd&quot;&gt;public website repository&lt;/a&gt;. If the website&apos;s content was successfully generated and copied, then it checks to see if the destination folder is a valid Git repository by executing the Git command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git rev-parse --is-inside-work-tree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the destination folder is a valid Git repository, then it executes the Git commands &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;. If the destination repository is correctly configured to use Github pages, then the website will be published and made available at the configured &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;Github pages URL&lt;/a&gt;. Note that the website will take some time to be published. Here is an example of deploying the site via Github pages using the target above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd /home/user/VSCodeProjects/blog
$ ~/VSCodeProjects/blog$ ./mill -i site.jbakeDeploy 
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of the &lt;tt&gt;jbakeCopy&lt;/tt&gt; target command...&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;Compiling /home/user/VSCodeProjects/blog/build.sc
[7/10] site.jbake 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

18:31:23.772 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
18:31:23.988 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
18:31:24.039 INFO  c.o.common.jna.ONative - 33429823488 B/31881 MB/31 GB of physical memory were detected on machine
18:31:24.039 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
18:31:24.039 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
18:31:24.039 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
18:31:24.040 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
18:31:24.041 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
18:31:24.041 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
18:31:24.041 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429823488 B/31881 MB/31 GB
18:31:24.042 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
18:31:24.042 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
18:31:24.043 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
18:31:24.044 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
18:31:24.045 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
18:31:24.761 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
18:31:25.770 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
18:31:25.771 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
18:31:25.771 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
18:31:25.960 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
18:31:25.970 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
18:31:27.877 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
18:31:28.036 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fifth-post.adoc]...  : new 
18:31:28.040 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
18:31:28.116 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
18:31:28.224 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
18:31:28.258 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
18:31:28.258 INFO  org.jbake.app.Crawler - Content detected:
18:31:28.258 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
18:31:28.258 INFO  org.jbake.app.Crawler - Parsed 5 files of type: post
18:31:28.363 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
18:31:28.369 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
18:31:28.385 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fifth-post.html]... done!
18:31:28.388 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
18:31:28.391 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
18:31:28.395 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
18:31:28.399 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
18:31:28.430 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
18:31:28.436 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
18:31:28.447 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
18:31:28.451 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
18:31:28.452 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/base.css]... done!
18:31:28.452 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/bootstrap.min.css]... done!
18:31:28.452 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/prettify.css]... done!
18:31:28.452 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.ico]... done!
18:31:28.452 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.eot]... done!
18:31:28.453 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.svg]... done!
18:31:28.453 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.ttf]... done!
18:31:28.453 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/fonts/glyphicons-halflings-regular.woff]... done!
18:31:28.454 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/beach.jpg]... done!
18:31:28.454 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/bootstrap.min.js]... done!
18:31:28.454 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/html5shiv.min.js]... done!
18:31:28.455 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/jquery-1.11.1.min.js]... done!
18:31:28.455 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/prettify.js]... done!
18:31:28.456 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/content/about/jbake_logo.png]... done!
18:31:28.456 INFO  org.jbake.app.Oven - Baking finished!
18:31:28.456 INFO  org.jbake.app.Oven - Baked 10 items in 4685ms
[9/10] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/home/user/VSCodeProjects/tech4rd/docs&apos;
[10/10] site.jbakeDeploy 
pushSite: check if Git repo
Git command at /home/user/VSCodeProjects/tech4rd
pushSite: commit message = &apos;2022-05-18T18:31:28.698889@/home/user/VSCodeProjects/blog/site/build.sc/pushSite}: &apos;
pushSite: add
pushSite: commit
pushSite: push
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 12 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 415 bytes | 415.00 KiB/s, done.
Total 4 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To https://github.com/hmf/tech4rd.git
   1386894..fe6d585  main -&amp;gt; main

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;Just as in the case of the &lt;code&gt;jbakeCopy&lt;/code&gt; target, we can also pass the destination path to the &lt;code&gt;jbakeCopy&lt;/code&gt; target. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeDeploy /tmp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the output is:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[9/10] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/tmp/docs&apos;
[10/10] site.jbakeDeploy 
pushSite: check if Git repo
1 targets failed
site.jbakeDeploy os.SubprocessException: CommandResult 128
fatal: not a git repository (or any of the parent directories): .git

    os.proc.call(ProcessOps.scala:85)
    ammonite.$file.build$site$.$anonfun$jbakeDeploy$2(build.sc:94)
    scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Note that because the destination folder is not a valid Git repository, the target will fail.&lt;/p&gt; 
&lt;h1&gt;Using a different template&lt;/h1&gt; 
&lt;p&gt;JBake provides a set of &lt;a href=&quot;https://jbake.org/docs/2.6.7/#example_project_structures&quot;&gt;example projects&lt;/a&gt;. These are usually stored in the JBake installation directory. The &lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill JBake plugin&lt;/a&gt; downloads and places these in the project&apos;s &lt;em&gt;&quot;distribution&quot;&lt;/em&gt; output directory. Here is a list of those files for the version of JBake we selected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~$ ls -l /~/VSCodeProjects/blog/out/site/jbakeDistributionDir.dest/unpacked/jbake-2.6.7-bin/
total 3,3M
drwxrwxr-x 2 user user 4,0K mai 18 18:33 bin
-rw-rw-r-- 1 user user 299K mai 18 18:33 example_project_freemarker.zip
-rw-rw-r-- 1 user user 2,1M mai 18 18:33 example_project_groovy-mte.zip
-rw-rw-r-- 1 user user 299K mai 18 18:33 example_project_groovy.zip
-rw-rw-r-- 1 user user 298K mai 18 18:33 example_project_jade.zip
-rw-rw-r-- 1 user user 300K mai 18 18:33 example_project_thymeleaf.zip
drwxrwxr-x 3 user user 4,0K mai 18 18:33 lib
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change these examples so that you can initialize a site using your own custom structure and templates, you need to extract, change and repack the content of these archives so that the &lt;code&gt;jbakeInit&lt;/code&gt; Mill target can use them. When using Mill, this is not the best solution because JBake is installed for each project module you set up. You would have to repeat the process of changing the template archives again. A better alternative is to create and keep your site &lt;em&gt;&quot;theme&quot;&lt;/em&gt; in a separate code repository and then automatically download and unpack the contents into the &lt;code&gt;docs&lt;/code&gt; folder simply pointing to the URL of that repository. Here is an example of &lt;a href=&quot;https://blog.bmarwell.de/2022/03/28/jbake-author-template-released.html#using_the_jbake_author_template&quot;&gt;Benjamin Marwell providing&lt;/a&gt; the &lt;a href=&quot;https://github.com/bmarwell/jbake-blog-template-author&quot;&gt;JBake Author template&lt;/a&gt;, which is a port of the &lt;a href=&quot;https://de.wordpress.org/themes/author/&quot;&gt;Wordpress Author theme&lt;/a&gt;. Their are other such as:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/manikmagar/jbake-future-imperfect-template&quot;&gt;JBake Future Imperfect template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SiddheshRane/jbake-clean-blog-template&quot;&gt;JBake Clean Blog theme&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/manikmagar/jbake-phlat-theme&quot;&gt;JBake Phlat theme&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yamane.github.io/bj-demo/&quot;&gt;Beautiful-JBake template&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Preparing one of these template or themes takes time and effort and the results may vary widely in terms of aesthetics and functionality. This is why I have opted to use an existing template. In particular, we will use the &lt;em&gt;JBake Future Imperfect&lt;/em&gt; template because it has a pleasing aesthetic and is feature rich. It includes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://disqus.com/&quot;&gt;Discus comments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/provision/#/provision&quot;&gt;Google analytics tracking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/michael-lynch/reading-time&quot;&gt;Estimation of reading time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social links&lt;/li&gt; 
 &lt;li&gt;Customized &lt;code&gt;Page not found - 404&lt;/code&gt; URL&lt;/li&gt; 
 &lt;li&gt;Post featured images&lt;/li&gt; 
 &lt;li&gt;Feeds (JSON and RSS XML)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To initialize the JBake site with the contents of the Git URL, the following &lt;code&gt;jbakeGitTemplate&lt;/code&gt; target can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def jbakeGitTemplate( args: String* ): Command[Unit] = T.command {
    val srcDir = sources().head.path
    val source: String = if (args.size &amp;gt; 0) 
                   args(0)
                 else 
                   gitTemplateURL()
    T.ctx().log.info(s&quot;&quot;&quot;jbakeGitTemplate: Git source at &quot;${source}&quot; &quot;&quot;&quot;)
    val destination = build.millSourcePath
    T.ctx().log.info(s&quot;jbakeGitTemplate: check if Git repo at $destination&quot;)
    val isGit = isGitRepo(destination)
    if (isGit) {
      if (os.exists(srcDir)){
        T.ctx().log.info(s&quot;&quot;&quot;Git command at &quot;${millSourcePath}&quot; remove &quot;$srcDir&quot;&quot;&quot;&quot;)
        os.remove.all(srcDir)      
        os.remove(srcDir)      
      }
      val relative = srcDir.relativeTo(millSourcePath).toString 
      T.ctx().log.info(s&quot;&quot;&quot;Git clone command at &quot;${millSourcePath}&quot; with relative destination to &quot;$relative&quot;&quot;&quot;&quot;)
      val cloneCommand = List(&quot;git&quot;, &quot;clone&quot;, source, relative)
      val add = os.proc(cloneCommand)
                  .call( cwd = millSourcePath )
    }
    else {
      T.ctx().log.info(s&quot;Git not found at ${destination}. No git commands executed.&quot;)
    }
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This target is equivalent to a &lt;code&gt;jbakeInit&lt;/code&gt;. It will delete all of the website&apos;s sources, so be careful. It first obtains the public Git URL from the command line parameter. If no URL is provided it defaults to the &lt;code&gt;gitTemplateURL&lt;/code&gt; target shown below. You can set the default URL in your Mill script by overriding this target.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def gitTemplateURL: T[String] = T { &quot;https://github.com/manikmagar/jbake-future-imperfect-template.git&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see the default URL that is set in the Mills script, execute the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./mill -i show site.gitTemplateURL
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;jbakeGitTemplate&lt;/code&gt; then checks if the destination target is a git repository. If it is, then executes a &lt;code&gt;git clone&lt;/code&gt; command that copies the remote repository&apos;s content into the Mill module&apos;s destination folder. In this running example the JBake template sources are placed in the following folder:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;home/user/VSCodeProjects/blog/site/src
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this point you are ready to contribute content to the template and then &lt;em&gt;bake&lt;/em&gt;, serve and/or deploy the website&apos;s content as previously described. The following is an example of initializing a JBake template by explicitly providing a Git repository URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeGitTemplate https://github.com/SiddheshRane/jbake-clean-blog-template
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here is the output of the command (note the folders where the template&apos;s sources are placed):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[3/3] site.jbakeGitTemplate 
jbakeGitTemplate: Git source at &quot;https://github.com/SiddheshRane/jbake-clean-blog-template&quot;
jbakeGitTemplate: check if Git repo at /home/user/VSCodeProjects/blog
Git command at &quot;/home/user/VSCodeProjects/blog/site&quot; remove &quot;/home/user/VSCodeProjects/blog/site/src&quot;
Git clone command at &quot;/home/user/VSCodeProjects/blog/site&quot; with relative destination to &quot;src&quot;
Cloning into &apos;src&apos;...
remote: Enumerating objects: 264, done.
remote: Total 264 (delta 0), reused 0 (delta 0), pack-reused 264
Receiving objects: 100% (264/264), 3.51 MiB | 3.75 MiB/s, done.
Resolving deltas: 100% (121/121), done.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One can now serve and test the website as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeServe
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of the &lt;tt&gt;site.jbakeServe&lt;/tt&gt; target ...&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[8/8] site.jbakeServe 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

11:23:06.454 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
11:23:06.681 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
11:23:06.736 INFO  c.o.common.jna.ONative - 33429815296 B/31881 MB/31 GB of physical memory were detected on machine
11:23:06.736 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
11:23:06.736 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
11:23:06.736 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
11:23:06.737 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
11:23:06.737 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
11:23:06.737 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
11:23:06.738 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429815296 B/31881 MB/31 GB
11:23:06.738 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
11:23:06.738 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
11:23:06.739 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
11:23:06.740 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
11:23:06.742 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
11:23:07.450 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
11:23:08.446 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
11:23:08.448 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
11:23:08.448 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
11:23:08.713 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
11:23:08.719 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
11:23:08.733 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
11:23:10.469 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
11:23:10.668 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
11:23:10.804 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
11:23:10.851 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
11:23:10.851 INFO  org.jbake.app.Crawler - Content detected:
11:23:10.851 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
11:23:10.851 INFO  org.jbake.app.Crawler - Parsed 4 files of type: post
11:23:11.045 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
11:23:11.064 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
11:23:11.097 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
11:23:11.105 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
11:23:11.112 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
11:23:11.120 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
11:23:11.151 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
11:23:11.171 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
11:23:11.183 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
11:23:11.210 INFO  org.jbake.app.Renderer - Rendering tag [/home/user/VSCodeProjects/blog/out/site/jbake.dest/tags/asciidoc.html]... done!
11:23:11.219 INFO  org.jbake.app.Renderer - Rendering tag [/home/user/VSCodeProjects/blog/out/site/jbake.dest/tags/blog.html]... done!
11:23:11.222 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
11:23:11.222 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/clean-blog.css]... done!
11:23:11.223 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/clean-blog.min.css]... done!
11:23:11.223 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/coderay.css]... done!
11:23:11.223 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.png]... done!
11:23:11.223 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/archive-cover.jpg]... done!
11:23:11.225 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/clean-blog-share-card.png]... done!
11:23:11.225 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/grand-canyon.jpg]... done!
11:23:11.225 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/index-cover.jpg]... done!
11:23:11.226 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/jbake-logo.png]... done!
11:23:11.226 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/jekyll-logo.png]... done!
11:23:11.226 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/page-cover.jpg]... done!
11:23:11.226 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/tags-cover.jpg]... done!
11:23:11.227 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/clean-blog.js]... done!
11:23:11.227 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/clean-blog.min.js]... done!
11:23:11.227 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/css/bootstrap.css]... done!
11:23:11.228 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/css/bootstrap.min.css]... done!
11:23:11.228 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot]... done!
11:23:11.229 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg]... done!
11:23:11.229 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf]... done!
11:23:11.229 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff]... done!
11:23:11.230 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2]... done!
11:23:11.230 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/js/bootstrap.js]... done!
11:23:11.230 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/js/bootstrap.min.js]... done!
11:23:11.231 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/css/font-awesome.css]... done!
11:23:11.231 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/css/font-awesome.min.css]... done!
11:23:11.232 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/FontAwesome.otf]... done!
11:23:11.232 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.eot]... done!
11:23:11.232 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.svg]... done!
11:23:11.233 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.ttf]... done!
11:23:11.233 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.woff]... done!
11:23:11.234 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.woff2]... done!
11:23:11.234 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/animated.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/bordered-pulled.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/core.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/fixed-width.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/font-awesome.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/icons.less]... done!
11:23:11.235 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/larger.less]... done!
11:23:11.236 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/list.less]... done!
11:23:11.236 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/mixins.less]... done!
11:23:11.236 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/path.less]... done!
11:23:11.236 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/rotated-flipped.less]... done!
11:23:11.236 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/screen-reader.less]... done!
11:23:11.237 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/stacked.less]... done!
11:23:11.237 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/variables.less]... done!
11:23:11.237 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_animated.scss]... done!
11:23:11.238 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_bordered-pulled.scss]... done!
11:23:11.238 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_core.scss]... done!
11:23:11.238 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_fixed-width.scss]... done!
11:23:11.238 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_icons.scss]... done!
11:23:11.238 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_larger.scss]... done!
11:23:11.239 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_list.scss]... done!
11:23:11.239 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_mixins.scss]... done!
11:23:11.239 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_path.scss]... done!
11:23:11.239 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_rotated-flipped.scss]... done!
11:23:11.239 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_screen-reader.scss]... done!
11:23:11.240 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_stacked.scss]... done!
11:23:11.240 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_variables.scss]... done!
11:23:11.240 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/font-awesome.scss]... done!
11:23:11.241 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/jquery/jquery.js]... done!
11:23:11.241 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/jquery/jquery.min.js]... done!
11:23:11.242 INFO  org.jbake.app.Oven - Baking finished!
11:23:11.242 INFO  org.jbake.app.Oven - Baked 11 items in 4788ms
11:23:11.242 INFO  c.o.orient.core.db.OrientDBEmbedded - - shutdown storage: cache...
11:23:11.282 INFO  org.jbake.launcher.BakeWatcher - Watching for (content, template, asset) changes in [/home/user/VSCodeProjects/blog/site/src]
11:23:11.348 INFO  org.jbake.launcher.JettyServer - Serving out contents of: [/home/user/VSCodeProjects/blog/out/site/jbake.dest] on http://localhost:8820/
11:23:11.348 INFO  org.jbake.launcher.JettyServer - (To stop server hit CTRL-C)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt;
&lt;/details&gt;  
&lt;p&gt;&lt;br&gt; If you point your browser to the local URL &lt;a href=&quot;http://localhost:8820/&quot;&gt;http://localhost:8820/&lt;/a&gt;, you should see the website&apos;s content similar to what is shown below: &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/screenshot_jbake_clean_template_localhost.png&quot; alt=&quot;Serving JBake Clean template - localhost&quot;&gt;&lt;/p&gt; 
&lt;p&gt;When you are ready to publish the website&apos;s content to the remote host, execute the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/VSCodeProjects/blog$ ./mill -i site.jbakeDeploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output of the &lt;tt&gt;site.jbakeDeploy target ...&lt;/tt&gt; &lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[7/10] site.jbake 
JBake v2.6.7 (2021-05-14 21:54:29[GMT+01:00]) [http://jbake.org]

11:21:44.329 INFO  org.jbake.app.Oven - Baking has started...
Warning: Nashorn engine is planned to be removed from a future JDK release
11:21:44.564 INFO  c.o.common.jna.ONative - Detected limit of amount of simultaneously open files is 1048576,  limit of open files for disk cache will be set to 523776
11:21:44.614 INFO  c.o.common.jna.ONative - 33429815296 B/31881 MB/31 GB of physical memory were detected on machine
11:21:44.614 INFO  c.o.common.jna.ONative - Soft memory limit for this process is set to -1 B/-1 MB/-1 GB
11:21:44.614 INFO  c.o.common.jna.ONative - Hard memory limit for this process is set to -1 B/-1 MB/-1 GB
11:21:44.614 INFO  c.o.common.jna.ONative - Path to &apos;memory&apos; cgroup is &apos;/user.slice/user-1000.slice/user@1000.service&apos;
11:21:44.615 INFO  c.o.common.jna.ONative - Mounting path for memory cgroup controller is &apos;/sys/fs/cgroup/memory&apos;
11:21:44.615 INFO  c.o.common.jna.ONative - cgroup soft memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
11:21:44.615 INFO  c.o.common.jna.ONative - cgroup hard memory limit is 9223372036854771712 B/8796093022207 MB/8589934591 GB
11:21:44.615 INFO  c.o.common.jna.ONative - Detected memory limit for current process is 33429815296 B/31881 MB/31 GB
11:21:44.616 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - JVM can use maximum 7972MB of heap memory
11:21:44.616 INFO  c.o.o.c.e.OMemoryAndLocalPaginatedEnginesInitializer - Because OrientDB is running outside a container 12% of memory will be left unallocated according to the setting &apos;memory.leftToOS&apos; not taking into account heap memory
11:21:44.616 INFO  com.orientechnologies - OrientDB auto-config DISKCACHE=20&amp;nbsp;083MB (heap=7&amp;nbsp;972MB os=31&amp;nbsp;881MB)
11:21:44.617 INFO  c.o.o.c.e.l.OEngineLocalPaginated - System is started under an effective user : `user`
11:21:44.618 INFO  c.o.o.c.e.l.OEngineLocalPaginated - Allocation of 305261 pages.
11:21:45.325 INFO  c.o.o.c.s.m.ODirectMemoryStorage - Storage &apos;memory:cache&apos; is created under OrientDB distribution : 3.0.37 - Veloce (build 6a0e4724c10d51a0b19700fca46da8e41ae006f5, branch UNKNOWN)
11:21:46.257 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: masterindex
11:21:46.258 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: sitemap
11:21:46.258 INFO  org.jbake.template.ModelExtractors - register new extractors for document type: tagsindex
11:21:46.477 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/about.html]...  : new 
11:21:46.484 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/first-post.html]...  : new 
11:21:46.500 INFO  org.jbake.parser.AsciidoctorEngine - Initializing Asciidoctor engine...
11:21:48.272 INFO  org.jbake.parser.AsciidoctorEngine - Asciidoctor engine initialized.
11:21:48.426 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/fourth-post.adoc]...  : new 
11:21:48.525 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/second-post.md]...  : new 
11:21:48.556 INFO  org.jbake.app.Crawler - Processing [/home/user/VSCodeProjects/blog/site/src/content/blog/2013/third-post.adoc]...  : new 
11:21:48.556 INFO  org.jbake.app.Crawler - Content detected:
11:21:48.556 INFO  org.jbake.app.Crawler - Parsed 1 files of type: page
11:21:48.556 INFO  org.jbake.app.Crawler - Parsed 4 files of type: post
11:21:48.748 INFO  org.jbake.app.Renderer - Rendering archive [/home/user/VSCodeProjects/blog/out/site/jbake.dest/archive.html]... done!
11:21:48.767 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/about.html]... done!
11:21:48.802 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/fourth-post.html]... done!
11:21:48.813 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/third-post.html]... done!
11:21:48.823 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/second-post.html]... done!
11:21:48.832 INFO  org.jbake.app.Renderer - Rendering [/home/user/VSCodeProjects/blog/out/site/jbake.dest/blog/2013/first-post.html]... done!
11:21:48.870 INFO  org.jbake.app.Renderer - Rendering feed [/home/user/VSCodeProjects/blog/out/site/jbake.dest/feed.xml]... done!
11:21:48.888 INFO  org.jbake.app.Renderer - Rendering masterindex [/home/user/VSCodeProjects/blog/out/site/jbake.dest/index.html]... done!
11:21:48.900 INFO  org.jbake.app.Renderer - Rendering sitemap [/home/user/VSCodeProjects/blog/out/site/jbake.dest/sitemap.xml]... done!
11:21:48.924 INFO  org.jbake.app.Renderer - Rendering tag [/home/user/VSCodeProjects/blog/out/site/jbake.dest/tags/asciidoc.html]... done!
11:21:48.932 INFO  org.jbake.app.Renderer - Rendering tag [/home/user/VSCodeProjects/blog/out/site/jbake.dest/tags/blog.html]... done!
11:21:48.936 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/asciidoctor.css]... done!
11:21:48.936 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/clean-blog.css]... done!
11:21:48.937 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/clean-blog.min.css]... done!
11:21:48.937 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/css/coderay.css]... done!
11:21:48.937 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/favicon.png]... done!
11:21:48.938 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/archive-cover.jpg]... done!
11:21:48.938 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/clean-blog-share-card.png]... done!
11:21:48.939 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/grand-canyon.jpg]... done!
11:21:48.939 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/index-cover.jpg]... done!
11:21:48.939 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/jbake-logo.png]... done!
11:21:48.939 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/jekyll-logo.png]... done!
11:21:48.940 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/page-cover.jpg]... done!
11:21:48.940 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/img/tags-cover.jpg]... done!
11:21:48.940 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/clean-blog.js]... done!
11:21:48.941 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/js/clean-blog.min.js]... done!
11:21:48.941 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/css/bootstrap.css]... done!
11:21:48.941 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/css/bootstrap.min.css]... done!
11:21:48.942 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot]... done!
11:21:48.942 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg]... done!
11:21:48.943 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf]... done!
11:21:48.943 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff]... done!
11:21:48.943 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2]... done!
11:21:48.944 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/js/bootstrap.js]... done!
11:21:48.944 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/bootstrap/js/bootstrap.min.js]... done!
11:21:48.944 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/css/font-awesome.css]... done!
11:21:48.945 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/css/font-awesome.min.css]... done!
11:21:48.945 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/FontAwesome.otf]... done!
11:21:48.945 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.eot]... done!
11:21:48.946 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.svg]... done!
11:21:48.946 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.ttf]... done!
11:21:48.947 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.woff]... done!
11:21:48.947 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/fonts/fontawesome-webfont.woff2]... done!
11:21:48.947 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/animated.less]... done!
11:21:48.948 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/bordered-pulled.less]... done!
11:21:48.948 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/core.less]... done!
11:21:48.948 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/fixed-width.less]... done!
11:21:48.948 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/font-awesome.less]... done!
11:21:48.948 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/icons.less]... done!
11:21:48.949 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/larger.less]... done!
11:21:48.949 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/list.less]... done!
11:21:48.949 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/mixins.less]... done!
11:21:48.949 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/path.less]... done!
11:21:48.949 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/rotated-flipped.less]... done!
11:21:48.950 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/screen-reader.less]... done!
11:21:48.950 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/stacked.less]... done!
11:21:48.950 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/less/variables.less]... done!
11:21:48.951 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_animated.scss]... done!
11:21:48.951 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_bordered-pulled.scss]... done!
11:21:48.951 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_core.scss]... done!
11:21:48.951 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_fixed-width.scss]... done!
11:21:48.951 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_icons.scss]... done!
11:21:48.952 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_larger.scss]... done!
11:21:48.952 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_list.scss]... done!
11:21:48.952 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_mixins.scss]... done!
11:21:48.952 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_path.scss]... done!
11:21:48.952 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_rotated-flipped.scss]... done!
11:21:48.953 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_screen-reader.scss]... done!
11:21:48.953 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_stacked.scss]... done!
11:21:48.953 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/_variables.scss]... done!
11:21:48.953 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/font-awesome/scss/font-awesome.scss]... done!
11:21:48.954 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/jquery/jquery.js]... done!
11:21:48.954 INFO  org.jbake.app.Asset - Copying [/home/user/VSCodeProjects/blog/site/src/assets/vendor/jquery/jquery.min.js]... done!
11:21:48.954 INFO  org.jbake.app.Oven - Baking finished!
11:21:48.954 INFO  org.jbake.app.Oven - Baked 11 items in 4626ms
[9/10] site.jbakeCopy 
Copying site from &apos;/home/user/VSCodeProjects/blog/out/site/jbake.dest&apos; to &apos;/home/user/VSCodeProjects/tech4rd/docs&apos;
[10/10] site.jbakeDeploy 
pushSite: check if Git repo
Git command at /home/user/VSCodeProjects/tech4rd
pushSite: commit message = &apos;2022-05-21T11:21:49.241238@/home/user/VSCodeProjects/blog/site/build.sc/pushSite}: &apos;
pushSite: add
pushSite: commit
pushSite: push
Enumerating objects: 111, done.
Counting objects: 100% (111/111), done.
Delta compression using up to 12 threads
Compressing objects: 100% (91/91), done.
Writing objects: 100% (92/92), 2.34 MiB | 4.51 MiB/s, done.
Total 92 (delta 14), reused 0 (delta 0)
remote: Resolving deltas: 100% (14/14), completed with 3 local objects.
To https://github.com/user/tech4rd.git
   82fbf46..cc57fd4  main -&amp;gt; main
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;If you point your browser to the &lt;a href=&quot;https://hmf.github.io/tech4rd/&quot;&gt;Github pages URL&lt;/a&gt;, you should see the website&apos;s content similar to what is shown below: &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/jbake/screenshot_jbake_clean_template.png&quot; alt=&quot;Serving JBake Clean template - remote host&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Conclusion&lt;/h1&gt; 
&lt;p&gt;This concludes the first part of this series. You should now be able to publish a website using &lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt;. In addition to this and with the help of the Mill script, you can now automate the generation of the website&apos;s content from your own private repository and publish it with a single command. In the next part we will set up the JBake Future Imperfect template and publish a first article.&lt;/p&gt; 
&lt;h1&gt;References&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://asciidoc.org/&quot;&gt;AsciiDoc site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AsciiDoc&quot;&gt;AsciiDoc Wikipedia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;ReStructuredText&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;Freemarker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.thymeleaf.org/&quot;&gt;ThymeLeaf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mathjs.org/&quot;&gt;MathJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://katex.org/&quot;&gt;KaTex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;Mermaid-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flowchart.js.org/&quot;&gt;Flowchart.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/&quot;&gt;ChartJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://plotly.com/javascript/&quot;&gt;Plotly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gionkunz.github.io/chartist-js/&quot;&gt;Chartist-Js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgraphs.io/&quot;&gt;RawGraphs.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://d3js.org/&quot;&gt;d3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://c3js.org/&quot;&gt;c3js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nvd3.org/&quot;&gt;nvd3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;Mill Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/feathericons/feather&quot;&gt;FeatherIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ionicons.com/&quot;&gt;IonIcons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fontawesome.com/&quot;&gt;FontAwesome&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tabler/tabler-icons&quot;&gt;Tabler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://css.gg/&quot;&gt;css.gg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docusaurus.io/&quot;&gt;Docusaurus.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/docusaurus&quot;&gt;Docusaurus Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake&quot;&gt;JBake github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://planet42.github.io/Laika/&quot;&gt;Laika&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/planet42/Laika&quot;&gt;Laika Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/&quot;&gt;Scala-lang docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/scaladoc.html&quot;&gt;Scala3 ScalaDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/scaladoc/&quot;&gt;Scala3 ScalaDoc Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dotty.epfl.ch/3.0.0/docs/usage/scaladoc/index.html&quot;&gt;Scala3 ScalaDoc Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lampepfl/dotty&quot;&gt;Scala3/Dotty - ScalaDocs github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt-site&quot;&gt;Sbt-site Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.scala-sbt.org/sbt-site/&quot;&gt;Sbt-site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot;&gt;sphinx-doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.foundweekends.org/pamflet/&quot;&gt;Pamflet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/foundweekends/pamflet&quot;&gt;Pamflet Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nanoc.ws/&quot;&gt;Nanoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/&quot;&gt;GitBook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.lightbend.com/docs/paradox/current/&quot;&gt;Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/paradox&quot;&gt;Github Paradox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;GoHugo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://asciidoctor.org/&quot;&gt;AsciiDoctor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Build tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_docusaurus_2&quot;&gt;Mill Docusaurus plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_jbake&quot;&gt;Mill JBake plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html#_mdoc&quot;&gt;Mill MDoc plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalameta.org/mdoc/&quot;&gt;MDoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/mdoc&quot;&gt;MDoc in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lefou/mill-jbake&quot;&gt;Mill JBake plugin in Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages&quot;&gt;Github pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;Gitlab pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;Github Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/markdown.html&quot;&gt;Gitlab Flavoured Markdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;John Gruber’s canonical description of Markdown’s syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://commonmark.org/&quot;&gt;Commonmark variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/extended-syntax/&quot;&gt;Markdown guide extended-syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rmarkdown.rstudio.com/&quot;&gt;R Markdown variant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jbake.org/docs/&quot;&gt;JBake documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmarwell/jbake-blog-template-author&quot;&gt;JBake Author template&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div class=&quot;footnotes&quot;&gt; 
 &lt;hr&gt; 
 &lt;ol&gt; 
  &lt;li id=&quot;fn-1&quot;&gt; &lt;p&gt;See for example information provided for the &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/getting_started/pages_new_project_template.html&quot;&gt;Gitlab pages&lt;/a&gt; and the &lt;a href=&quot;https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#static-site-generators&quot;&gt;Github pages&lt;/a&gt;.&lt;/p&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Tutorial: JavaFX Mill project</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/javafx/javafx.html</link>
      <pubDate>Thu, 9 Jun 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/mill/javafx/javafx.html</guid>
      	<description>
	&lt;!-- cSpell:ignore javac, jpms, Haoyi, Roeser, Coursier, SBuild, println, controlsfx, javafx, helloworld, scalac ---&gt; &lt;!-- cSpell:ignore hamcrest, scalameta, munit, classpath, IntelliJ, unmanage, inkscape, inkview, lihaoyi, centerme ---&gt; &lt;!-- https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown --&gt; &lt;!-- https://opensource.com/article/17/7/4-lightweight-image-viewers-linux-desktop --&gt; &lt;!-- https://github.com/streetsidesoftware/vscode-spell-checker/issues/117 --&gt; 
&lt;style&gt;
b  { color: Black  }
r  { color: Red    }
o  { color: Orange }
g  { color: Green  }
gr { color: Gray   }
bw { background-color: White }
&lt;/style&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;In this article I am going to show you how to use &lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;&lt;code&gt;Mill&lt;/code&gt;&lt;/a&gt; to set-up a &lt;code&gt;Java&lt;/code&gt; and a &lt;code&gt;Scala&lt;/code&gt; application that both use &lt;a href=&quot;https://openjfx.io/&quot;&gt;&lt;code&gt;OpenJFX&lt;/code&gt;&lt;/a&gt;(previously JavaFX). The motivation behind this article is that, although planned, &lt;a href=&quot;https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html&quot;&gt;&lt;code&gt;Scala&lt;/code&gt; does not support JPMS modules&lt;/a&gt;. This is also true of other JVM languages. Java does provide backward compatibility by allowing &lt;em&gt;&quot;legacy developers&quot;&lt;/em&gt; to use standard Jar libraries as unnamed modules for JDK 9 and above. However, this is fraught with &lt;a href=&quot;https://developer.ibm.com/tutorials/java-modularity-5/&quot;&gt;difficulties&lt;/a&gt;. In particular, &lt;a href=&quot;https://users.scala-lang.org/t/solved-does-dotty-support-javas-jigsaw/6561/5&quot;&gt;OpenJFX&lt;/a&gt; requires some hacks that don&apos;t always seem to work. This article also serves as a tutorial for those of you are unfamiliar with Mill. I will explain and demonstrate the use of Mill step by step.&lt;/p&gt; 
&lt;p&gt;All the code and scripts are available in &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;this Github repository&lt;/a&gt;. This &lt;code&gt;Mill&lt;/code&gt; project supports both Scala 2 and Scala 3. This has been tested with JDK 11 and JDK 17. You need only change the build script to use the desired version of Scala and Java. Before we get into the nitty gritty of things, I will first explain why Java modules were introduced and some issues I have found. Then I will give a brief introduction on &lt;code&gt;Mill&lt;/code&gt; and include some pointers to indispensable resources on how to use it. I will then explain how to use &lt;code&gt;Mill&lt;/code&gt; to download, compile and execute a OpenJFX application. I will also describe some of Mill&apos;s utilities commands to facilitate your work. And finally, I will conclude this presentation with a short summary.&lt;/p&gt; 
&lt;h1&gt;Java Module system&lt;/h1&gt; 
&lt;p&gt;The Java Platform Module System (JPMS, formerly referred to as &lt;em&gt;Jigsaw&lt;/em&gt;) was introduced with JDK 9. The &lt;a href=&quot;https://www.oracle.com/corporate/features/understanding-java-9-modules.html&quot;&gt;advantages&lt;/a&gt; include a means to explicitly define dependencies between libraries so that we can produce smaller and more efficient runtime systems, allow application developers to define service consumers and providers (for example patching at compile time) and restricting access to the internals of a module (Java reflection won&apos;t work). Several &lt;a href=&quot;https://www.baeldung.com/java-9-modularity&quot;&gt;guides&lt;/a&gt; and &lt;a href=&quot;https://jenkov.com/tutorials/java/modules.html&quot;&gt;tutorials&lt;/a&gt; exist that can help you get started &lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt; 
&lt;p&gt;When I tried to setup a &lt;code&gt;Scala&lt;/code&gt; application to use &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/module-summary.html&quot;&gt;&lt;code&gt;java.net.http&lt;/code&gt;&lt;/a&gt;, I had &lt;a href=&quot;https://users.scala-lang.org/t/solved-does-dotty-support-javas-jigsaw/6561&quot;&gt;problems&lt;/a&gt;. I later found that the backward compatibility mode in that specific case works correctly. However, when trying to use the &lt;a href=&quot;https://openjfx.io/openjfx-docs/#modular&quot;&gt;&lt;code&gt;OpenJFX&lt;/code&gt; instructions&lt;/a&gt; for the compilation and execution of a &lt;em&gt;&quot;Non-modular application&quot;&lt;/em&gt;, I found the following issues:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We need to download and install the correct &lt;a href=&quot;https://gluonhq.com/products/javafx/&quot;&gt;operating system specific versions&lt;/a&gt; of the OpenJFX modules;&lt;/li&gt; 
 &lt;li&gt;To &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-June/021977.html&quot;&gt;&lt;em&gt;&quot;create a runnable jar with all the required JavaFX dependencies, you will need to use a launcher class that doesn&apos;t extend from &lt;code&gt;Application&quot;&lt;/code&gt;;&lt;/em&gt;&lt;/a&gt; &lt;sup id=&quot;fnref-2&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;;&lt;/li&gt; 
 &lt;li&gt;To compile the application we still need to use the &lt;code&gt;--module-path&lt;/code&gt; and &lt;code&gt;--add-modules&lt;/code&gt; command line arguments for the Java compiler (&lt;code&gt;javac&lt;/code&gt;);&lt;/li&gt; 
 &lt;li&gt;To package and run the resulting application, we need to package the compiled Java modules and their respective native operating system libraries into a final Jar archive that also contains our application&apos;s bytecode.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that the final application may also be operating system independent if all of the required native libraries are downloaded and packaged into the final Jar archive. In this article we will focus on supporting a single operating system.&lt;/p&gt; 
&lt;p&gt;The compilation and packaging steps described in the list above can be done manually. However, this is cumbersome, time-consuming and error-prone. A developer would have to first install the &lt;code&gt;OpenJFX&lt;/code&gt; modules or download them to a specific directory for a given JDK version. All the compilation and execution commands would then have to be painstakingly changed or parameterized to point to the download directory with these modules. This would pose a significant barrier for someone to quickly clone, use and even contribute to your project.&lt;/p&gt; 
&lt;p&gt;In addition to the issues listed above, I have found that several libraries require the use of the module-specific command line arguments for the Java compiler because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Some modules must be opened for access via reflection (for example &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt; and &lt;a href=&quot;https://github.com/GSI-CS-CO/chart-fx&quot;&gt;Chart-FX&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;Some modules must be &lt;em&gt;&quot;patched&quot;&lt;/em&gt; to use a specific provider of a given service (for example &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt; and &lt;a href=&quot;https://github.com/TestFX/Monocle&quot;&gt;&lt;code&gt;TestFX Monocle&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;a href=&quot;https://openjfx.io/openjfx-docs/#modular&quot;&gt;&lt;code&gt;OpenJFX&lt;/code&gt; installation instruction&lt;/a&gt; however also show that both &lt;a href=&quot;https://maven.apache.org/&quot;&gt;&lt;code&gt;Maven&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://gradle.org/&quot;&gt;&lt;code&gt;Gradle&lt;/code&gt;&lt;/a&gt; can be used to download, compile and package non-modular Java applications. So I set out to replicate part of their functionality in &lt;code&gt;Mill&lt;/code&gt; so that you can easily setup your own project that uses JPMS in a non-modular Scala or Java application.&lt;/p&gt; 
&lt;h1&gt;Mill&lt;/h1&gt; 
&lt;p&gt;When I started my journey learning Scala, the reference build tool was (and &lt;a href=&quot;https://docs.scala-lang.org/overviews/scala-book/scala-build-tool-sbt.html&quot;&gt;still is&lt;/a&gt;) &lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;SBT&lt;/a&gt;. There are quite a few build tools out their that can be used to build Scala projects (see references [&lt;a href=&quot;https://medium.com/@ryanmyles_63493/the-best-build-tools-for-scala-language-dafa39f01936&quot;&gt;15&lt;/a&gt;, &lt;a href=&quot;https://jaxenter.com/build-tools-in-scala-144195.html&quot;&gt;18&lt;/a&gt;]). In fact, while researching for this article I also found &lt;a href=&quot;http://sbuild.org/&quot;&gt;SBuild&lt;/a&gt;. I, like many other Scala newbies, found SBT somewhat difficult to use due to it peculiar domain specific language (DSL). I also had trouble trying to quickly customize my small projects. The coding, publishing and use of SBT plugins required too much &lt;em&gt;&quot;ceremony&quot;&lt;/em&gt;. Of course, this is my opinion and your experience with SBT may not be the same, especially with the improvements that were made since version &lt;code&gt;0.13&lt;/code&gt;. The advantages of SBT are: very good documentation and an extensive set of plugins.&lt;/p&gt; 
&lt;p&gt;Some time later, I chanced upon a &lt;a href=&quot;https://www.youtube.com/watch?v=J0DrSaAqPSY&quot;&gt;presentation&lt;/a&gt; by &lt;a href=&quot;https://github.com/cvogt&quot;&gt;Jan Vogt&lt;/a&gt; that described the &lt;a href=&quot;https://github.com/cvogt/cbt&quot;&gt;CBT&lt;/a&gt; build tool. I liked the ideas that he presented - a build tool that was &lt;em&gt;simply&lt;/em&gt; a Scala library that provided build functionality that could be easily extended and adapted. A build specification was nothing more than a Scala script. That led me to look for build tools with a similar philosophy, and I discovered &lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;Mill&lt;/a&gt;. At the time, Mill seemed to be a more promising resource due to its scripting capabilities and the already existing documentation. I decided to investigate it and to date am satisfied with this tool.&lt;/p&gt; 
&lt;h2&gt;Brief history and background&lt;/h2&gt; 
&lt;p&gt;The tool was originally designed, developed and used by &lt;a href=&quot;https://www.lihaoyi.com/&quot;&gt;Li Haoyi&lt;/a&gt; (&lt;a href=&quot;https://github.com/lihaoyi&quot;&gt;Li Haoyi GitHub&apos;s page&lt;/a&gt;). He has developed several other useful open source projects and is well regarded within the Scala community. I would say that currently, circa 2022, the principal maintainer and contributor is &lt;a href=&quot;https://github.com/lefou&quot;&gt;Tobias Roeser&lt;/a&gt;. This is not surprising, since he has also worked on &lt;a href=&quot;http://sbuild.org/&quot;&gt;Sbuild&lt;/a&gt;. Besides other work, he has also additional Mill related projects such as &lt;a href=&quot;https://github.com/lefou/millw&quot;&gt;MillW&lt;/a&gt; and &lt;a href=&quot;https://github.com/lefou/mill-integrationtest&quot;&gt;Mill-IntegrationTest&lt;/a&gt;. The former, I find useful because it allows Windows users to use Mill without prior installation (as is the case with Linux) and, in several occasions, allowed the use of snapshot versions that the &lt;em&gt;original&lt;/em&gt; Mill script failed to do. The latter is an &quot;integration test plugin for Mill plugins&quot; which allows anyone contemplating reusing and distributing their Mill scripts, to test them adequately. I tinkered with this some time ago to see how it works.&lt;/p&gt; 
&lt;p&gt;There are enough tutorials and documentation to get you up and running in no time. You can find an &lt;a href=&quot;https://www.lihaoyi.com/post/MillBetterScalaBuilds.html&quot;&gt;early introductory text&lt;/a&gt; from Li Haoyi, which is still relevant. He also has video presentations (for example see &lt;a href=&quot;https://www.youtube.com/watch?v=j6uThGxx-18&quot;&gt;(26)&lt;/a&gt;) and a &lt;a href=&quot;https://www.handsonscala.com/&quot;&gt;book on Scala&lt;/a&gt; that describes how to setup and take advantage of the Scala ecosystem (disclaimer - I have not read it). And of course, with Tobias&apos;s updates, the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;official documentation&lt;/a&gt; is an indispensable resource.&lt;/p&gt; 
&lt;p&gt;Mill consists of three main components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Scala scripting] engine (&lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&lt;/a&gt;). This is another of Li Haoyi&apos;s &lt;a href=&quot;https://github.com/com-lihaoyi/Ammonite&quot;&gt;open source project&lt;/a&gt;. For a brief introduction on its scripting capabilities see &lt;a href=&quot;https://www.baeldung.com/scala/ammonite-scripting&quot;&gt;(30)&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;A dependency resolver and artifact manager. Mill uses &lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier (Pure Scala Artifact Fetching)&lt;/a&gt; as its backend. This &lt;a href=&quot;https://github.com/coursier/coursier&quot;&gt;open source&lt;/a&gt; project is a marvel in and of itself that also allows anyone to download, install and execute publicly available Java virtual machine (JVM) based applications and tools (&lt;a href=&quot;https://github.com/coursier/setup-action&quot;&gt;including&lt;/a&gt; Java, Scala and build tools such as SBT);&lt;/li&gt; 
 &lt;li&gt;Build utilities that allows one to implement and execute build tasks, define dependencies among tasks and automatically cache and execute those tasks when strictly necessary. This is Mill&apos;s core per se and is provided as a set of Scala 2 classes that can be extended as required to fit your every need.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Before we move onto describing Mill and how it is used, it is important to describe what the Ammonite scripting engine can do. Note that Ammonite also provides an interactive (Read Evaluate and Print Loop) REPL, but we solely focus on its scripting capabilities. In essence Ammonite allows you to code and execute Scala 2 applications as if you are executing a REPL. All you need to do is install Ammonite (&lt;code&gt;amm&lt;/code&gt;) and execute the script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ amm MyScript.sc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ammonite will compile and execute that code for you. As with the standard Scala installation, Ammonite also allows you to import from the Scala standard library and use those classes and object you need. Here is an example copied verbatim from &lt;a href=&quot;https://ammonite.io/#ScriptFiles&quot;&gt;Ammonite&apos;s documentation&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;// MyScript.sc
// print banner
println(&quot;Hello World!!&quot;)

// common imports
import sys.process._
import collection.mutable

// common initialization code
val x = 123
println(&quot;x is &quot; + 123)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here is the output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;Hello World!!
x is 123
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;What is even more interesting is that we are not limited do the Scala standard library. We can use &lt;a href=&quot;https://ammonite.io/#MagicImports&quot;&gt;magic import&lt;/a&gt; instructions to &lt;a href=&quot;https://ammonite.io/#ScriptImports&quot;&gt;import&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Other &lt;a href=&quot;https://ammonite.io/#OtherScripts&quot;&gt;Ammonite script files&lt;/a&gt; (&lt;a href=&quot;https://ammonite.io/#import$file&quot;&gt;&lt;code&gt;import$file&lt;/code&gt;&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;Any publicly available &lt;a href=&quot;https://ammonite.io/#IvyDependencies&quot;&gt;artifacts&lt;/a&gt; from Maven or &lt;a href=&quot;https://ant.apache.org/ivy/history/latest-milestone/concept.html&quot;&gt;Ivy&lt;/a&gt; repositories (&lt;a href=&quot;https://ammonite.io/#import$ivy&quot;&gt;&lt;code&gt;import$ivy&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Ammonite will take care of downloading, caching, compiling and executing your script. You can organize the various script to any depth and complexity you require. Ammonite provides many other goodies we will not take advantage of, which include for example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Staging the imports during script runtime, so you only download what is needed;&lt;/li&gt; 
 &lt;li&gt;Having and using multiple entry point (main function);&lt;/li&gt; 
 &lt;li&gt;Defining and using command line arguments defined as main function parameters (automatically parsed and converted);&lt;/li&gt; 
 &lt;li&gt;Documenting the entry point parameters that are automatically shown in the usage message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In essence, the Mill entry point is an Ammonite script named &lt;code&gt;build.sc&lt;/code&gt;. You can use all of the above capabilities to your advantage. In addition to this, Mill provides &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/External_References.html&quot;&gt;bundled&lt;/a&gt; and libraries that will allow you to quickly and easily set up your Java and Scala projects.&lt;/p&gt; 
&lt;h1&gt;Basic Scala build&lt;/h1&gt; 
&lt;p&gt;I now describe how Mill is used to set up the &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;example javaFXMill project&lt;/a&gt;. For those of you that are new to Mill, I will provide ample information for you to understand and follow along with no problems. You will then be able to create your own projects using this script as a template and use the Mill command line to build and execute your project. Note that you can start your own project with a giter8 template using, for example, the &lt;a href=&quot;https://github.com/scalameta/mill-scala-seed.g8&quot;&gt;Mill Scala Seed&lt;/a&gt; project. For those that usually work with SBT, be warned that the directory structure is not the same. However, Mill does provide a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_sbt_compatible_modules&quot;&gt;compatibility module&lt;/a&gt;, if you wish to maintain that structure.&lt;/p&gt; 
&lt;p&gt;The javaFXMill project root contains both the &lt;code&gt;mill&lt;/code&gt; binary and the &lt;code&gt;build.sc&lt;/code&gt; script. All build paths are relative to this build script. I have also provided a &lt;code&gt;.mill-version&lt;/code&gt; configuration file that indicates the version of Mill to be used. The first time you run &lt;code&gt;mill&lt;/code&gt; it will check if the correct version of the Mill binary is available. If not, it first downloads the correct version and then delegates to this version the desired command. To check the version you can execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you should get an output similar to this:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;Mill Build Tool version 0.10.2
Java version: 11.0.14.1, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: en_US, platform encoding: UTF-8
OS name: &quot;Linux&quot;, version: 5.13.0-39-generic, arch: amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;At the start of the &lt;code&gt;build.sc&lt;/code&gt; script we have the required imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;import mill._
import mill.api.Loose
import mill.define.{Target, Task}
import scalalib._
import coursier.core.Resolution
import java.io.File
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We are only using Mill&apos;s bundled libraries, so no need to use Ammonite&apos;s Ivy magic import command. Note that the Coursier API is also available to use if required.&lt;/p&gt; 
&lt;p&gt;The project consist of the following 3 modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;javafx&lt;/code&gt;: an example of compiling and running a &lt;strong&gt;Java&lt;/strong&gt; based OpenJFX application using automated dependency management;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;manage&lt;/code&gt;: an example of compiling and running a &lt;strong&gt;Scala&lt;/strong&gt; 2/3 bases OpenJFX application using &lt;strong&gt;automated&lt;/strong&gt; dependency management;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unmanage&lt;/code&gt;: an example of compiling and running a &lt;strong&gt;Scala&lt;/strong&gt; 2/3 bases OpenJFX application using &lt;strong&gt;manual&lt;/strong&gt; dependency management.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In Mill each module represents a compilation unit that is defined by a core &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Modules.html&quot;&gt;Mill object&lt;/a&gt;. A compilation unit is defined by extending one or more Mill objects in the build script. The name of the script&apos;s object is the name of both the compilation unit and the directory of its sources. Each object assumes a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html&quot;&gt;common layout&lt;/a&gt; and provides a set of parameters and commands that can be accessed via the &lt;code&gt;mill&lt;/code&gt; command line. Several Mill modules are provided out-of-the-box that support common project types and configurations. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_java_project_with_test_suite&quot;&gt;&lt;code&gt;JavaModule&lt;/code&gt;&lt;/a&gt;: standard Java projects;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_compilation_execution_flags&quot;&gt;&lt;code&gt;ScalaModule&lt;/code&gt;&lt;/a&gt;: standard Scala projects;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_cross_scala_version_modules&quot;&gt;&lt;code&gt;CrossScalaModule&lt;/code&gt;&lt;/a&gt;: Scala projects that target several binary incompatible Scala versions;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_scala_js_modules&quot;&gt;&lt;code&gt;ScalaJSModule&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;https://www.scala-js.org/&quot;&gt;ScalaJS&lt;/a&gt; that allow you to develop front-end Web applications using Scala;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_scala_native_modules&quot;&gt;&lt;code&gt;ScalaNativeModule&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;https://scala-native.readthedocs.io/en/latest/&quot;&gt;Scala native&lt;/a&gt; that targets native applications (&lt;em&gt;&quot;compiled ahead-of-time via LLVM&quot;&lt;/em&gt;);&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_sbt_compatible_modules&quot;&gt;&lt;code&gt;SbtModule&lt;/code&gt;&lt;/a&gt;: supports Scala projects using the SBT layout;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_sbt_compatible_cross_scala_version_modules&quot;&gt;&lt;code&gt;CrossSbtModule&lt;/code&gt;&lt;/a&gt;: same as the &lt;code&gt;CrossScalaModule&lt;/code&gt; but uses the SBT layout;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_publishing&quot;&gt;&lt;code&gt;PublishModule&lt;/code&gt;&lt;/a&gt;: is a module that can be used as a &lt;em&gt;&quot;mixin&quot;&lt;/em&gt; to provide commands for publishing the module as a Maven artifact;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_custom_modules&quot;&gt;Custom &lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;: allows us for example to organize the modules in a hierarchical fashion;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Modules.html#_external_modules&quot;&gt;&lt;code&gt;ExternalModules&lt;/code&gt;&lt;/a&gt;: Modules which are shared between several builds;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I urge those new to Mill, to later take a look at its extensive and detailed documentation. It provides additional information and usage examples that include among others:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Defining and using common configurations;&lt;/li&gt; 
 &lt;li&gt;Defining and using global configurations (for example to publish artifacts);&lt;/li&gt; 
 &lt;li&gt;Using Scala compiler plugins;&lt;/li&gt; 
 &lt;li&gt;Using the &lt;code&gt;ScalafmtModule&lt;/code&gt; to automatically format your code;&lt;/li&gt; 
 &lt;li&gt;Defining a default main class;&lt;/li&gt; 
 &lt;li&gt;Using &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Modules.html#_foreign_modules&quot;&gt;foreign Modules&lt;/a&gt;, which allow build scripts to load other Mill projects from external folders using Ammonite’s &lt;code&gt;$file&lt;/code&gt; magic import.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Contrib_Plugins.html&quot;&gt;Contributing&lt;/a&gt; to and &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Thirdparty_Plugins.html&quot;&gt;using&lt;/a&gt; third party plugins;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of Mill&apos;s modules have a common set of variables and methods that represent for example JVM compilation flags, JVM fork flags, environment variables and Mill compilation and execution &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Tasks.html&quot;&gt;tasks&lt;/a&gt;. Each Mill module will also have additional variables and methods specific to its functionality. To define a compilation module in the build script, we need only extend the appropriate Mill module objects and override their methods with the functionality we require. So for the &lt;code&gt;managed&lt;/code&gt; compilation module we have:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;val ScalaVersion      = &quot;3.1.1&quot;
val javaFXVersion     = &quot;16&quot;
val mUnitVersion      = &quot;1.0.0-M3&quot;
val controlsFXVersion = &quot;11.1.0&quot;


object managed extends OpenJFX with ScalaModule {
  override def scalaVersion = T{ ScalaVersion }

  override def mainClass: T[Option[String]] = Some(&quot;helloworld.HelloWorld&quot;)
  override def ivyDeps = Agg(
                              ivy&quot;$CONTROLS&quot;,
                              ivy&quot;$CONTROLSFX&quot;
                             )

    object test extends Tests {
      def ivyDeps = Agg(ivyMunit)
      def testFramework = ivyMunitInterface
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&apos;s that simple. Let&apos;s review the details. First and foremost the &lt;code&gt;managed&lt;/code&gt; compilation unit extends the &lt;code&gt;ScalaModule&lt;/code&gt; because we want to generate a Scala application. Next we override the &lt;code&gt;scalaVersion&lt;/code&gt; task to indicate that we want to use Scala version 3.1.1. Mill will, via Coursier, make sure the correct Scala compiler is available. Next, we set the default main class that Mill will execute with the &lt;code&gt;run&lt;/code&gt; utility command (described in the next section). If only one class or object of the source code has a main method, this configuration is not required because it will use that single main method. However, this compilation unit, has two such methods. So we set the configuration &lt;code&gt;mainClass&lt;/code&gt; task to the desired application&apos;s main class - &lt;code&gt;helloworld.HelloWorld&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Usually we need to import and use libraries. Mill uses &lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt; to manage these libraries. The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_adding_ivy_dependencies&quot;&gt;&lt;code&gt;ivyDeps&lt;/code&gt;&lt;/a&gt; method allows us to list the Maven artifacts that need to be downloaded and automatically included in both the compilation and execution class paths. These artifacts are cached using &lt;a href=&quot;https://ant.apache.org/ivy/&quot;&gt;the Ivy dependency manager&lt;/a&gt; to avoid repeated downloads. Note that the local user&apos;s cache is accessible to any other build tools that use the Ivy or Maven tools. Mill also provides the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_runtime_and_compile_time_dependencies&quot;&gt;&lt;code&gt;runIvyDeps&lt;/code&gt; and &lt;code&gt;compileIvyDeps&lt;/code&gt;&lt;/a&gt; configuration tasks that allow one to override and add libraries specifically to either the compilation or execution phases. For example &lt;code&gt;compileIvyDeps&lt;/code&gt; will not appear in the transitive dependencies used to construct the compiled class path. Mill also allows you to &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_repository_configuration&quot;&gt;configure the repositories&lt;/a&gt; used by Coursier to download the artifacts.&lt;/p&gt; 
&lt;p&gt;The libraries are defined using Mill&apos;s &lt;code&gt;ivy&lt;/code&gt; string interpolation operator. The strings used by the &lt;code&gt;manage&lt;/code&gt; compilation unit are defined in the &lt;code&gt;OpenJFX&lt;/code&gt; module, which extends a &lt;code&gt;JavaModule&lt;/code&gt;. We won&apos;t go into the details just yet, but suffice to say we simply inherit and use these values as shown above. Below is an excerpt of the &lt;code&gt;OpenJFX&lt;/code&gt; module that holds the &lt;code&gt;String&lt;/code&gt; names of the libraries. The naming convention is similar to the &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-naming-conventions.html&quot;&gt;standard convention used by Apache Maven&lt;/a&gt; with slight modifications to support explicit versioning and selector usage. The separator &lt;code&gt;:&lt;/code&gt; is used for Java, &lt;code&gt;::&lt;/code&gt; is used for Scala and &lt;code&gt;:::&lt;/code&gt; is used for cross publishing against full Scala versions. The test libraries can be selected by adding &lt;code&gt;;classifier=tests&lt;/code&gt; to the end of the library name.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;trait OpenJFX extends JavaModule {

  // Modules 

  val BASE_       = s&quot;base&quot;
  val CONTROLS_   = s&quot;controls&quot;
  val FXML_       = s&quot;fxml&quot;
  val GRAPHICS_   = s&quot;graphics&quot;
  val MEDIA_      = s&quot;media&quot;
  val SWING_      = s&quot;swing&quot;
  val WEB_        = s&quot;web&quot;
  val CONTROLSFX_ = s&quot;controlsfx&quot;

  // Extra modules
  // Note that the module name and the library name are not the same
  val controlsFXModule = &quot;org.controlsfx.controls&quot;

  // Module libraries 
  val BASE       = s&quot;org.openjfx:javafx-$BASE_:$javaFXVersion&quot;
  val CONTROLS   = s&quot;org.openjfx:javafx-$CONTROLS_:$javaFXVersion&quot;
  val FXML       = s&quot;org.openjfx:javafx-$FXML_:$javaFXVersion&quot;
  val GRAPHICS   = s&quot;org.openjfx:javafx-$GRAPHICS_:$javaFXVersion&quot;
  val MEDIA      = s&quot;org.openjfx:javafx-$MEDIA_:$javaFXVersion&quot;
  val SWING      = s&quot;org.openjfx:javafx-$SWING_:$javaFXVersion&quot;
  val WEB        = s&quot;org.openjfx:javafx-$WEB_:$javaFXVersion&quot;
  val CONTROLSFX = s&quot;org.controlsfx:$CONTROLSFX_:$controlsFXVersion&quot;

  val ivyMunit = ivy&quot;org.scalameta::munit::$mUnitVersion&quot;
  val ivyMunitInterface = &quot;munit.Framework&quot;
...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We defined an additional compilation unit &lt;code&gt;test&lt;/code&gt; within the &lt;code&gt;managed&lt;/code&gt; module. The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_adding_a_test_suite&quot;&gt;&lt;code&gt;Tests&lt;/code&gt; module&lt;/a&gt; provides specialized functionality required to automate the execution of unit test. The &lt;code&gt;test&lt;/code&gt; module inherits the configuration from its outer module. In particular all of the Ivy artifact dependencies in the &lt;code&gt;managed&lt;/code&gt; module are also added automatically to the &lt;code&gt;test&lt;/code&gt; module. However, we still need to add the configuration related to the unit test library. The script above imports the &lt;a href=&quot;https://scalameta.org/munit/&quot;&gt;MUnit&lt;/a&gt; library using the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;      def ivyDeps = Agg(ivyMunit)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to the library, Mill requires an interface between it and the testing framework. This is the interface that allows it to search for tests, execute them and collect the result to display to the user. The following script&apos;s line adds the appropriate interface required by the MUnit library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;      def testFramework = ivyMunitInterface
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each test library has its own interface. It is therefore necessary to know the name of that interface. In case of MUnit it is &lt;code&gt;&quot;munit.Framework&quot;&lt;/code&gt;. To make things easier, Mill already provides a set of &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_adding_a_test_suite&quot;&gt;predefined test frameworks&lt;/a&gt; that you need only inherit from. So the script code for the &lt;code&gt;test&lt;/code&gt; module could be defined as :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;    object test extends Tests with TestModule.Munit {
      def ivyDeps = Agg(ivyMunit)
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;source code&lt;/a&gt;, as per the layout rules, is the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;├── build.sc
├── javafx
│&amp;nbsp;&amp;nbsp; └── src
│&amp;nbsp;&amp;nbsp;     ├── button
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── ButtonApp.java
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── Main.java
│&amp;nbsp;&amp;nbsp;     └── helloworld
│&amp;nbsp;&amp;nbsp;         └── HelloWorld.java
├── managed
│&amp;nbsp;&amp;nbsp; ├── src
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── button
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ButtonApp.scala
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── Main.scala
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── helloworld
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── HelloWorld.scala
│&amp;nbsp;&amp;nbsp; └── test
│&amp;nbsp;&amp;nbsp;     └── src
│&amp;nbsp;&amp;nbsp;         └── ExampleSpec.scala
├── mill
├── millw
├── millw.bat
├── out
│&amp;nbsp;&amp;nbsp; ├── ...
│&amp;nbsp;&amp;nbsp; ...
├── README.md
└── unmanaged
    ├── src
    │&amp;nbsp;&amp;nbsp; ├── button
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ButtonApp.scala
    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── Main.scala
    │&amp;nbsp;&amp;nbsp; └── helloworld
    │&amp;nbsp;&amp;nbsp;     └── HelloWorld.scala
    └── test
        └── src
            └── ExampleSpec.scala

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For each top level compilation unit, we have a corresponding directory at the root of the project. The name of these directories is the same as the module&apos;s name. For the inner &lt;code&gt;test&lt;/code&gt; modules, these also appear under their parent modules&apos; directories. The structure within the inner modules is the same. You are free to create structures with as many levels as required. I should point out that the outer modules need not contain source code. You can create &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_custom_modules&quot;&gt;hierarchical structures&lt;/a&gt; simply as a means to organize your code.&lt;/p&gt; 
&lt;p&gt;Scala is a &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_JVM_languages&quot;&gt;JVM language&lt;/a&gt; that provides full interoperability with Java. This means that not only do you have access to Java&apos;s ecosystem of libraries, but you can also add your own Java source code to your projects. You need only place the Java source were you place the Scala code. The Scala compiler takes care of the rest. I usually place the Java code in separate packages, but only to ease maintenance and coding. Scala also provides &lt;a href=&quot;https://docs.scala-lang.org/overviews/collections/conversions-between-java-and-scala-collections.html&quot;&gt;collection conversion libraries&lt;/a&gt; to facilitate the use of Java&apos;s collections and &lt;a href=&quot;https://www.scala-lang.org/api/2.13.8/scala/jdk/javaapi/CollectionConverters$.html&quot;&gt;visa versa&lt;/a&gt;. Note that the &lt;a href=&quot;https://dotty.epfl.ch/api/scala/collection/JavaConverters$.html&quot;&gt;older converters&lt;/a&gt; are deprecated, and new &lt;a href=&quot;https://dotty.epfl.ch/api/scala/jdk/CollectionConverters$.html&quot;&gt;Scala 3 versions&lt;/a&gt; of the packages are available. Scala 3&apos;s &lt;a href=&quot;https://docs.scala-lang.org/scala3/book/interacting-with-java.html&quot;&gt;introductory text&lt;/a&gt; has additional details on interoperability. There are some &lt;a href=&quot;https://github.com/travisbrown/scala-java-interop&quot;&gt;issues&lt;/a&gt; that you need to be aware of, but these can be &lt;a href=&quot;https://github.com/sullis/java-scala-interop-examples&quot;&gt;dealt with easily&lt;/a&gt;. Here are the Scala imports for the Java collections:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;import scala.jdk.CollectionConverters.*
import scala.jdk.StreamConverters.*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One note to add on this, is that both Java and Scala also supports the use of &lt;a href=&quot;https://alvinalexander.com/scala/how-to-define-methods-variable-arguments-varargs-fields/&quot;&gt;variable length arguments&lt;/a&gt;. To use these variable argument Scala methods from Java, you need to &lt;a href=&quot;https://alvinalexander.com/scala/how-to-annotate-varargs-methods-in-scala-annotation/&quot;&gt;annotate Scala code&lt;/a&gt;. When using Java&apos;s variable arguments methods from Scala, use Scala&apos;s &lt;a href=&quot;https://www.baeldung.com/scala/underscore&quot;&gt;&lt;code&gt;_*&lt;/code&gt;&lt;/a&gt; operator.&lt;/p&gt; 
&lt;h1&gt;Mill Commands and Utilities&lt;/h1&gt; 
&lt;h2&gt;Resolve&lt;/h2&gt; 
&lt;p&gt;Lets execute the Mill commands for this compilation unit. We start off with the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_command_line_tools&quot;&gt;utility command&lt;/a&gt; that lists all the targets (tasks) that are available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill resolve _
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command above produces the following result:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;Compiling /home/user/VSCodeProjects/javaFXMill/build.sc
[1/1] resolve 
all
clean
inspect
javafx
managed
par
path
plan
resolve
show
showNamed
shutdown
shutdown
unmanaged
version
version
visualize
visualizePlan
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We obtain a list of Mill utilities that are always available irrespective of the compilation units we define. These include for example &lt;code&gt;version&lt;/code&gt;, &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt;. We also see listed our compilation units &lt;code&gt;javafx&lt;/code&gt;, &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;unmanaged&lt;/code&gt; that represent our top level targets. In this case, they are JavaFX applications, but they could, for example, be shared code or libraries. Note that the underscore used in the &lt;code&gt;resolve&lt;/code&gt; above is a wildcard. If we used a double underscore &lt;code&gt;__&lt;/code&gt; the listing would be recursive. If you have cloned the example repository, give it a try.&lt;/p&gt; 
&lt;p&gt;Each object or method we define in the script makes available a number of targets or tasks to the Mill command line. Some of these tasks are inherited from Mill&apos;s module objects that we extend as is or override. We are also free to define and use new tasks in the build script. We can also extend several Mill modules as mixins when they provide very specific tasks such as for &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Common_Project_Layouts.html#_publishing&quot;&gt;publishing artifacts&lt;/a&gt; (&lt;code&gt;PublishModule&lt;/code&gt;) and executing &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_adding_a_test_suite&quot;&gt;unit tests&lt;/a&gt; (&lt;code&gt;Tests&lt;/code&gt;). So lets take a look at what tasks are available in the &lt;code&gt;managed&lt;/code&gt; module by executing the following example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill resolve managed._
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;And here is the output of the `resolve` command:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] resolve 
managed.allIvyDeps
managed.allScalacOptions
managed.allSourceFiles
managed.allSources
managed.ammoniteReplClasspath
managed.ammoniteVersion
managed.artifactId
managed.artifactName
managed.artifactScalaVersion
managed.artifactSuffix
managed.assembly
managed.compile
managed.compileClasspath
managed.compileIvyDeps
managed.console
managed.crossFullScalaVersion
managed.docJar
managed.docResources
managed.docSources
managed.finalMainClass
managed.finalMainClassOpt
managed.forkArgs
managed.forkEnv
managed.forkWorkingDir
managed.generatedSources
managed.ideaCompileOutput
managed.ideaConfigFiles
managed.ideaJavaModuleFacets
managed.ivyDeps
managed.ivyDepsTree
managed.jar
managed.javacOptions
managed.javadocOptions
managed.launcher
managed.localClasspath
managed.mainClass
managed.mandatoryIvyDeps
managed.mandatoryScalacOptions
managed.manifest
managed.platformSuffix
managed.prepareOffline
managed.prependShellScript
managed.repl
managed.resolvedAmmoniteReplIvyDeps
managed.resolvedIvyDeps
managed.resolvedRunIvyDeps
managed.resources
managed.run
managed.runBackground
managed.runClasspath
managed.runIvyDeps
managed.runLocal
managed.runMain
managed.runMainBackground
managed.runMainLocal
managed.runUseArgsFile
managed.scalaCompilerClasspath
managed.scalaDocClasspath
managed.scalaDocOptions
managed.scalaDocPluginClasspath
managed.scalaDocPluginIvyDeps
managed.scalaLibraryIvyDeps
managed.scalaOrganization
managed.scalaVersion
managed.scalacOptions
managed.scalacPluginClasspath
managed.scalacPluginIvyDeps
managed.showModuleDeps
managed.sourceJar
managed.sources
managed.test
managed.transitiveCompileIvyDeps
managed.transitiveIvyDeps
managed.transitiveLocalClasspath
managed.unmanagedClasspath
managed.upstreamAssembly
managed.upstreamAssemblyClasspath
managed.upstreamCompileOutput
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;Run and test&lt;/h2&gt; 
&lt;p&gt;Each of the &lt;code&gt;managed&lt;/code&gt; module&apos;s tasks listed above can be executed via the Mill command. These tasks have dependencies among each other and form an execution graph. For example to run the modules main class (&lt;code&gt;managed.run&lt;/code&gt;), the target &lt;code&gt;managed.compile&lt;/code&gt; must be up-to-date. This means that the &lt;code&gt;managed.compile&lt;/code&gt; task will always be executed before the task &lt;code&gt;managed.run&lt;/code&gt;, if it is not up-to-date. Mill uses caching extensively to avoid repeating tasks needlessly. Lets see what happens when we issue the command to execute the &lt;code&gt;managed&lt;/code&gt; module&apos;s main class:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill managed.run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output, after pressing the GUI button thrice is:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[32/45] managed.compile 
[info] compiling 3 Scala sources to /home/user/VSCodeProjects/javaFXMill/out/managed/compile.dest/classes ...
[info] done compiling
[45/45] managed.run 
Hello Managed Scala World!
Hello Managed Scala World!
Hello Managed Scala World!
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;and the following JavaFX (OpenJFX) GUI should appear:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/javafx/managed_run_screenshot.png#center&quot; alt=&quot;GUI from managed.run&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Mill, by default, executes the application by forking a new JVM. However, one can also execute the application in Mill&apos;s JVM with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill managed.runLocal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and the results should be the same.&lt;/p&gt; 
&lt;p&gt;We can also select the particular &lt;code&gt;main&lt;/code&gt; method to execute. To do this we need only use the &lt;code&gt;runMain&lt;/code&gt; target. The example code has two JavaFX applications. To execute either of these applications use one of these commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.runMain helloworld.HelloWorld
$ ./mill -i managed.runMain button.Main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first command above produces the same result as described for the &lt;code&gt;run&lt;/code&gt; target - the default main class is &lt;code&gt;helloworld.HelloWorld&lt;/code&gt;. The &lt;code&gt;button.Main&lt;/code&gt; application opens this dialogue box:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/javafx/managed_runmain_screenshot.png#center&quot; alt=&quot;Managed runMain Screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To test the code, we must select the unit test framework to use, prepare those unit tests and then execute them. We have already seen how to setup the &lt;a href=&quot;https://scalameta.org/munit/&quot;&gt;MUnit&lt;/a&gt; framework. Here we show how to execute these tests via the Mill Command line. We won&apos;t go into any detail here. The goal is to have the example serve as a template for your future work. The &lt;code&gt;manage&lt;/code&gt; module has the test source code placed in its inner &lt;code&gt;test&lt;/code&gt; module. I have provided a single test example in the following directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;managed/test/src/ExampleSpec.scala
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and here is the sample test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;class ExampleSpec extends munit.FunSuite {

  test(&quot;test_ok&quot;) {
    val obtained = 42
    val expected = 42
    assertEquals(obtained, expected)
  }

  test(&quot;test_fails&quot;) {
    val obtained = 42
    val expected = 43
    assertEquals(obtained, expected)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I have made sure the test will fail so that you can see how easily one can track the failed test to the test&apos;s source code. To execute all of the tests under &lt;code&gt;managed&lt;/code&gt; compilation unit execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This produces the following result:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[60/70] managed.test.compile 
[info] compiling 1 Scala source to /home/user/VSCodeProjects/javaFXMill/out/managed/test/compile.dest/classes ...
[info] done compiling
[70/70] managed.test.test 
managed.ExampleSpec:
  + test_ok 0.008s
==&amp;gt; X managed.ExampleSpec.test_fails  0.02s munit.ComparisonFailException: /home/user/VSCodeProjects/javaFXMill/managed/test/src/ExampleSpec.scala:32
31:    val expected = 43
32:    assertEquals(obtained, expected)
33:  }
values are not the same
=&amp;gt; Obtained
42
=&amp;gt; Diff (- obtained, + expected)
-42
+43
    at munit.FunSuite.assertEquals(FunSuite.scala:11)
    at managed.ExampleSpec.$init$$$anonfun$2(ExampleSpec.scala:32)
1 targets failed
managed.test.test 1 tests failed: 
  managed.ExampleSpec.test_fails managed.ExampleSpec.test_fails
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Mill searches for all tests and executes these MUnit tests. For each unit test suite that is found, MUnit will print out the test suite&apos;s name as follows:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;
  &lt;g&gt;
   managed.ExampleSpec:
  &lt;/g&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For each test in the test suite, the test name is shown in green if it passes:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;
  &lt;g&gt;
   managed.ExampleSpec:
   &lt;g&gt;
    &lt;br&gt; 
    &lt;g&gt;
      + test_ok 0.008s
     &lt;g&gt;&lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;However, if it fails, the test name is shown in red together with the highlighted source code location of the failed test:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;
  &lt;r&gt;
   =&amp;gt; X managed.ExampleSpec.test_fails
  &lt;/r&gt; &lt;gr&gt;
   0.02s
  &lt;/gr&gt; munit.ComparisonFailException: /home/user/VSCodeProjects/javaFXMill/managed/test/src/ExampleSpec.scala:32&lt;br&gt; 31: val expected = 43&lt;br&gt; &lt;bw&gt;
   &lt;gr&gt;
    32: assertEquals(obtained, expected)
   &lt;/gr&gt;
  &lt;/bw&gt;&lt;br&gt; 33: }&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;And when possible, the values used for the test are also shown:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;values are not the same&lt;br&gt; &lt;strong&gt;=&amp;gt; Obtained&lt;/strong&gt;&lt;br&gt; 42&lt;br&gt; &lt;strong&gt;=&amp;gt; Diff&lt;/strong&gt; (&lt;r&gt;
   - obtained
  &lt;/r&gt;, &lt;g&gt;
   + expected
  &lt;/g&gt;)&lt;br&gt; &lt;r&gt;
   -42
  &lt;/r&gt;&lt;br&gt; &lt;g&gt;
   +43
  &lt;/g&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Mill, by default, executes your applications and tests, by forking a new JVM. You can also execute them within the same JVM as Mill:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.test.testLocal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and the results should be the same.&lt;/p&gt; 
&lt;p&gt;We can use as many test suites as we wish. However, repeatedly executing all the tests may take too much time. We can use the following command to select a single test suite. This command executes all of the tests in the &lt;code&gt;managed.ExampleSpec&lt;/code&gt; test suite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.test managed.ExampleSpec.*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The results will be the same as above. It is important to add the wildcard &lt;code&gt;*&lt;/code&gt; otherwise no tests are executed (a &lt;code&gt;**&lt;/code&gt; will also work). Mill will only list the tests that were identified and executed. It will silently fail if no tests were found, for example if you use an incorrect name.&lt;/p&gt; 
&lt;p&gt;We can also select a single test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.test managed.ExampleSpec.test_ok
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or multiple tests using partial matching. The commands below are equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i managed.test &quot;managed.ExampleSpec.test_*&quot;
$ ./mill -i managed.test managed.ExampleSpec.test_*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I have yet to find a way to execute named tests separately. For example, the following line will incorrectly execute all the tests when none should be executed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i &quot;managed.test managed.ExampleSpec.test_okX&quot; + &quot;managed.test managed.ExampleSpec.test_fail&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In fact all tests are executed if we use quotes on the test target (even if we indicate a non-existent test):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i &quot;managed.test managed.ExampleSpec.test_fail&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which seems like an error.&lt;/p&gt; 
&lt;h2&gt;Show and inspect&lt;/h2&gt; 
&lt;p&gt;Mill&apos;s &lt;code&gt;run&lt;/code&gt; command will automatically look for a class or object with a main method and execute it, passing it any arguments you place on the command line. If you analyse the example code, you will see that the module has two main classes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;button.Main&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;helloWorld.HelloWorld&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In these circumstances if the &lt;code&gt;ScalaModule&lt;/code&gt; &lt;code&gt;mainClass&lt;/code&gt; member is not overridden, then the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill managed.run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will result in an error such as this:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;Compiling /home/user/VSCodeProjects/javaFXMill/build.sc
[34/45] managed.finalMainClass 
1 targets failed
managed.finalMainClass Multiple main classes found (button.Main,helloworld.HelloWorld) please explicitly specify which one to use by overriding mainClass
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;I have been using the words &lt;em&gt;&quot;target&quot;&lt;/em&gt; and &lt;em&gt;&quot;task&quot;&lt;/em&gt; interchangeably, but not all tasks are target tasks. The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Tasks.html&quot;&gt;official documentation&lt;/a&gt; contains details on the type of tasks and their various properties. Task types include targets, sources and commands. These tasks properties indicate, for example, whether they are runnable from command line, if their results are cached or if they can take arguments.&lt;/p&gt; 
&lt;p&gt;Metadata is associated with each task. This includes configuration data that is either set by us in the build script, set by defaults, set by the Mill modules or generated during task execution (for example used for caching). This metadata is stored in JSON format and placed in a hidden &lt;code&gt;.out&lt;/code&gt; directory in the project&apos;s root. The structure of the modules within this output directory are the same as those defined in the script file. So, after executing the &lt;code&gt;managed&lt;/code&gt; commands above we can list the contents of this directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ls -1 ./out/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and we can see the metadata of the utility commands and the &lt;code&gt;managed&lt;/code&gt; module:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;clean.json
inspect.json
inspect.log
managed
mill
mill-profile.json
mill-worker-laf+3l
show.json
show.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;And if we look deeper into the &lt;code&gt;managed&lt;/code&gt; module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ls -1 ./out/managed
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;we will see additional metadata related to each of the module&apos;s tasks:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;allScalacOptions.json
allSourceFiles.json
allSources.json
compileClasspath.json
compile.dest
compileIvyDeps.json
compile.json
compile.log
enablePluginScalacOptions.json
finalMainClassOpt.json
forkArgs.json
forkEnv.json
forkEnv.overridden
forkWorkingDir.json
generatedSources.json
ivyDeps.json
javacOptions.json
localClasspath.json
mainClass.json
mandatoryIvyDeps.json
mandatoryIvyDeps.overridden
mandatoryScalacOptions.json
platformSuffix.json
resolvedIvyDeps.json
resolvedRunIvyDeps.json
resources.json
runClasspath.json
runIvyDeps.json
run.json
run.log
runUseArgsFile.json
scalaCompilerClasspath.json
scalacOptions.json
scalacPluginClasspath.json
scalacPluginIvyDeps.json
scalaLibraryIvyDeps.json
scalaOrganization.json
scalaVersion.json
sources.json
transitiveCompileIvyDeps.json
transitiveIvyDeps.json
transitiveLocalClasspath.json
unmanagedClasspath.json
upstreamAssemblyClasspath.json
upstreamCompileOutput.json
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;We could look into those metadata files to learn more about the compiled build script and debug it. However, Mill provides an easier way to query your build scripts. In many cases we want to print out a value of a configuration task. To do this, we use the &lt;code&gt;show&lt;/code&gt; utility command. For example, we can query the &lt;code&gt;managed&lt;/code&gt; compilation module to find out what the main class is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show managed.mainClass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[
  &quot;helloworld.HelloWorld&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;or determine what the Scala version was set to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show managed.scalaVersion
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] show 
&quot;3.1.1&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; command is very useful, for example, when debugging your class path. In particular, it allows us to see what Mill is doing &lt;em&gt;&quot;under the hood&quot;&lt;/em&gt;. Some tasks related to class paths include:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill resolve managed._ | grep -i path
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] resolve 
managed.ammoniteReplClasspath
managed.compileClasspath
managed.localClasspath
managed.runClasspath
managed.scalaCompilerClasspath
managed.scalaDocClasspath
managed.scalaDocPluginClasspath
managed.scalacPluginClasspath
managed.transitiveLocalClasspath
managed.unmanagedClasspath
managed.upstreamAssemblyClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For example, we can see what the compile-time class path is, by executing the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show managed.compileClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;Output:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] show 
[1/1] show &amp;gt; [15/15] managed.compileClasspath 
[
  &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/managed/resources&quot;,
  &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
  &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;,
  &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;managed&lt;/code&gt; module uses Mill&apos;s managed class path functionality. That means all Maven dependencies are automatically pulled in. In addition to this, it also identifies the current operating system and only downloads the required native libraries. The list above shows several libraries that we did not explicitly include in the &lt;code&gt;ivyDeps&lt;/code&gt; configuration task, including the Scala core libraries. If you execute the &lt;code&gt;./mill show managed.runClasspath&lt;/code&gt;, you will also see that it is the same as the &lt;code&gt;compileClasspath&lt;/code&gt; configuration. As I have pointed out you can use the &lt;code&gt;runIvyDeps&lt;/code&gt; and &lt;code&gt;compileIvyDeps&lt;/code&gt; configuration tasks to set up different libraries for the compilation and runtime phases.&lt;/p&gt; 
&lt;p&gt;To explore the transitive libraries&apos; setup by Mill, the following tasks can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill resolve managed._ | grep -i transitive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] resolve 
managed.transitiveCompileIvyDeps
managed.transitiveIvyDeps
managed.transitiveLocalClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In particular, &lt;code&gt;transitiveCompileIvyDeps&lt;/code&gt; is of interest because it indicates which libraries are managed. It also provides additional information, such as the publication classifiers used and the cross-compilation or operating system platform tags that are set. Later we will see how we can manually set up libraries that won&apos;t be managed by Mill.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; compilation unit we define within the &lt;code&gt;managed&lt;/code&gt; compilation unit inherits the setup from this outer object. This means that the dependencies declared in the &lt;code&gt;managed&lt;/code&gt; module will also be ued in the inner module. The &lt;code&gt;test&lt;/code&gt; module uses the &lt;a href=&quot;https://scalameta.org/munit/&quot;&gt;MUnit&lt;/a&gt; framework to execute the unit tests, so this library is only required by the &lt;code&gt;test&lt;/code&gt; compilation unit. To confirm this, execute the following command to list its managed libraries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show managed.test.compileClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;Output:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] show 
[1/1] show &amp;gt; [47/47] managed.test.compileClasspath 
[
  &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/managed/resources&quot;,
  &quot;ref:cd75580a:/home/user/VSCodeProjects/javaFXMill/out/managed/compile.dest/classes&quot;,
  &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/managed/test/resources&quot;,
  &quot;qref:45efcd0d:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/munit_3/1.0.0-M3/munit_3-1.0.0-M3.jar&quot;,
  &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
  &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;qref:0440c0f1:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/junit-interface/1.0.0-M3/junit-interface-1.0.0-M3.jar&quot;,
  &quot;qref:26e95212:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar&quot;,
  &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;,
  &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;qref:9e7bca5a:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar&quot;,
  &quot;qref:6f3db795:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar&quot;,
  &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;The above list shows the MUnit library and its dependencies. These libraries do not appear in the &lt;code&gt;managed&lt;/code&gt; compilation unit, but are available in the &lt;code&gt;test&lt;/code&gt; compilation unit.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; command can also be used to print out the metadata of more than one task. For example the following command can be used to show the metadata of the &lt;code&gt;sources&lt;/code&gt; and &lt;code&gt;compileClasspath&lt;/code&gt; tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show &quot;managed.{sources,compileClasspath}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;Output:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] show 
[1/1] show &amp;gt; [3/16] managed.resources 
[
  [
    &quot;ref:f01978bc:/home/user/VSCodeProjects/javaFXMill/managed/src&quot;
  ],
  [
    &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/managed/resources&quot;,
    &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
    &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
    &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
    &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
    &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
    &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;,
    &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
    &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
    &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
  ]
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;showNamed&lt;/code&gt; utility command is the same as the &lt;code&gt;show&lt;/code&gt; command, but each of the output elements are now indexed with the task name. This comes in handy when you view more than one task at the same time, as is shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill showNamed &quot;managed.{sources,compileClasspath}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; &lt;summary&gt;Output:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] showNamed 
[1/1] showNamed &amp;gt; [3/16] managed.resources 
{
  &quot;managed.sources&quot;: [
    &quot;ref:f01978bc:/home/user/VSCodeProjects/javaFXMill/managed/src&quot;
  ],
  &quot;managed.compileClasspath&quot;: [
    &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/managed/resources&quot;,
    &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
    &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
    &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
    &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
    &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
    &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;,
    &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
    &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
    &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
  ]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_inspect&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; is a more verbose version of the &lt;code&gt;show&lt;/code&gt; command. It is employed in the same way as the &lt;code&gt;show&lt;/code&gt; command and also allows for the use of wildcards. Besides the information that &lt;code&gt;show&lt;/code&gt; provides, &lt;code&gt;inspect&lt;/code&gt; also includes a &lt;a href=&quot;https://ammonite.io/#ScriptUsageDocs&quot;&gt;description of the tasks&lt;/a&gt; and a list of inputs to those tasks. This provides a technique for the fine-grained exploration and debugging of your Mill scripts. Here is an example of the &lt;code&gt;run&lt;/code&gt;target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill inspect managed.run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] inspect 
managed.run(JavaModule.scala:611)
    Runs this module&apos;s code in a subprocess and waits for it to finish

Inputs:
    managed.finalMainClass
    managed.runClasspath
    managed.forkArgs
    managed.forkEnv
    managed.forkWorkingDir
    managed.runUseArgsFile
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Note that surprisingly, we do not see the &lt;code&gt;mainClass&lt;/code&gt; target we set in the &lt;code&gt;managed&lt;/code&gt; task. But if we probe the &lt;code&gt;finalMainClass&lt;/code&gt; further we get:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill inspect managed.finalMainClass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] inspect 
managed.finalMainClass(JavaModule.scala:74)

Inputs:
    managed.finalMainClassOpt
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;And if we look at the &lt;a href=&quot;https://github.com/com-lihaoyi/mill/blob/0.10.2/scalalib/src/JavaModule.scala#L74&quot;&gt;Mill source code&lt;/a&gt; we find the following code snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  /**
   * Allows you to specify an explicit main class to use for the `run` command.
   * If none is specified, the classpath is searched for an appropriate main
   * class to use if one exists
   */
  def mainClass: T[Option[String]] = None

  def finalMainClassOpt: T[Either[String, String]] = T {
    mainClass() match {
      case Some(m) =&amp;gt; Right(m)
      case None =&amp;gt;
        zincWorker.worker().discoverMainClasses(compile()) match {
          case Seq() =&amp;gt; Left(&quot;No main class specified or found&quot;)
          case Seq(main) =&amp;gt; Right(main)
          case mains =&amp;gt;
            Left(
              s&quot;Multiple main classes found (${mains.mkString(&quot;,&quot;)}) &quot; +
                &quot;please explicitly specify which one to use by overriding mainClass&quot;
            )
        }
    }
  }

  def finalMainClass: T[String] = T {
    finalMainClassOpt() match {
      case Right(main) =&amp;gt; Result.Success(main)
      case Left(msg) =&amp;gt; Result.Failure(msg)
    }
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sure enough, the target uses the &lt;code&gt;mainClass&lt;/code&gt; task that we override in our build script. Personally, I prefer the use of the &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDE&lt;/a&gt; to debug some of my more complex Mill scripts. This IDE supports the parsing and analysis of Ammonite scripts, so with a simple &lt;code&gt;ctrl+left button mouse click&lt;/code&gt; we can explore our script efficiently.&lt;/p&gt; 
&lt;h2&gt;Analysing the dependency graph&lt;/h2&gt; 
&lt;p&gt;I have already shown Mill commands that you can use to find dependencies between tasks. Recall that Mill tasks form a directed acyclic graph (DAG) that determines which tasks must be executed and the order in which they must be executed. These dependencies are set by Mill internally, either &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Tasks.html#_task_graphs&quot;&gt;by explicit calls&lt;/a&gt; between tasks that we define ourselves or overriding &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_multiple_modules&quot;&gt;&lt;code&gt;moduleDeps&lt;/code&gt;&lt;/a&gt;, which sets dependencies between whole compilation units.&lt;/p&gt; 
&lt;p&gt;Mill provides the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; task that allows us to explore and check the dependencies between two tasks. The first argument is the final target of the path. The official documentation states that if more than one path exists between two targets, one will be selected arbitrarily. I am assuming that this path is selected deterministically and therefore represents the true execution path of Mill. If we execute the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill path managed.assembly managed.sources
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;we get:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;Compiling /home/user/VSCodeProjects/javaFXMill/build.sc
[1/1] path 
managed.sources
managed.allSources
managed.allSourceFiles
managed.compile
managed.localClasspath
managed.assembly
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can now use the &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;inspect&lt;/code&gt; commands to obtain more information on each of the targets listed above. For example, to identify all the source files used to generate the compilation unit&apos;s Jar library we can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill inspect managed.allSourceFiles
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to check if that target will provide the intended information. From this output, it seems so:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] inspect 
managed.allSourceFiles(ScalaModule.scala:51)
    All individual source files fed into the Zinc compiler.

    All individual source files fed into the Java compiler

Inputs:
    managed.allSources
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To get a list of the actual source files, we use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show managed.allSourceFiles
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and get:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [4/4] managed.allSourceFiles 
[
  &quot;ref:6db4a3f8:/home/user/VSCodeProjects/javaFXMill/managed/src/helloworld/HelloWorld.scala&quot;,
  &quot;ref:2636cdfc:/home/user/VSCodeProjects/javaFXMill/managed/src/button/Main.scala&quot;,
  &quot;ref:9e0369bc:/home/user/VSCodeProjects/javaFXMill/managed/src/button/ButtonApp.scala&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;and indeed those are all the sources we have in our &lt;code&gt;managed&lt;/code&gt; module, which has no other dependencies with any other module. It is important to point out the &lt;code&gt;path&lt;/code&gt; command does not show all the targets that will be executed. For example the &lt;code&gt;managed.compile&lt;/code&gt; target that compiles all the code, has additional dependencies. If we use the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill inspect managed.compile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;we see in the following output that the &lt;code&gt;managed.allSources&lt;/code&gt; target is but one of the inputs of the &lt;code&gt;managed.compile&lt;/code&gt;target:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] inspect 
managed.compile(ScalaModule.scala:195)
    Compiles the current module to generate compiled classfiles/bytecode.
    
    When you override this, you probably also want to override [[bspCompileClassesPath]].

Inputs:
    managed.scalaVersion
    managed.upstreamCompileOutput
    managed.allSourceFiles
    managed.compileClasspath
    managed.javacOptions
    managed.scalaOrganization
    managed.allScalacOptions
    managed.scalaCompilerClasspath
    managed.scalacPluginClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Of particular interest is the &lt;code&gt;managed.upstreamAssemblyClasspath&lt;/code&gt; target that can show us the dependencies used to compile and run the module. The following command can be used to explore those dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill inspect managed.upstreamAssemblyClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which, allows use to further identify and explore targets of interest that are shown in the command&apos;s output below:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] inspect 
managed.upstreamAssemblyClasspath(JavaModule.scala:356)
    All upstream classfiles and resources necessary to build and executable
    assembly, but without this module&apos;s contribution

Inputs:
    managed.transitiveLocalClasspath
    managed.unmanagedClasspath
    managed.resolvedRunIvyDeps
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For example, we can determine all the third party libraries that are required to compile the &lt;code&gt;managed&lt;/code&gt; module using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./mill show managed.resolvedRunIvyDeps
&lt;/code&gt;&lt;/pre&gt; 
&lt;details open&gt; &lt;summary&gt;And those libraries are listed in the output below:&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [10/10] managed.resolvedRunIvyDeps 
[
  &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;qref:5276bca2:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.2/scala3-library_3-3.1.2.jar&quot;,
  &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;qref:815c539d:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.8/scala-library-2.13.8.jar&quot;,
  &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt;
&lt;/details&gt; 
&lt;br&gt;  
&lt;p&gt;I suggest that when you define your own tasks, you use Ammonite&apos;s &lt;a href=&quot;https://ammonite.io/#ScriptUsageDocs&quot;&gt;usage doc annotations&lt;/a&gt; to provide useful information that will be shown by the &lt;code&gt;inspect&lt;/code&gt; command. This will allow users, of your build script, to explore your targets and tasks as if they were standard Mill tasks.&lt;/p&gt; 
&lt;p&gt;Usually we don&apos;t know, or cannot recall, the names of the targets that are dependencies and what order those dependencies should be. For example, if we use the incorrect order, Mill will complain:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;[1/1] path 
1 targets failed
path No path found between managed.sources and managed.assembly
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_plan&quot;&gt;&lt;code&gt;plan&lt;/code&gt;&lt;/a&gt; utility command is useful in that we need only provide the final target. It will determine all the targets and tasks that need to be executed. These are sorted for a dry-run and shown in the order they would have been executed by Mill. The command below can be used to show the (often long) list of tasks that must be executed to produce the desired output of the target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill plan managed.assembly
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Output:&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[1/1] plan 
managed.resources
managed.scalaVersion
mill.scalalib.ZincWorkerModule.classpath
mill.scalalib.ZincWorkerModule.worker
managed.upstreamCompileOutput
managed.sources
managed.generatedSources
managed.allSources
managed.allSourceFiles
managed.transitiveLocalClasspath
managed.unmanagedClasspath
managed.platformSuffix
managed.compileIvyDeps
managed.transitiveCompileIvyDeps
managed.ivyDeps
managed.mandatoryIvyDeps.overridden.mill.scalalib.JavaModule.mandatoryIvyDeps
managed.scalaOrganization
managed.scalaLibraryIvyDeps
managed.mandatoryIvyDeps
managed.transitiveIvyDeps
managed.resolvedIvyDeps
managed.compileClasspath
managed.javacOptions
managed.mandatoryScalacOptions
managed.scalacPluginIvyDeps
managed.enablePluginScalacOptions
managed.scalacOptions
managed.allScalacOptions
managed.scalaCompilerClasspath
managed.scalacPluginClasspath
managed.compile
managed.localClasspath
managed.mainClass
managed.finalMainClassOpt
managed.manifest.overridden.mill.scalalib.JavaModule.manifest
managed.manifest
managed.runIvyDeps
managed.resolvedRunIvyDeps
managed.upstreamAssemblyClasspath
managed.runClasspath
managed.forkArgs
managed.prependShellScript
managed.upstreamAssembly
managed.assembly
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;Note that just because the tasks are listed for the dry-run, does not mean they will actually be executed. If the cached results can be reused, they will serve as input to their dependent tasks. It is also important to point out that not all &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Tasks.html#_task_cheat_sheet&quot;&gt;Mill task types&lt;/a&gt; use caching. In those cases the tasks will always be executed.&lt;/p&gt; 
&lt;p&gt;It would also be interesting to see the unordered set of tasks in a tree-like structure. Mill does not seem to have this, but it does have a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_visualize&quot;&gt;&lt;code&gt;visualize&lt;/code&gt;&lt;/a&gt; utility command. This command determines and plots the dependency DAG of a target. This utility command seems to require &lt;a href=&quot;https://graphviz.org/&quot;&gt;GraphViz&lt;/a&gt; to generate the plots, so before proceeding, install it. I suspect GraphViz is used to produce the &lt;code&gt;png&lt;/code&gt;and &lt;code&gt;svg&lt;/code&gt; plots from the &lt;code&gt;dot&lt;/code&gt; source. For my Linux distribution I used these&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ sudo apt-get install -y graphviz
$ sudo apt-get install -y graphviz-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following instruction:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show visualize managed._
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;shows what files are generated by the &lt;code&gt;visualize&lt;/code&gt; utility command, and it also generates that output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [3/3] visualize 
SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[
  &quot;ref:1c1b3ff8:/home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.txt&quot;,
  &quot;ref:520f50af:/home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.dot&quot;,
  &quot;ref:1cb6580f:/home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.json&quot;,
  &quot;ref:bef28556:/home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.png&quot;,
  &quot;ref:31845709:/home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.svg&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;visualize&lt;/code&gt; command generates both the source description of the DAG (&lt;code&gt;txt&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; files) as well as the graphic output of the DAG (&lt;code&gt;png&lt;/code&gt; and &lt;code&gt;svg&lt;/code&gt; files). You can for example use the following command in the Linux prompt to visualize the DAG:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ shotwell /home/user/VSCodeProjects/javaFXMill/out/visualize.dest/out.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;svg&lt;/code&gt; output is shown below:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/javafx/managed_visualize.svg#center&quot; alt=&quot;./mill show visualize managed._&quot;&gt;&lt;/p&gt; 
&lt;p&gt;There is also a similar &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_visualizeplan&quot;&gt;&lt;code&gt;visualizePlan&lt;/code&gt;&lt;/a&gt; utility command. Unlike &lt;code&gt;visualize&lt;/code&gt;, it shows all targets, irrespective of whether or not they are resolved by the current target query. These non-resolved tasks, which are &lt;strong&gt;not&lt;/strong&gt; generated by &lt;code&gt;visualise&lt;/code&gt;, are shown with a &lt;strong&gt;dotted&lt;/strong&gt; borderlines. The command below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show visualizePlan managed._
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;generates a similar output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [3/3] visualizePlan 
SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[
  &quot;ref:ea2a153b:/home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.txt&quot;,
  &quot;ref:0d064b81:/home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.dot&quot;,
  &quot;ref:280e3f4d:/home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.json&quot;,
  &quot;ref:c47c7d39:/home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.png&quot;,
  &quot;ref:f526ae0b:/home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.svg&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The DAG, shown below, is also very similar but if you look closely, the &lt;em&gt;&quot;dotted&quot;&lt;/em&gt; tasks there, do not appear in the previous DAG:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://hmf.github.io/tech4rd/blog/2020/mill/javafx/managed_visualize_plan.svg#center&quot; alt=&quot;./mill show visualizePlan managed._&quot;&gt;&lt;/p&gt; 
&lt;p&gt;I wanted to give you a sense of the complexity these DAGs can have. This is a very small project but the DAG is already substantial. For medium size projects with dependencies between modules (see &lt;code&gt;moduleDeps&lt;/code&gt; configuration task), the DAGs become very large. So be selective in choosing your query targets.&lt;/p&gt; 
&lt;p&gt;You may also find it easier to view the SVG files, which allow zooming and panning without loss of image quality, unlike the raster images such as &lt;a href=&quot;https://www.w3.org/TR/PNG/&quot;&gt;PNG&lt;/a&gt;. Any web browser should allow you to view these files. In addition to this, I also use &lt;a href=&quot;https://inkscape.org/&quot;&gt;InkScape&lt;/a&gt; to view the files and possibly alter them for publishing. On my Linux distribution I used the following commands to install InkScape:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ sudo add-apt-repository ppa:inkscape.dev/stable
$ sudo apt update
$ sudo apt install inkscape
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to view&lt;sup id=&quot;fnref-4&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; the file, I use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ inkscape /home/user/VSCodeProjects/javaFXMill/out/visualizePlan.dest/out.svg &amp;amp;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this point you should be able to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create your own Scala project&lt;/li&gt; 
 &lt;li&gt;Setup a Mill project that uses Maven artifacts&lt;/li&gt; 
 &lt;li&gt;Compile and run your code&lt;/li&gt; 
 &lt;li&gt;Execute unit tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition to what I have described, two additional commands (&lt;code&gt;managed.assembly&lt;/code&gt; and &lt;code&gt;managed.publish&lt;/code&gt;) may be of interest for &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_deploying_your_code&quot;&gt;deploying your code&lt;/a&gt;. We won&apos;t describe these here. The official documentation provides the necessary details. I will just add that by using the &lt;code&gt;publish&lt;/code&gt; target and making your artifacts available via Maven, allows a user to easily install one of your applications with Coursier.&lt;/p&gt; 
&lt;h2&gt;Using your IDE&lt;/h2&gt; 
&lt;p&gt;One way to develop your system is to alter your code and then execute the Mill targets to compile the source code, run the main method or execute the unit tests. However, it is tedious and cumbersome to switch between your editor and the command line. Mill provides us with the &lt;code&gt;--watch&lt;/code&gt; flag that can be used, for example, as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i --watch managed.compile
$ ./mill -i --watch managed.runMain helloworld.HelloWorld
$ ./mill -i --watch managed.run
$ ./mill -i --watch managed.test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This flag ensures that Mill continuously scans the target&apos;s sources and if any change is detected, the command is automatically executed again. This means that we can edit, compile and execute our code without leaving the editor. It also has the added advantage of avoiding the wasted time of launching a new JVM for Mill.&lt;/p&gt; 
&lt;p&gt;A note on the &lt;code&gt;-i&lt;/code&gt; flag. Without this flag, a Mill server is launched in the background. This means that a JVM is kept warm and execution is faster. However, the use of the Mill server does not seem to work perfectly in Windows. It is therefore advisable that, at least in Windows, the &lt;code&gt;interactive&lt;/code&gt; flag be used so that no background session be started.&lt;/p&gt; 
&lt;p&gt;For those of us that use IDEs, we can still use Mill in a terminal together with the &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-watch&lt;/code&gt; flags. However, native IDE Mill support allows us to take full advantage of all its functionality. &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt; is one of my favourite IDEs. It currently does not support Mill build files. However, Mill provides the following command to generate native IntelliJ projects:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ mill mill.scalalib.GenIdea/idea
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once executed, you can load the project. I have found that this works well with Scala 2 projects. For Scala 3, this is not the case (circa April 2022), although with some &lt;a href=&quot;https://github.com/com-lihaoyi/mill/discussions/1455&quot;&gt;tweaking&lt;/a&gt; you may get it to work. I find that Scala 3&apos;s &lt;em&gt;&quot;braceless&quot;&lt;/em&gt; syntax is not recognized, which makes coding difficult. However, using native IntelliJ projects when created from the IDE itself, does work correctly for Scala 3.&lt;/p&gt; 
&lt;p&gt;Note that every time you add or remove dependencies or change your Mill script, you need to rerun the command above. You can then edit and execute your code and even perform your unit tests within the IDE. IntelliJ also has the advantage that it allows you to code and analyze Ammonite scripts. This is a boon when you are debugging more complex scripts. It also allows you to explore the Mill projects scripts with a simple &lt;code&gt;ctrl+left button click&lt;/code&gt; on the script&apos;s methods and values. Remember that you will need to reload the Mill scripts after every change, as I have already explained. The Mill targets and your custom tasks will not be accessible through the IDE, but you are free to use it simultaneously in another terminal.&lt;/p&gt; 
&lt;p&gt;Note that &lt;a href=&quot;https://scalacenter.github.io/bloop/docs/ides/intellij&quot;&gt;IntelliJ also supports&lt;/a&gt; &lt;a href=&quot;https://scalacenter.github.io/bloop/&quot;&gt;Bloop&lt;/a&gt;. However, Mill is &lt;a href=&quot;https://scalacenter.github.io/bloop/docs/ides/intellij&quot;&gt;not automatically supported&lt;/a&gt;. Integration via Bloop is made available with a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Plugin_Bloop.html&quot;&gt;Mill Bloop plugin&lt;/a&gt;. As with the previous &lt;code&gt;GenIdea&lt;/code&gt; target, you must generate the Bloop configuration files with the following command (&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Plugin_BSP.html&quot;&gt;more information&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./mill --import ivy:com.lihaoyi::mill-contrib-bloop:  mill.contrib.bloop.Bloop/install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This seems to work well. I am able to compile, execute and debug my Scala 3 code with no problems. Scala 3&apos;s &lt;em&gt;&quot;braceless&quot;&lt;/em&gt; syntax is also correctly recognized. Note that after every change to the Mill script, you must manually repeat the above command to export the Bloop build and reload the project in the IntelliJ IDE. Once again, you do not have direct access to Mills targets and commands via the IDE.&lt;/p&gt; 
&lt;p&gt;I also use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt;. Scala 2 and 3 is supported by the &lt;a href=&quot;https://scalameta.org/metals/docs/editors/vscode/&quot;&gt;Metals VSCode plugin&lt;/a&gt; and &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Plugin_Bloop.html&quot;&gt;integration&lt;/a&gt; is done via &lt;a href=&quot;https://scalacenter.github.io/bloop/&quot;&gt;Bloop&lt;/a&gt;. Unlike IntelliJ, their is no need to install Bloop. This is &lt;a href=&quot;https://scalameta.org/metals/docs/build-tools/mill&quot;&gt;done automatically&lt;/a&gt; as soon as the project is opened and the Mill build script is detected. A Bloop server will be launched and the Bloop project files generated and used. Wth this setup you have a fully functioning IDE that can compile and execute your code and unit tests. As with the IntelliJ case, you don&apos;t have direct access to the script&apos;s tasks, but you can (as in IntelliJ&apos;s case) use Mill simultaneously in a separate terminal.&lt;/p&gt; 
&lt;p&gt;With the suggestions I provide here you can now productively work on your Scala 2 and 3 projects. Note that these are suggestions, but you are free to use other editors (such Sublime, Vim, Emacs, Eclipse and some oline IDEs), many of which are also supported by Metals, albeit with varying degrees of maturity. As a final comment, I have found IntelliJ&apos;s IDE perform better in 2 areas: debugging and working with Java code. The latter is important when working with mixed language projects and also projects that require debugging or exploring Java libraries. On the contrary, I find VSCode&apos;s support for editing and proofreading &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; files better.&lt;/p&gt; 
&lt;h2&gt;Searching for library updates&lt;/h2&gt; 
&lt;p&gt;We finish off with a utility command &lt;code&gt;showUpdates&lt;/code&gt; that may be useful for the larger and more mature projects. It &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_search_for_dependency_updates&quot;&gt;looks for dependencies that have been updated&lt;/a&gt; and lists them. Below is the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill mill.scalalib.Dependency/showUpdates
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and for the &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;example project&lt;/a&gt; the output was:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code&gt;[2/2] mill.scalalib.Dependency.showUpdates 
Found 2 dependency update for javafx
  org.openjfx:javafx-controls : 16 -&amp;gt; 17 -&amp;gt; 17.0.0.1 -&amp;gt; 17.0.1 -&amp;gt; 17.0.2 -&amp;gt; 18
  org.controlsfx:controlsfx : 11.1.0 -&amp;gt; 11.1.1
Found 2 dependency update for managed
  org.openjfx:javafx-controls : 16 -&amp;gt; 17 -&amp;gt; 17.0.0.1 -&amp;gt; 17.0.1 -&amp;gt; 17.0.2 -&amp;gt; 18
  org.controlsfx:controlsfx : 11.1.0 -&amp;gt; 11.1.1
No dependency updates found for managed.test
No dependency updates found for unmanaged
No dependency updates found for unmanaged.test
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;I know that the &lt;a href=&quot;https://github.com/scala-steward-org/scala-steward&quot;&gt;Scala Steward&lt;/a&gt; project can also be used to &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Millhtml#_keeping_up_to_date_with_scala_steward&quot;&gt;check for updates and generate pull requests&lt;/a&gt; automatically. I have not experimented with this, but &lt;a href=&quot;https://github.com/scala-steward-org/scala-steward/issues/314&quot;&gt;it works on Mill&lt;/a&gt; &lt;a href=&quot;https://github.com/scala-steward-org/scala-steward/pull/1478&quot;&gt;projects too&lt;/a&gt;. It can also be used to update the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_automatic_mill_updates&quot;&gt;Mill version&lt;/a&gt; itself (in .mill-version file). This may be something of interest to explore and report in the future.&lt;/p&gt; 
&lt;h1&gt;Basic Java build&lt;/h1&gt; 
&lt;p&gt;I have set up an equivalent Java compilation unit named &lt;code&gt;javafx&lt;/code&gt;. Take a look at the &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;source code,&lt;/a&gt; and you will see the same directory structure and the same application code. The differences are that we use only Java source code and the unit tests are not included, so no &lt;code&gt;test&lt;/code&gt; directory is provided. So what does a Java module look like in the build script? Here is the Mill module in that script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;object javafx extends OpenJFX {
  override def mainClass: T[Option[String]] = Some(&quot;helloworld.HelloWorld&quot;)

  override def ivyDeps = Agg(
                              ivy&quot;$CONTROLS&quot;,
                              ivy&quot;$CONTROLSFX&quot;
                             )

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is it. You will notice that the main differences between this module and that of the &lt;code&gt;managed&lt;/code&gt; one, are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The use of the &lt;code&gt;OpenJFX&lt;/code&gt; module which is in essence a &lt;code&gt;JavaModule&lt;/code&gt; (more details on this later);&lt;/li&gt; 
 &lt;li&gt;A missing &lt;code&gt;override def scalaVersion = T{ ScalaVersion }&lt;/code&gt; method&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that Java projects extend the &lt;code&gt;JavaModule&lt;/code&gt; and Scala projects extend the &lt;code&gt;ScalaModule&lt;/code&gt;, but Mill&apos;s &lt;code&gt;ScalaModule&lt;/code&gt; also inherits from the &lt;code&gt;JavaModule&lt;/code&gt;. So all the configuration tasks that are available to the &lt;code&gt;JavaModule&lt;/code&gt; are also available to the &lt;code&gt;ScalaModule&lt;/code&gt;. More concretely, Scala projects may also override JVM related parameters. The inverse, however, is not true. The following is a minimal Java project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;object foo extends JavaModule {
  override def javacOptions = T{ Seq(&quot;-source&quot;, &quot;11&quot;, &quot;-target&quot;, &quot;11&quot;, &quot;-Xlint&quot;) }
  override def forkArgs = Seq(&quot;-Xmx4g&quot;)
  override def forkEnv = Map(&quot;HELLO_MY_ENV_VAR&quot; -&amp;gt; &quot;WORLD&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this is a minimal example of a Scala project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;object foo extends ScalaModule {
  override def scalaVersion = &quot;2.13.8&quot;
  override def scalacOptions = Seq(&quot;-Ydelambdafy:inline&quot;)
  override def ammoniteVersion = &quot;2.4.0&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As was already pointed out, one can inherit from (&lt;em&gt;mix-in&lt;/em&gt;) several Mill modules in order to provide additional functionality (for example the &lt;code&gt;PublishModule&lt;/code&gt; or any of the other &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Contrib_Plugins.html&quot;&gt;third party contributions&lt;/a&gt; that are already available). In the example project I opted to define an &lt;code&gt;OpenJFX&lt;/code&gt; module that inherits from the &lt;code&gt;JavaModule&lt;/code&gt;, because it allows me to override the &lt;code&gt;forkArgs&lt;/code&gt; task. In this way the &lt;code&gt;forkArgs&lt;/code&gt; configuration task can be made available to both Java and Scala projects simply by extending the &lt;code&gt;OpenJFX&lt;/code&gt; module. In the case of Java projects, no more modules are required.&lt;/p&gt; 
&lt;h1&gt;Defining and using JavaFX Dependencies&lt;/h1&gt; 
&lt;p&gt;Both the &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;javafx&lt;/code&gt; modules that were described above inherit and use the &lt;code&gt;OpenJFX&lt;/code&gt; module. The &lt;code&gt;OpenJFX&lt;/code&gt; module is a trait that inherits from &lt;code&gt;JavaModule&lt;/code&gt; and allows me to set up a &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_common_configuration&quot;&gt;common configuration&lt;/a&gt; that can be quickly and easily used to set up either a Java or Scala project. Here is the definition of the Module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;trait OpenJFX extends JavaModule {

  // Modules 

  val BASE_       = s&quot;base&quot;
  val CONTROLS_   = s&quot;controls&quot;
  val FXML_       = s&quot;fxml&quot;
  val GRAPHICS_   = s&quot;graphics&quot;
  val MEDIA_      = s&quot;media&quot;
  val SWING_      = s&quot;swing&quot;
  val WEB_        = s&quot;web&quot;
  val CONTROLSFX_ = s&quot;controlsfx&quot;

  // Extra modules
  // Note that the module name and the library name are not the same
  val controlsFXModule = &quot;org.controlsfx.controls&quot;

  // Module libraries 
  val BASE       = s&quot;org.openjfx:javafx-$BASE_:$javaFXVersion&quot;
  val CONTROLS   = s&quot;org.openjfx:javafx-$CONTROLS_:$javaFXVersion&quot;
  val FXML       = s&quot;org.openjfx:javafx-$FXML_:$javaFXVersion&quot;
  val GRAPHICS   = s&quot;org.openjfx:javafx-$GRAPHICS_:$javaFXVersion&quot;
  val MEDIA      = s&quot;org.openjfx:javafx-$MEDIA_:$javaFXVersion&quot;
  val SWING      = s&quot;org.openjfx:javafx-$SWING_:$javaFXVersion&quot;
  val WEB        = s&quot;org.openjfx:javafx-$WEB_:$javaFXVersion&quot;
  val CONTROLSFX = s&quot;org.controlsfx:$CONTROLSFX_:$controlsFXVersion&quot;

  // OpenFX/JavaFX libraries
  val javaFXModuleNames = Seq(BASE_, CONTROLS_, FXML_, GRAPHICS_, MEDIA_, SWING_, WEB_)

  val ivyMunit = ivy&quot;org.scalameta::munit::$mUnitVersion&quot;
  val ivyMunitInterface = &quot;munit.Framework&quot;

  val pathSeparator= File.pathSeparator

  override def forkArgs: Target[Seq[String]] = T {
    // get the managed libraries
    val allLibs: Loose.Agg[PathRef] = runClasspath()
    // get the OpenJFX and related managed libraries
    val s: Loose.Agg[String] = allLibs.map(_.path.toString())
                                      .filter{
                                         s =&amp;gt;
                                           val t= s.toLowerCase()
                                           t.contains(&quot;javafx&quot;) || t.contains(&quot;controlsfx&quot;)
                                        }

    // Create the JavaFX module names (convention is amenable to automation)
    import scala.util.matching.Regex

    // First get the javaFX only libraries
    val javaFXLibs = raw&quot;.*javafx-(.+?)-.*&quot;.r
    val javaFXModules = s.iterator.map(m =&amp;gt; javaFXLibs.findFirstMatchIn(m).map(_.group(1)) )
                      .toSet
                      .filter(_.isDefined)
                      .map(_.get)
    // Now generate the module names
    val modulesNames = javaFXModules.map( m =&amp;gt; s&quot;javafx.$m&quot;) ++
                          Seq(controlsFXModule) // no standard convention, so add it manually

    // Add to the modules list
    Seq(
        &quot;--module-path&quot;, s.iterator.mkString( pathSeparator ), 
        &quot;--add-modules&quot;, modulesNames.iterator.mkString(&quot;,&quot;),
        &quot;--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls&quot;,
        &quot;--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls&quot;,
        &quot;--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls&quot;
    ) ++
      // add standard parameters
      Seq(&quot;-Dprism.verbose = true&quot;, &quot;-ea&quot;)
  }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The module above consists of two parts. The first, is the set of artifact names of the JavaFX (or OpenJFX) and related libraries. Anyone that needs these libraries can extend this module, reference the required names and use them in the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_adding_ivy_dependencies&quot;&gt;&lt;code&gt;ivyDeps&lt;/code&gt;&lt;/a&gt; definition. Note that we need only add the main library. Mill will determine what other dependencies are also required and download them accordingly. Here is an example we have already seen from the &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;javafx&lt;/code&gt; modules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  override def ivyDeps = Agg(
                              ivy&quot;$CONTROLS&quot;,
                              ivy&quot;$CONTROLSFX&quot;
                             )
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second part overrides the &lt;code&gt;forkArgs&lt;/code&gt; target task, which allows us to set-up the JVM&apos;s command line arguments. We need to add the JPM specific arguments so that the JVM can find and load the necessary modules. We may also need to tweak these parameters to open or export some packages within these modules. To automatically identify and add the modules, the script above first uses &lt;code&gt;runClasspath()&lt;/code&gt; to extract the existing class path, which is determined by &lt;code&gt;ivyDeps&lt;/code&gt; (we cannot use &lt;code&gt;ivyDeps&lt;/code&gt; directly because it does not contain all the resolved dependencies). It then filters this classpath, which contains the full path to all the necessary artifacts, to get the corresponding artifact names (variable &lt;code&gt;s&lt;/code&gt;). In the example above it looks for artifacts that contain the &lt;code&gt;&quot;javafx&quot;&lt;/code&gt; and &lt;code&gt;&quot;controlsfx&quot;&lt;/code&gt; substrings. From these names, it then extracts the OpenJFX module names using regular expressions (&lt;code&gt;javaFXModules&lt;/code&gt; variable) and adds any other module names that are also required (&lt;code&gt;modulesNames&lt;/code&gt; variable).&lt;/p&gt; 
&lt;p&gt;It is important to point out that the naming convention of the modules used by various library authors, is not the same. This means that, in some cases, the module name cannot be inferred and extracted from the artifact&apos;s name. An example is the &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt; library use in the script above. In this case, as shown below, the module name must be defined (first line) and added explicitly (last line):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  val controlsFXModule = &quot;org.controlsfx.controls&quot;
  val modulesNames = javaFXModules.map( m =&amp;gt; s&quot;javafx.$m&quot;) ++
                        Seq(controlsFXModule) // no standard convention, so add it manually
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The next step is to add the module names (&lt;code&gt;--add-modules&lt;/code&gt;) and the paths (&lt;code&gt;--module-path&lt;/code&gt;) of their Jar archives, to the JVM&apos;s command line arguments. The code snippet below shows how the JVM&apos;s command line arguments are constructed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;    Seq(
        &quot;--module-path&quot;, s.iterator.mkString( pathSeparator ), 
        &quot;--add-modules&quot;, modulesNames.iterator.mkString(&quot;,&quot;)
    )
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are setting up a vanilla OpenJFX project, then that should be enough. You can now import the required packages in your Java or Scala source code and execute the application. However, you may get both compile and run time errors and must therefore export a module&apos;s package so that all its public types and members are available to one or more of the other packages. For example, the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;            &quot;--add-exports=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED&quot;,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will let any package (&lt;code&gt;ALL-UNNAMED&lt;/code&gt;) access the &lt;code&gt;javafx.scene.control.skin&lt;/code&gt; package. If you use &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt;, then you not only provide access to the public members of some of the JavaFX packages (&lt;code&gt;--add-exports&lt;/code&gt;), but you must also allow it to have access to private members (usually done via reflection) using &lt;code&gt;--add-exports&lt;/code&gt;. The following is an example of what you may need to use &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;            &quot;--add-exports=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED&quot;,
            &quot;--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls&quot;,
            &quot;--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls&quot;,

            &quot;--add-opens=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls&quot;, 
            &quot;--add-opens=javafx.base/com.sun.javafx.runtime=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.base/com.sun.javafx.collections=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.graphics/com.sun.javafx.css=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls&quot;,
            &quot;--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every Java or Scala library that is added to the project&apos;s dependencies may require additional packages to be exported or opened due to chained dependencies. For example, when using &lt;a href=&quot;https://github.com/GSI-CS-CO/chart-fx&quot;&gt;ChartFX&lt;/a&gt;, execution failed with the error because it also accesses private members of a ControlsFX package:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;java.lang.IllegalAccessError: superclass access check failed: class de.gsi.chart.ui.ProfilerInfoBox$CustomBreadCrumbButton (in module de.gsi.chartfx.chart) cannot access class impl.org.controlsfx.skin.BreadCrumbBarSkin$BreadCrumbButton (in module org.controlsfx.controls) because module org.controlsfx.controls does not export impl.org.controlsfx.skin to module de.gsi.chartfx.chart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case you can add the following JVM arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;            &quot;--add-opens=org.controlsfx.controls/impl.org.controlsfx.skin=de.gsi.chartfx.chart&quot;,
            &quot;--add-opens=javafx.graphics/javafx.scene=de.gsi.chartfx.chart&quot;,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Many of the library authors will provide instructions on what packages need to be exported or opened. Note that any package that is opened (private and public members), will automatically also be exported (only public members).&lt;/p&gt; 
&lt;p&gt;A small note for those of you who need to use Mill to download and use OS native libraries versions, as is the case with JavaFX. To &lt;a href=&quot;https://github.com/com-lihaoyi/mill/pull/775&quot;&gt;correctly download&lt;/a&gt; the OS native artifacts, one must either inherit from &lt;code&gt;CoursierModule&lt;/code&gt; or add the following code snippet to all the modules that use OS native dependencies (not required in the submodules):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  override def resolutionCustomizer: Task[Option[Resolution =&amp;gt; Resolution]] = T.task {
    Some((_: coursier.core.Resolution).withOsInfo(coursier.core.Activation.Os.fromProperties(sys.props.toMap)))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Unmanaged libraries&lt;/h1&gt; 
&lt;p&gt;The use of Maven artifacts and the Ivy cache to pull in and use those required artifacts is essential for the maintenance of a Java and Scala project. But what happens when the required artifact is only available via manual download? How do we add these libraries to the Mill compilation unit? The answer is to override the &lt;code&gt;unmanagedClasspath&lt;/code&gt; task. The following is an example adapted from the &lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Configuring_Mill.html#_unmanaged_jars&quot;&gt;official documentation&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;import mill._, scalalib._

object foo extends ScalaModule {
  def scalaVersion = &quot;3.1.1&quot;
  def unmanagedClasspath = T {
    if (!os.exists(millSourcePath / &quot;lib&quot;)) Agg()
    else Agg.from(os.list(millSourcePath / &quot;lib&quot;).map(PathRef(_)))
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the script above, we add a &lt;code&gt;lib&lt;/code&gt; directory to the root path of the &lt;code&gt;foo&lt;/code&gt; module. You can download and place the required Jar archives into this directory. The next step, is to configure Mill to include these files in the class path used to compile and execute the module. To do this, we need only override the &lt;code&gt;unmanagedClasspath&lt;/code&gt; configuration task. The goal for this task is to return the list of paths to libraries in the &lt;code&gt;lib&lt;/code&gt; directory. Once the &lt;code&gt;unmanagedClasspath&lt;/code&gt; has been defined, it will be included together with the managed libraries. The path of the unmanaged libraries are also automatically propagated to any of the dependent modules and submodules.&lt;/p&gt; 
&lt;p&gt;To construct the path, we first need to determine the &lt;code&gt;foo&lt;/code&gt; module&apos;s root path. The &lt;code&gt;Module&lt;/code&gt;&apos;s variable &lt;a href=&quot;https://stackoverflow.com/questions/68990936/what-is-the-preferred-way-in-mill-to-point-to-the-directory-where-build-sc-file&quot;&gt;&lt;code&gt;millSourcePath&lt;/code&gt;&lt;/a&gt; points to the module&apos;s root (not the project&apos;s root). Note that this variable is not a (configuration) task and therefore cannot be listed via Mill&apos;s &lt;code&gt;resolve&lt;/code&gt; utility task, nor can it be viewed using the Mill&apos;s &lt;code&gt;show&lt;/code&gt; utility task. Mill already includes the &lt;a href=&quot;https://github.com/com-lihaoyi/os-lib&quot;&gt;OS-Lib&lt;/a&gt; library, and we use it to first check if a &lt;code&gt;foo/lib&lt;/code&gt; directory exists. If it does not, we simply return an empty list of paths. If it does, we collect the list of paths to all the files contained in the &lt;code&gt;foo/lib&lt;/code&gt; directory and returns these. Note that by default the &lt;code&gt;unmanagedClasspath&lt;/code&gt; is empty, but you can always use &lt;code&gt;super.unmanagedClasspath()&lt;/code&gt; to access a parents&apos; existing list of artifacts if these need to be complemented or changed. Once we have overridden this task, we can use the &lt;code&gt;show&lt;/code&gt; command, as exemplified below, to check that the path is set up correctly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./mill show foo.unmanagedClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We are free to place the libraries wherever we want. You could, for example, place the libraries in the project&apos;s root. In this case the following code snippet can be used to obtain the project&apos;s root path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;val baseDir = build.millSourcePath
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and by substituting &lt;code&gt;millSourcePath&lt;/code&gt; with &lt;code&gt;baseDir&lt;/code&gt; in the code snippet above, we can place and reference a set of libraries at the project level.&lt;/p&gt; 
&lt;p&gt;You can use always include the &lt;code&gt;unmanagedClasspath&lt;/code&gt; task defined above in any project, irrespective of whether or not unmanaged libraries are required. Because it checks for the &lt;code&gt;lib&lt;/code&gt; directory before attempting to load the artifacts, you need only create and populate the directory if and when it is required.&lt;/p&gt; 
&lt;p&gt;Manually downloading the libraries is not your only option. In the &lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;example project&lt;/a&gt; I have also included an &lt;code&gt;unmanaged&lt;/code&gt; module that is defined as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;object unmanaged extends OpenJFX with ScalaModule {
  def scalaVersion = T{ ScalaVersion }

  override def mainClass: T[Option[String]] = Some(&quot;helloworld.HelloWorld&quot;)

  override def unmanagedClasspath: Target[Loose.Agg[PathRef]] = T{
    import coursier._
    import coursier.parse.DependencyParser

    val controlsFXModule = dep&quot;org.controlsfx:controlsfx:11.1.0&quot;

    // Generate the dependencies
    val javaFXModules = javaFXModuleNames.map(
      m =&amp;gt; Dependency(Module(org&quot;org.openjfx&quot;, ModuleName(s&quot;javafx-$m&quot;)), javaFXVersion)
    ) ++
      Seq(controlsFXModule)

    // Check if the libraries exist and download if they don&apos;t
    val files = Fetch().addDependencies(javaFXModules: _*).run()

    // Return the list f libraries
    val pathRefs = files.map(f =&amp;gt; PathRef(os.Path(f)))
    Agg(pathRefs : _*)
  }

    object test extends Tests {
      def ivyDeps = Agg(ivyMunit)
      def testFramework = ivyMunitInterface
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The module definition above is the same as the &lt;code&gt;managed&lt;/code&gt; module, but the &lt;code&gt;unmanagedClasspath&lt;/code&gt; task is used instead of the &lt;code&gt;ivyDeps&lt;/code&gt; task. For demonstration purposes I used &lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt; to download all the required libraries. We could have used any other means such as an &lt;code&gt;FTP&lt;/code&gt; of &lt;code&gt;HTTP&lt;/code&gt; client to download the libraries. However, Coursier allows us to automatically download all the required dependencies and cache them for future use, using the Ivy dependency manager. Using Coursier will also make it easier to describe the next example (target &lt;code&gt;allOS&lt;/code&gt;). We can now use the following command to show exactly what artifacts have been downloaded and where they have been placed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show unmanaged.unmanagedClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;List of unmanaged libraries&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [1/1] unmanaged.unmanagedClasspath 
[
  &quot;ref:ddef4c4b:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;ref:d150f068:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;ref:c6d45ef4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16.jar&quot;,
  &quot;ref:19dc6267:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;ref:e42f9c9c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16.jar&quot;,
  &quot;ref:945374cf:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16.jar&quot;,
  &quot;ref:406062e3:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16.jar&quot;,
  &quot;ref:5fa6aaf7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;ref:3df5678c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;,
  &quot;ref:0bc3d56f:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;ref:2b46ca60:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16-linux.jar&quot;,
  &quot;ref:e0c0bcbc:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;ref:c7238720:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16-linux.jar&quot;,
  &quot;ref:a9caa1a4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16-linux.jar&quot;,
  &quot;ref:8b0370d7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16-linux.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;It is important to point out that this technique can be used in conjunction with the managed libraries by defining both the &lt;code&gt;ivyDeps&lt;/code&gt; and &lt;code&gt;unmanagedClasspath&lt;/code&gt; tasks. Mill will take care of combining the required libraries and construct the correct class paths. In fact, the module above still requires Scala&apos;s core libraries to compile and run. The following Mill commands shows that those libraries are indeed added to the class path (in this example both runtime and compile class paths are the same, which is not always true):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill show unmanaged.runClasspath
$ ./mill show unmanaged.compileClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;List of managed and unmanaged libraries&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [36/36] unmanaged.runClasspath 
[
  &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/unmanaged/resources&quot;,
  &quot;ref:04bff8b4:/home/user/VSCodeProjects/javaFXMill/out/unmanaged/compile.dest/classes&quot;,
  &quot;ref:ddef4c4b:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;ref:d150f068:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;ref:c6d45ef4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16.jar&quot;,
  &quot;ref:19dc6267:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;ref:e42f9c9c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16.jar&quot;,
  &quot;ref:945374cf:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16.jar&quot;,
  &quot;ref:406062e3:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16.jar&quot;,
  &quot;ref:5fa6aaf7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;ref:3df5678c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;,
  &quot;ref:0bc3d56f:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;ref:2b46ca60:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16-linux.jar&quot;,
  &quot;ref:e0c0bcbc:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;ref:c7238720:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16-linux.jar&quot;,
  &quot;ref:a9caa1a4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16-linux.jar&quot;,
  &quot;ref:8b0370d7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16-linux.jar&quot;,
  &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
  &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;As was previously mentioned, to be able to provide a &lt;em&gt;&quot;fat&quot;&lt;/em&gt; JAR that allows us to create a truly cross-platform application, we need to download native binary libraries for the supported operating systems. The attentive reader will have noticed that I have run these examples in Linux because the Linux binary native libraries are included in the class path (in the list above, the files names have the &lt;code&gt;-linux&lt;/code&gt; substring in their names). I have created an &lt;code&gt;allOS&lt;/code&gt; module that allows a developer to define the OS systems that should be supported and download their OS specific dependencies automatically. To show how to download these native operating system dependencies via &lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier&lt;/a&gt;, I have the target &lt;code&gt;osClasspath&lt;/code&gt; that one can execute as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i show allOS.osClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;And we get the following list of URLs for the artifacts:&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;[1/1] show 
[1/1] show &amp;gt; [1/1] allOS.osClasspath 
[
  &quot;Current = Os(Some(amd64), HashSet(unix), Some(linux), Some(5.13.0-40-generic))&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-mac.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-fxml/16/javafx-fxml-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16-linux.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-swing/16/javafx-swing-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-media/16/javafx-media-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-web/16/javafx-web-16-win.jar&quot;,
  &quot;https://repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-win.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;In the list above we can see the artifacts for both Windows (&lt;code&gt;win&lt;/code&gt;) and MacOS (&apos;mac`). Here is the code snippet of the target&apos;s Mill script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  def osClasspath: Target[Seq[String]] = T{
    implicit val ec: scala.concurrent.ExecutionContext = scala.concurrent.ExecutionContext.global

    // Extra OpenFX library
    val controlsFXModule = dep&quot;org.controlsfx:controlsfx:11.1.0&quot;

    val current = coursier.core.Activation.Os.fromProperties(sys.props.toMap)
    // Generate the dependencies
    val javaFXModules = javaFXModuleNames.map(
      m =&amp;gt; Dependency(Module(org&quot;org.openjfx&quot;, ModuleName(s&quot;javafx-$m&quot;)), javaFXVersion)
    ) ++
      Seq(controlsFXModule)

    val deps = javaFXModules
    val resWin: Future[Resolution] =
                          resolveWin
                              .addDependencies(deps: _*)
                              .future()
    val resMac: Future[Resolution] =
                          resolveMac
                              .addDependencies(deps: _*)
                              .future()
   val resLinux: Future[Resolution] =
                          resolveLinux
                            .addDependencies(deps: _*)
                            .future()

   val res = Future.sequence( List(resWin, resMac, resLinux) )
   val result = Await.result(res, Duration.Inf)
   val urls = result.map(_.dependencyArtifacts().map(_._3.url).toSet).reduceLeft((acc,s) =&amp;gt; acc ++ s)

   s&quot;Current = $current&quot; :: urls.toList
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the code above, I first obtain the host operating system&apos;s (OS) name that is stored in the &lt;code&gt;current&lt;/code&gt; variable. This is placed at the start of the target&apos;s output and helps a developer debug the Mill scripts. In the example above we see that the script was executed in the Linux OS running on an AMD64 architecture. We then use the full list of JavaFX module names &lt;code&gt;javaFXModuleNames&lt;/code&gt; to generate the dependency definitions of these modules. Note that we also add the &lt;code&gt;controlsFXModule&lt;/code&gt; to the final list of modules. We really only needed to use this module because Coursier automatically determines what javaFX libraries are strictly necessary. We then create 3 Coursier &lt;code&gt;Resolution&lt;/code&gt; objects (&lt;code&gt;resWin&lt;/code&gt;, &lt;code&gt;resMac&lt;/code&gt; and &lt;code&gt;resLinux&lt;/code&gt;) to load the same dependencies (&lt;code&gt;dep&lt;/code&gt;), each for a different OS (Windows, MacOS and Linux respectively). We initialize the asynchronous downloads (via Scala &lt;code&gt;Future&lt;/code&gt;) of the dependencies for each OS using the defined resolution object and wait indefinitely for these to finish. After the downloads finish, we extract the resolved URLs and return those as the task&apos;s results. From the output above we see that we have the native OS libraries for Windows, MacOS and Linux.&lt;/p&gt; 
&lt;p&gt;The code snippet below shows how we define a Coursier &lt;code&gt;Resolution&lt;/code&gt; object for Windows (see the example code for the Linux and Windows cases):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  val winX64 =Activation.Os(
    Some(&quot;x86_64&quot;),
    Set(&quot;windows&quot;),
    Some(&quot;windows&quot;),
    None
  )

  val resolveWin = Resolve()
    .withResolutionParams(
      ResolutionParams()
        .withOsInfo {
          winX64
        }
    )
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To generate a &lt;em&gt;&quot;fat&quot;&lt;/em&gt; Jar we need only change the &lt;code&gt;unmanagedClasspath&lt;/code&gt; task to download the native OS libraries. The artifacts for the host OS can be downloaded via the standard &lt;code&gt;ivyDeps&lt;/code&gt; method shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  override def ivyDeps = Agg( ivy&quot;$CONTROLS&quot;, ivy&quot;$CONTROLSFX&quot; )
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means that we need only set-up the Coursier &lt;code&gt;Fetch&lt;/code&gt; objects to use the &lt;code&gt;ResolutionParams&lt;/code&gt; for the missing &lt;code&gt;Activation.OS&lt;/code&gt; objects. The code snippet below shows the &lt;code&gt;unmanagedClasspath&lt;/code&gt; task.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  override def unmanagedClasspath: Target[Loose.Agg[PathRef]] = T{

    import coursier.params.ResolutionParams

    // Get the name of the current (host) OS
    val osName = coursier.core.Activation.Os.fromProperties(sys.props.toMap).name.get

    // Extra OpenFX library
    // Coursier: only a single String literal is allowed here, so cannot decouple version
    val controlsFXModule = dep&quot;org.controlsfx:controlsfx:11.1.0&quot;

    // Generate the dependencies
    val javaFXModuleNames = Seq( CONTROLS_ )
    val javaFXModules = javaFXModuleNames.map(
      m =&amp;gt; Dependency(Module(org&quot;org.openjfx&quot;, ModuleName(s&quot;javafx-$m&quot;)), javaFXVersion)
    ) ++
      Seq(controlsFXModule)

    // Setup resolution Windows downloads (if not current OS)
    val filesWin =
      if (osName != winX64.name.get) {
        Fetch()
        .addDependencies(javaFXModules: _*)
        .withResolutionParams( ResolutionParams().withOsInfo{ winX64 })
        .addArtifactTypes(Type.all)
        .run()
        .toSet
      } else Set[File]()

    // Setup resolution MacOS downloads (if not current OS)
    val filesMac =
      if (osName != macOSx64.name.get) {
        Fetch()
        .addDependencies(javaFXModules: _*)
        .withResolutionParams(ResolutionParams().withOsInfo { macOSx64 })
        .addArtifactTypes(Type.all)
        .run()
        .toSet
      } else Set[File]()

    // Setup resolution Linux downloads (if not current OS)
    val filesLinux =
      if (osName != linuxX64.name.get) {
        Fetch()
        .addDependencies(javaFXModules: _*)
        .withResolutionParams(ResolutionParams().withOsInfo { linuxX64 })
        .addArtifactTypes(Type.all)
        .run()
        .toSet
      } else Set[File]()

    val allOS = filesWin ++ filesMac ++ filesLinux
    val files = allOS.toSeq

    // Return the list of libraries
    val pathRefs = files.map(f =&amp;gt; PathRef(os.Path(f)))
    Agg(pathRefs : _*)
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The target above uses the same list of dependencies as the managed &lt;code&gt;ivyDeps&lt;/code&gt; library. It creates &lt;code&gt;Fetch&lt;/code&gt; objects for the non-host operating systems and synchronously downloads the resolved artifacts. At the end of the method, the lists of all the downloaded artifacts are merged and returned as output. The resolution parameters use the same &lt;code&gt;Activation.OS&lt;/code&gt; that were used in the &lt;code&gt;osClasspath&lt;/code&gt; target, so only Windows, MacOs and Linux are supported. To run the above target execute the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i show allOS.unmanagedClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;The following list of artifacts are downloaded:&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;Compiling /home/user/VSCodeProjects/javaFXMill/build.sc
[1/1] show 
[1/1] show &amp;gt; [1/1] allOS.unmanagedClasspath 
[
  &quot;ref:27b03bb6:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-mac.jar&quot;,
  &quot;ref:9cc4c083:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-mac.jar&quot;,
  &quot;ref:ddef4c4b:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;ref:5fa6aaf7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;ref:19dc6267:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;ref:352e8fdb:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-mac.jar&quot;,
  &quot;ref:b70cffea:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-win.jar&quot;,
  &quot;ref:6087dd8c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-win.jar&quot;,
  &quot;ref:d150f068:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;ref:2ec9c6a2:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-win.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;One can see that, not only are the &lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt; and JavaFX Controls artifacts downloaded, but so are the JavaFX dependencies &lt;code&gt;graphics&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; downloaded. The OS native artifacts for MacOS and Windows are also downloaded (files names that terminate with &lt;code&gt;-mac&lt;/code&gt;and &lt;code&gt;-win&lt;/code&gt;). To see the full list of downloaded artifacts execute the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i show allOS.runClasspath
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; &lt;summary&gt;Full runtime class path:&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;pre&gt;&lt;code&gt;1/1] show &amp;gt; [36/36] allOS.runClasspath 
[
  &quot;ref:c984eca8:/home/user/VSCodeProjects/javaFXMill/allOS/resources&quot;,
  &quot;ref:65a4706e:/home/user/VSCodeProjects/javaFXMill/out/allOS/compile.dest/classes&quot;,
  &quot;ref:27b03bb6:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-mac.jar&quot;,
  &quot;ref:9cc4c083:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-mac.jar&quot;,
  &quot;ref:ddef4c4b:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;ref:5fa6aaf7:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;ref:19dc6267:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;ref:352e8fdb:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-mac.jar&quot;,
  &quot;ref:b70cffea:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-win.jar&quot;,
  &quot;ref:6087dd8c:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-win.jar&quot;,
  &quot;ref:d150f068:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;ref:2ec9c6a2:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-win.jar&quot;,
  &quot;qref:0f4aa102:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16.jar&quot;,
  &quot;qref:347bea21:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/controlsfx/controlsfx/11.1.0/controlsfx-11.1.0.jar&quot;,
  &quot;qref:81c212a8:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.1/scala3-library_3-3.1.1.jar&quot;,
  &quot;qref:d8c3eec4:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/16/javafx-controls-16-linux.jar&quot;,
  &quot;qref:f52f10d0:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16.jar&quot;,
  &quot;qref:4df2d3aa:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.6/scala-library-2.13.6.jar&quot;,
  &quot;qref:a80bfcce:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/16/javafx-graphics-16-linux.jar&quot;,
  &quot;qref:8f336a78:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16.jar&quot;,
  &quot;qref:24e66df9:/home/user/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/16/javafx-base-16-linux.jar&quot;
]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/blockquote&gt;
&lt;/details&gt;  
&lt;p&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;The astute reader will observe that Mill (circa 04-2022), when combining the &lt;code&gt;ivyDeps&lt;/code&gt; and &lt;code&gt;unmanagedClasspath&lt;/code&gt; artifacts, does &lt;strong&gt;not&lt;/strong&gt; remove duplicates. This does not in any way prevent the applications from running correctly, but may result in very large class paths. We could filter the unwanted files at the &lt;code&gt;unmanagedClasspath&lt;/code&gt; target and return only those Jars that contain native OS content. I purposely did not select the OS native artifacts, because the dependency chain may include other Jar files that do not use the same naming convention, or may include different Jars depending on the OS. One way to &lt;em&gt;&quot;solve&quot;&lt;/em&gt; this issue is to filter out duplicates that are resolved from &lt;code&gt;ivyDeps&lt;/code&gt;. To do this we simply use the &lt;code&gt;resolvedIvyDeps&lt;/code&gt; target to download and filter the duplicate files as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;    val deps = resolvedIvyDeps().map(_.path.toIO).iterator.toSet
    val allOS = filesWin ++ filesMac ++ filesLinux -- deps
    val files = allOS.toSeq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that because these targets are cached, the resolution and downloading of files is only executed when necessary, otherwise the cached values are used. One should now be able to execute the applications with the following commands with the class path containing all the dependencies for all operating systems.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ ./mill -i allOS.runMain helloworld.HelloWorld
$ ./mill -i allOS.runMain button.Main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This however will not work. It is necessary to invoke the JVM with the class path that only includes the correct OS native artifacts. If multiple versions exist, the JavaFX application will fail to load. To &lt;em&gt;&quot;solve&quot;&lt;/em&gt; this issue the &lt;code&gt;forkArgs&lt;/code&gt; target of the &lt;code&gt;OpenJFX&lt;/code&gt; module was changed slightly so that only the current host OS artifacts are included in the class path. The following code snippet was added to remove the non-host OS artifacts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-scala&quot;&gt;  // The osAll module downloads these OS native versions of the libraries
  val supported = Set(&quot;mac&quot;, &quot;linux&quot;, &quot;win&quot;)
  // Get the name of the current (host) OS
  val osName = coursier.core.Activation.Os.fromProperties(sys.props.toMap).name.get.toLowerCase
  // Filter for removing incompatible native OS libraries
  // If we have several native libraries for different OS, JavaFX cannot select the correct one
  val tag = osName match {
    case &quot;linux&quot; =&amp;gt; &quot;linux&quot;
    case &quot;mac os x&quot; =&amp;gt; &quot;mac&quot;
    case &quot;windows&quot; =&amp;gt; &quot;win&quot;
  }
  val remove = supported - tag

  def validOS(artifact: String): Boolean = {
    if (supported.exists(s =&amp;gt; artifact.contains(s))) {
      // Not a native OS Jar for this OS
      artifact.contains( tag )
    } else {
      // Not a native OS Jar
      true
    }
  }

  ...

  override def forkArgs: Target[Seq[String]] = T {

    ...

    // Add to the modules list
    val t = Seq(
        &quot;--module-path&quot;, s.filter( validOS ).iterator.mkString( pathSeparator ),
        &quot;--add-modules&quot;, modulesNames.iterator.mkString(&quot;,&quot;), // &quot;javafx.controls,javafx.graphics,javafx.base,org.controlsfx.controls&quot;,
        &quot;--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls&quot;,
        &quot;--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls&quot;,
        &quot;--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls&quot;
    ) ++
      // add standard parameters
      Seq(&quot;-Dprism.verbose = true&quot;, &quot;-ea&quot;)
    t
  }

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the code snippet above, the &lt;code&gt;validOS&lt;/code&gt; method checks that if an artifact is an OS dependent archive, then it is only retained if it is for the current host OS that is running the Mill script. If you will be running these applications without Mill, then you must write your own OS scripts to identify and use the correct class path.&lt;/p&gt; 
&lt;h1&gt;Conclusion&lt;/h1&gt; 
&lt;p&gt;In this article I have endeavoured to provide enough information for anyone to set up and use a project with several pure or mixed Scala and Java project modules using the Mill build tool. I have also focused on the use of Java Module System (JMS) because many libraries are now provided as Java modules, but not all JVM languages, such as Scala, support these natively. I used JavaFX (or OpenFX) as an example because it represents a use-case of modular libraries that requires some care in using. Finally, I have also detailed the use of unmanaged libraries. This allows us to set up projects that require Jar libraries that are not available as Maven artifacts. It also allows us to download and generate a &lt;em&gt;&quot;fat&quot;&lt;/em&gt; Jar that contain native libraries for various operating systems. Such an application can be distributed as a single Jar and run in various operating systems. The example I provide is an OpenFX application that can be executed in several operating systems (MacOS, Windows and Linux). All the source code for this article is available in Github.&lt;/p&gt; 
&lt;p&gt;The Mill build tool has been described in detail. I have included a brief history of this tool and shown how to set up and execute simple projects. I have exemplified many of Mill&apos;s utility commands that allow us to compile and run the applications. I have also demonstrated how to set up and run unit tests using MUnit. Mill also provides a set of utility commands that allow us to inspect, analyse and plot module dependencies, project variables (such as source files and dependencies) and even search for library updates. With this information you are now able to develop, debug and use your own Mill scripts.&lt;/p&gt; 
&lt;p&gt;The use of an IDE is essential for developer productivity. I have shown how Mill can be used in conjunction with an editor or IDE to automate unit testing and compilation. In order to take full advantage of the IDEs, I have also shown how to import your Mill projects into the IntelliJ and VSCode IDEs using Bloop. You should now be able to develop your projects taking full advantage of the IDE.&lt;/p&gt; 
&lt;p&gt;You can use the example project as a template for your Scala or Java OpenFX projects. After cloning or copying the repository, you should be able to run all the examples that were described in this article. If you find any issues or have any suggestions, feel free to open a ticket in Github&apos;s issue tracker.&lt;/p&gt; 
&lt;h1&gt;References&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/corporate/features/understanding-java-9-modules.html&quot;&gt;Understanding Java 9 Modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/java-9-modularity&quot;&gt;A Guide to Java 9 Modularity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jenkov.com/tutorials/java/modules.html&quot;&gt;Jakob Jenkov&apos;s Java Modules tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html&quot;&gt;Scala compatibility with modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/tools/jlink.html&quot;&gt;&lt;code&gt;jlink&lt;/code&gt; tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.ibm.com/tutorials/java-modularity-5/&quot;&gt;Java 9+ modularity: The difficulties and pitfalls of migrating from Java 8 to Java 9+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openjfx.io/openjfx-docs/#modular&quot;&gt;&lt;code&gt;OpenJFX&lt;/code&gt; module setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://maven.apache.org/&quot;&gt;Apache Maven&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TestFX/Monocle&quot;&gt;TestFX Monocle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://controlsfx.github.io/&quot;&gt;ControlsFX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GSI-CS-CO/chart-fx&quot;&gt;Chart-FX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi/mill&quot;&gt;&lt;code&gt;Mill&lt;/code&gt; build tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;Scala Build Tool - SBT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@ryanmyles_63493/the-best-build-tools-for-scala-language-dafa39f01936&quot;&gt;The Best Build Tool For Scala language&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/overviews/scala-book/scala-build-tool-sbt.html&quot;&gt;Scala Book - The most used scala build tool (sbt)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sbuild.org/&quot;&gt;SBuild - the magic-free yet powerful build tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jaxenter.com/build-tools-in-scala-144195.html&quot;&gt;A quick tour of build tools in Scala&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cvogt&quot;&gt;Jan Christopher Vogt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cvogt/cbt&quot;&gt;Chris&apos; Build Tool (CBT) for Scala&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi&quot;&gt;Li Haoyi GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.lihaoyi.com/&quot;&gt;Li Haoyi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lefou&quot;&gt;Tobias Roeser Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&quot;&gt;Mill Documentation/Introduction to Mill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.lihaoyi.com/post/MillBetterScalaBuilds.html&quot;&gt;Mill: Better Scala Builds&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=j6uThGxx-18&quot;&gt;Mill: a Build Tool based on Pure Functional Programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.handsonscala.com/&quot;&gt;Hands-on Scala Programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ammonite.io/&quot;&gt;Ammonite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi/Ammonite&quot;&gt;Ammonite Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/scala/ammonite-scripting&quot;&gt;Ammonite Scripting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://get-coursier.io/&quot;&gt;Coursier - Pure Scala Artifact Fetching&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/coursier/coursier&quot;&gt;Coursier Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/mill-scala-seed.g8&quot;&gt;Mill Scala Seed&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmf/javaFXMill&quot;&gt;Example javaFXMill project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ant.apache.org/ivy/&quot;&gt;Ivy - The agile dependency manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalameta.org/munit/&quot;&gt;MUnit - Scala testing library with actionable errors and extensible APIs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;JetBrain&apos;s IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://graphviz.org/&quot;&gt;GraphViz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://inkscape.org/&quot;&gt;InkScape&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalameta.org/metals/docs/editors/vscode/&quot;&gt;Metals VSCode plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scalacenter.github.io/bloop/&quot;&gt;Bloop build server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GSI-CS-CO/chart-fx&quot;&gt;ChartFX&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div class=&quot;footnotes&quot;&gt; 
 &lt;hr&gt; 
 &lt;ol&gt; 
  &lt;li id=&quot;fn-1&quot;&gt; &lt;p&gt;Strangely their does not seem to be an official tutorial from Oracle. Some links to the OpenJDK site are available &lt;a href=&quot;https://www.oracle.com/corporate/features/understanding-java-9-modules.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
  &lt;li id=&quot;fn-2&quot;&gt; &lt;p&gt;I have not researched nor do I know how to implement such a solution.&lt;/p&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
  &lt;li id=&quot;fn-3&quot;&gt; &lt;p&gt;I am not sure if the &lt;code&gt;dev&lt;/code&gt; package is required, but it won&apos;t consume too much space.&lt;/p&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
  &lt;li id=&quot;fn-4&quot;&gt; &lt;p&gt;The &lt;code&gt;inkview&lt;/code&gt; command could be used, but it does &lt;a href=&quot;https://bugs.launchpad.net/inkscape/+bug/171363&quot;&gt;not seem to support panning and zooming&lt;/a&gt;.&lt;/p&gt; &lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Oliver&amp;#8217;s Post</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/jbake/testsite/src/content/blog/2013/fifth-post.html</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/mill/jbake/testsite/src/content/blog/2013/fifth-post.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Oliver’s first post and the fifth post at all.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu, mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus, id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Fourth Post</title>
      <link>https://hmf.github.io/tech4rd/blog/2020/mill/jbake/testsite/src/content/blog/2013/fourth-post.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/mill/jbake/testsite/src/content/blog/2013/fourth-post.html</guid>
      	<description>
	&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img src=&quot;https://hmf.github.io/tech4rd/img/beach.jpg&quot; alt=&quot;Beach&quot;&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;ulist&quot;&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://example.org&quot; class=&quot;bare&quot;&gt;http://example.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu, mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus, id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt; 
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
